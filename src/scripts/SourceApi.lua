return {   api_version=6,   application="factorio",   application_version="2.0.60",   classes={     {       abstract=false,       attributes={         {           description="If enabled, units that repeatedly fail to succeed at commands will be destroyed.",           name="allow_destroy_when_commands_fail",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="If enabled, units that have nothing else to do will attempt to return to a spawner.",           name="allow_try_return_to_spawner",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="If enabled, units will try to separate themselves from nearby friendly units.",           name="do_separation",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="If enabled, the unit will join attack groups.",           name="join_attacks",           optional=false,           order=5,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=7,           read_type="string"         },         {           description="Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to `0`, which equals a resolution of `1x1` tiles, centered on tile centers. Values range from `-8` to `8` inclusive, where each integer increment doubles/halves the resolution. So, a resolution of `-8` equals a grid of `256x256` tiles, and a resolution of `8` equals `1/256` of a tile.",           name="path_resolution_modifier",           optional=false,           order=3,           read_type="int8",           write_type="int8"         },         {           description="The number of \"slots\" that the unit takes up in a unit group. Must be greater than 0.\n\nIf this value is changed after the unit has been added to a group, the exact behavior is undefined.",           name="size_in_group",           optional=false,           order=4,           read_type="float",           write_type="float"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=6,           read_type="boolean"         }       },       description="Collection of settings for overriding default ai behavior.",       methods={},       name="LuaAISettings",       operators={},       order=0     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="",           name="output_signal",           optional=true,           order=1,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if this accumulator sends its charge percent to circuit network.",           name="read_charge",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Control behavior for accumulators.",       methods={},       name="LuaAccumulatorControlBehavior",       operators={},       order=1,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="allowed_without_fight",           optional=false,           order=0,           read_type="boolean"         },         {           description="",           name="alternative_armor",           optional=true,           order=17,           read_type="LuaItemPrototype"         },         {           description="",           name="ammo_type",           optional=true,           order=38,           read_type="LuaItemPrototype"         },         {           description="",           name="amount",           optional=true,           order=2,           read_type="uint"         },         {           description="",           name="armor",           optional=true,           order=16,           read_type="LuaItemPrototype"         },         {           description="",           name="count",           optional=true,           order=7,           read_type="uint"         },         {           description="",           name="damage_dealer",           optional=true,           order=20,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="",           name="damage_type",           optional=true,           order=19,           read_type="LuaDamagePrototype"         },         {           description="",           name="dont_build",           optional=true,           order=9,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="",           name="dont_research",           optional=true,           order=12,           read_type={             complex_type="array",             value="LuaItemPrototype"           }         },         {           description="",           name="excluded",           optional=true,           order=10,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="",           name="fluid_product",           optional=true,           order=34,           read_type="LuaFluidPrototype"         },         {           description="",           name="in_vehicle",           optional=true,           order=23,           read_type="boolean"         },         {           description="",           name="included",           optional=true,           order=11,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="",           name="item_product",           optional=true,           order=32,           read_type="LuaItemPrototype"         },         {           description="",           name="last_hour_only",           optional=true,           order=14,           read_type="boolean"         },         {           description="",           name="limit_equip_quality",           optional=true,           order=28,           read_type="LuaQualityPrototype"         },         {           description="",           name="limit_quality",           optional=true,           order=18,           read_type="LuaQualityPrototype"         },         {           description="",           name="limited_to_one_game",           optional=true,           order=3,           read_type="boolean"         },         {           description="",           name="minimum_damage",           optional=true,           order=29,           read_type="float"         },         {           description="",           name="minimum_distance",           optional=true,           order=39,           read_type="double"         },         {           description="",           name="minimum_energy_produced",           optional=true,           order=15,           read_type="double"         },         {           description="",           name="module",           optional=true,           order=27,           read_type={             complex_type="array",             value="string"           }         },         {           description="",           name="more_than_manually",           optional=true,           order=8,           read_type="boolean"         },         {           description="",           name="not_to_kill",           optional=true,           order=25,           read_type="LuaEntityPrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=42,           read_type="string"         },         {           description="",           name="objective_condition",           optional=true,           order=1,           read_type="string"         },         {           description="",           name="personally",           optional=true,           order=22,           read_type="boolean"         },         {           description="",           name="quality",           optional=true,           order=33,           read_type="LuaQualityPrototype"         },         {           description="",           name="research_all",           optional=true,           order=36,           read_type="boolean"         },         {           description="",           name="research_with",           optional=true,           order=13,           read_type={             complex_type="array",             value="LuaItemPrototype"           }         },         {           description="",           name="science_pack",           optional=true,           order=37,           read_type="LuaItemPrototype"         },         {           description="",           name="should_survive",           optional=true,           order=30,           read_type="boolean"         },         {           description="",           name="surface",           optional=true,           order=6,           read_type="string"         },         {           description="",           name="technology",           optional=true,           order=35,           read_type="LuaTechnologyPrototype"         },         {           description="",           name="to_build",           optional=true,           order=5,           read_type="LuaEntityPrototype"         },         {           description="",           name="to_kill",           optional=true,           order=21,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="",           name="to_use",           optional=true,           order=40,           read_type="LuaItemPrototype"         },         {           description="",           name="type_not_to_kill",           optional=true,           order=26,           read_type="string"         },         {           description="",           name="type_of_dealer",           optional=true,           order=31,           read_type="string"         },         {           description="",           name="type_to_kill",           optional=true,           order=24,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=41,           read_type="boolean"         },         {           description="",           name="within",           optional=true,           order=4,           read_type="uint"         }       },       description="Prototype of a achievement.",       methods={},       name="LuaAchievementPrototype",       operators={},       order=2,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The chance that a new fork will spawn after each jump [0,1]. default = 0.",           name="fork_chance",           optional=false,           order=4,           read_type="double"         },         {           description="The tick delay between each jump. 0 = all jumps instantaneous. default = 0.",           name="jump_delay_ticks",           optional=false,           order=3,           read_type="uint"         },         {           description="maximum number of forks allowed to spawn for the entire chain. default = infinity.",           name="max_forks",           optional=false,           order=6,           read_type="uint"         },         {           description="The maximum number of forks that can spawn from a single jump. default = 1.",           name="max_forks_per_jump",           optional=false,           order=5,           read_type="uint"         },         {           description="The max number of jumps per trigger. default = 5.",           name="max_jumps",           optional=false,           order=0,           read_type="uint"         },         {           description="The max distance jumps are allowed to travel away from the original target. default = infinity.",           name="max_range",           optional=false,           order=2,           read_type="double"         },         {           description="The max length of jumps. default = 5.",           name="max_range_per_jump",           optional=false,           order=1,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Prototype of an Active Trigger.",       methods={},       name="LuaActiveTriggerPrototype",       operators={},       order=3,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="`true` if the agricultural tower reads seeds and harvested plants.",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for agricultural tower",       methods={},       name="LuaAgriculturalTowerControlBehavior",       operators={},       order=4,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="affects_evolution",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="chart_color",           optional=false,           order=0,           read_type="Color"         },         {           description="",           name="damages_trees",           optional=false,           order=2,           read_type="boolean"         },         {           description="",           name="localised_name_with_amount_key",           optional=false,           order=3,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=5,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=4,           read_type="boolean"         }       },       description="Airborne pollutant prototype.",       methods={},       name="LuaAirbornePollutantPrototype",       operators={},       order=5,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="bonus_gui_order",           optional=false,           order=0,           read_type="string"         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=1,           read_type="LuaAmmoCategoryPrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Prototype of a ammo category.",       methods={},       name="LuaAmmoCategoryPrototype",       operators={},       order=6,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="This arithmetic combinator's parameters. Writing `nil` clears the combinator's parameters.",           name="parameters",           optional=false,           order=0,           read_type="ArithmeticCombinatorParameters",           write_type="ArithmeticCombinatorParameters"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for arithmetic combinators.",       methods={},       name="LuaArithmeticCombinatorControlBehavior",       operators={},       order=7,       parent="LuaCombinatorControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="`true` if the turret will send the ammunition or fluid it contains to the circuit network.",           name="read_ammo",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for artillery turrets.",       methods={},       name="LuaArtilleryTurretControlBehavior",       operators={},       order=8,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="`true` if the assembling machine reads its ingredients contents, product contents, materials in crafting and trash inventories.",           name="circuit_read_contents",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the assembling machine outputs ingredients of current recipe as a signals to circuit network.",           name="circuit_read_ingredients",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the the assembling machine sends a signal when the recipe finishes.",           name="circuit_read_recipe_finished",           optional=false,           order=5,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the the assembling machine sends a signal when it is working.",           name="circuit_read_working",           optional=false,           order=7,           read_type="boolean",           write_type="boolean"         },         {           description="The signal sent when the assembling machine finishes a recipe.",           name="circuit_recipe_finished_signal",           optional=true,           order=6,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if the assembling machine sets its recipe from the circuit network.",           name="circuit_set_recipe",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="The signal sent when the assembling machine is working.",           name="circuit_working_signal",           optional=true,           order=8,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if the read contents should include fuel (content of energy source)",           name="include_fuel",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the read contents should include items in crafting.",           name="include_in_crafting",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=10,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=9,           read_type="boolean"         }       },       description="Control behavior for assembling machines.",       methods={},       name="LuaAssemblingMachineControlBehavior",       operators={},       order=9,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="dying_trigger_effect",           optional=true,           order=4,           read_type={             complex_type="array",             value="TriggerEffectItem"           },           subclasses={             "EntityWithHealth"           }         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=3,           read_type="LuaAsteroidChunkPrototype"         },         {           description="",           name="hide_from_signal_gui",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="item_signal_alias",           optional=true,           order=2,           read_type="LuaItemPrototype"         },         {           description="",           name="mineable_properties",           optional=false,           order=0,           read_type="MineableProperties"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="Prototype of an asteroid chunk.",       methods={},       name="LuaAsteroidChunkPrototype",       operators={},       order=10,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="`true` if read contents should include content of hands (items that were captured but are not yet in the asteroid collector's main inventory).",           name="include_hands",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="`true` if this asteroid collector reads its content and sends it to a circuit network",           name="read_content",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if this asteroid collector has filters set from circuit network",           name="set_filter",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Control behavior for asteroid collectors.",       methods={},       name="LuaAsteroidCollectorControlBehavior",       operators={},       order=11,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="can_be_disabled",           optional=false,           order=1,           read_type="boolean"         },         {           description="Category name of this prototype.",           name="category",           optional=false,           order=2,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="resource"               },               {                 complex_type="literal",                 value="terrain"               },               {                 complex_type="literal",                 value="cliff"               },               {                 complex_type="literal",                 value="enemy"               }             }           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="",           name="richness",           optional=false,           order=0,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Prototype of an autoplace control.",       methods={},       name="LuaAutoplaceControlPrototype",       operators={},       order=12,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="A dictionary listing the names of all currently active mods and mapping them to their version.",           examples={             "```\n-- This will print the names and versions of all active mods to the console.\nfor name, version in pairs(script.active_mods) do\n  game.print(name .. \" version \" .. version)\nend\n```"           },           name="active_mods",           optional=false,           order=2,           read_type={             complex_type="dictionary",             key="string",             value="string"           }         },         {           description="A dictionary of feature flags mapping to whether they are enabled.",           name="feature_flags",           optional=false,           order=3,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="expansion_shaders",                 optional=false,                 order=6,                 type="boolean"               },               {                 description="",                 name="freezing",                 optional=false,                 order=4,                 type="boolean"               },               {                 description="",                 name="quality",                 optional=false,                 order=0,                 type="boolean"               },               {                 description="",                 name="rail_bridges",                 optional=false,                 order=1,                 type="boolean"               },               {                 description="",                 name="segmented_units",                 optional=false,                 order=5,                 type="boolean"               },               {                 description="",                 name="space_travel",                 optional=false,                 order=2,                 type="boolean"               },               {                 description="",                 name="spoiling",                 optional=false,                 order=3,                 type="boolean"               }             }           }         },         {           description="Information about the currently running scenario/campaign/tutorial.",           name="level",           optional=false,           order=1,           read_type={             complex_type="table",             parameters={               {                 description="The campaign name if any.",                 name="campaign_name",                 optional=true,                 order=2,                 type="string"               },               {                 description="Is this level a simulation? (The main menu and 'Tips and tricks' use simulations)",                 name="is_simulation",                 optional=true,                 order=0,                 type="boolean"               },               {                 description="Is this level a tutorial?",                 name="is_tutorial",                 optional=true,                 order=1,                 type="boolean"               },               {                 description="The level name.",                 name="level_name",                 optional=false,                 order=3,                 type="string"               },               {                 description="The mod name if any.",                 name="mod_name",                 optional=true,                 order=4,                 type="string"               }             }           }         },         {           description="The name of the mod from the environment this is used in.",           name="mod_name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         }       },       description="Entry point for registering event handlers. It is accessible through the global object named `script`.",       methods={         {           description="Generate a new, unique event ID that can be used to raise custom events with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event).",           format={             takes_table=false           },           name="generate_event_name",           order=7,           parameters={},           return_values={             {               description="The newly generated event ID. This will be a new value that does not correspond to any named entry in defines.events.",               optional=false,               order=0,               type="defines.events"             }           }         },         {           description="Gets the filters for the given event.",           format={             takes_table=false           },           name="get_event_filter",           order=12,           parameters={             {               description="ID of the event to get.",               name="event",               optional=false,               order=0,               type="LuaEventType"             }           },           return_values={             {               description="The filters or `nil` if none are defined.",               optional=true,               order=0,               type="EventFilter"             }           }         },         {           description="Find the event handler for an event.",           format={             takes_table=false           },           name="get_event_handler",           order=9,           parameters={             {               description="The event identifier to get a handler for.",               name="event",               optional=false,               order=0,               type="LuaEventType"             }           },           return_values={             {               description="Reference to the function currently registered as the handler, if it was found.",               optional=true,               order=0,               type={                 complex_type="function",                 parameters={                   "EventData"                 }               }             }           }         },         {           description="Converts LuaEventType into related value of defines.events. Value will be provided also if event was not given a constant inside of defines.events.",           format={             takes_table=false           },           name="get_event_id",           order=8,           parameters={             {               description="",               name="event",               optional=false,               order=0,               type="LuaEventType"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="defines.events"             }           }         },         {           description="Gets the mod event order as a string.",           format={             takes_table=false           },           name="get_event_order",           order=10,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Register a function to be run when mod configuration changes.\n\nThis is called when the game version or any mod version changed, when any mod was added or removed, when a startup setting has changed, when any prototypes have been added or removed, or when a migration was applied. It allows the mod to make any changes it deems appropriate to both the data structures in its [storage](runtime:storage) table or to the game state through [LuaGameScript](runtime:LuaGameScript).\n\nFor more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.",           format={             takes_table=false           },           name="on_configuration_changed",           order=2,           parameters={             {               description="The handler for this event. Passing `nil` will unregister it.",               name="handler",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="function",                     parameters={                       "ConfigurationChangedData"                     }                   },                   "nil"                 }               }             }           },           return_values={}         },         {           description="Register a handler to run on the specified event(s). Each mod can only register once for every event, as any additional registration will overwrite the previous one. This holds true even if different filters are used for subsequent registrations.",           examples={             "```\n-- Register for the on_tick event to print the current tick to console each tick\nscript.on_event(defines.events.on_tick,\nfunction(event) game.print(event.tick) end)\n```",             "```\n-- Register for the on_built_entity event, limiting it to only be received when a `\"fast-inserter\"` is built\nscript.on_event(defines.events.on_built_entity,\nfunction(event) game.print(\"Gotta go fast!\") end,\n{{filter = \"name\", name = \"fast-inserter\"}})\n```"           },           format={             takes_table=false           },           name="on_event",           order=3,           parameters={             {               description="The event(s) or custom-input to invoke the handler on.",               name="event",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEventType",                   {                     complex_type="array",                     value="LuaEventType"                   }                 }               }             },             {               description="The filters for this event. Can only be used when registering for individual events.",               name="filters",               optional=true,               order=2,               type="EventFilter"             },             {               description="The handler for this event. Passing `nil` will unregister it.",               name="handler",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="function",                     parameters={                       "EventData"                     }                   },                   "nil"                 }               }             }           },           return_values={}         },         {           description="Register a function to be run on mod initialization.\n\nThis is only called when a new save game is created or when a save file is loaded that previously didn't contain the mod. During it, the mod gets the chance to set up initial values that it will use for its lifetime. It has full access to [LuaGameScript](runtime:LuaGameScript) and the [storage](runtime:storage) table and can change anything about them that it deems appropriate. No other events will be raised for the mod until it has finished this step.\n\nFor more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.",           examples={             "```\n-- Initialize a `players` table in `storage` for later use\nscript.on_init(function()\n  storage.players = {}\nend)\n```"           },           format={             takes_table=false           },           name="on_init",           order=0,           parameters={             {               description="The handler for this event. Passing `nil` will unregister it.",               name="handler",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="function",                     parameters={}                   },                   "nil"                 }               }             }           },           return_values={}         },         {           description="Register a function to be run on save load. This is only called for mods that have been part of the save previously, or for players connecting to a running multiplayer session.\n\nIt gives the mod the opportunity to rectify potential differences in local state introduced by the save/load cycle. Doing anything other than the following three will lead to desyncs, breaking multiplayer and replay functionality. Access to [LuaGameScript](runtime:LuaGameScript) is not available. The [storage](runtime:storage) table can be accessed and is safe to read from, but not write to, as doing so will lead to an error.\n\nThe only legitimate uses of this event are these:\n\n- Re-setup [metatables](https://www.lua.org/pil/13.html) as they are not persisted through the save/load cycle.\n\n- Re-setup conditional event handlers, meaning subscribing to an event only when some condition is met to save processing time.\n\n- Create local references to data stored in the [storage](runtime:storage) table.\n\nFor all other purposes, [LuaBootstrap::on_init](runtime:LuaBootstrap::on_init), [LuaBootstrap::on_configuration_changed](runtime:LuaBootstrap::on_configuration_changed) or [migrations](runtime:migrations) should be used instead.\n\nFor more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.",           format={             takes_table=false           },           name="on_load",           order=1,           parameters={             {               description="The handler for this event. Passing `nil` will unregister it.",               name="handler",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="function",                     parameters={}                   },                   "nil"                 }               }             }           },           return_values={}         },         {           description="Register a handler to run every nth-tick(s). When the game is on tick 0 it will trigger all registered handlers.",           format={             takes_table=false           },           name="on_nth_tick",           order=4,           parameters={             {               description="The handler to run. Passing `nil` will unregister it for the provided nth-tick(s).",               name="handler",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="function",                     parameters={                       "NthTickEventData"                     }                   },                   "nil"                 }               }             },             {               description="The nth-tick(s) to invoke the handler on. Passing `nil` as the only parameter will unregister all nth-tick handlers.",               name="tick",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint",                   {                     complex_type="array",                     value="uint"                   },                   "nil"                 }               }             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_biter_base_built",           order=17,           parameters={             {               description="The entity that was built.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           raises={             {               description="Raised with the provided arguments.",               name="on_biter_base_built",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_console_chat",           order=14,           parameters={             {               description="The chat message to send.",               name="message",               optional=false,               order=1,               type="string"             },             {               description="The player doing the chatting.",               name="player_index",               optional=false,               order=0,               type="uint"             }           },           raises={             {               description="Raised with the provided arguments.",               name="on_console_chat",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Raise an event. Only events generated with [LuaBootstrap::generate_event_name](runtime:LuaBootstrap::generate_event_name) and the following can be raised:",           examples={             "```\n-- Raise the on_console_chat event with the desired message 'from' the first player\nlocal data = {player_index = 1, message = \"Hello friends!\"}\nscript.raise_event(defines.events.on_console_chat, data)\n```"           },           format={             takes_table=false           },           lists={             "Events that can be raised manually:\n\n- [on_console_chat](runtime:on_console_chat)\n- [on_player_crafted_item](runtime:on_player_crafted_item)\n- [on_player_fast_transferred](runtime:on_player_fast_transferred)\n- [on_biter_base_built](runtime:on_biter_base_built)\n- [on_market_item_purchased](runtime:on_market_item_purchased)\n- [script_raised_built](runtime:script_raised_built)\n- [script_raised_destroy](runtime:script_raised_destroy)\n- [script_raised_revive](runtime:script_raised_revive)\n- [script_raised_teleported](runtime:script_raised_teleported)\n- [script_raised_set_tiles](runtime:script_raised_set_tiles)"           },           name="raise_event",           order=13,           parameters={             {               description="Table with extra data that will be passed to the event handler. Any invalid LuaObjects will silently stop the event from being raised.",               name="data",               optional=false,               order=1,               type="table"             },             {               description="ID or name of the event to raise.",               name="event",               optional=false,               order=0,               type="LuaEventType"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_market_item_purchased",           order=18,           parameters={             {               description="The amount of offers purchased.",               name="count",               optional=false,               order=3,               type="uint"             },             {               description="The market entity.",               name="market",               optional=false,               order=1,               type="LuaEntity"             },             {               description="The index of the offer purchased.",               name="offer_index",               optional=false,               order=2,               type="uint"             },             {               description="The player who did the purchasing.",               name="player_index",               optional=false,               order=0,               type="uint"             }           },           raises={             {               description="Raised with the provided arguments.",               name="on_market_item_purchased",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_player_crafted_item",           order=15,           parameters={             {               description="The item that has been crafted.",               name="item_stack",               optional=false,               order=0,               type="LuaItemStack"             },             {               description="The player doing the crafting.",               name="player_index",               optional=false,               order=1,               type="uint"             },             {               description="The recipe used to craft this item.",               name="recipe",               optional=false,               order=2,               type="RecipeID"             }           },           raises={             {               description="Raised with the provided arguments.",               name="on_player_crafted_item",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_player_fast_transferred",           order=16,           parameters={             {               description="The entity transferred from or to.",               name="entity",               optional=false,               order=1,               type="LuaEntity"             },             {               description="Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.",               name="from_player",               optional=false,               order=2,               type="boolean"             },             {               description="Whether the transfer was a split action (half stack).",               name="is_split",               optional=false,               order=3,               type="boolean"             },             {               description="The player transferred from or to.",               name="player_index",               optional=false,               order=0,               type="uint"             }           },           raises={             {               description="Raised with the provided arguments.",               name="on_player_fast_transferred",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_script_built",           order=19,           parameters={             {               description="The entity that has been built.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           raises={             {               description="Raised with the provided arguments.",               name="script_raised_built",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_script_destroy",           order=20,           parameters={             {               description="The entity that was destroyed.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           raises={             {               description="Raised with the provided arguments.",               name="script_raised_destroy",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_script_revive",           order=21,           parameters={             {               description="The entity that was revived.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="The tags associated with this entity, if any.",               name="tags",               optional=true,               order=1,               type="Tags"             }           },           raises={             {               description="Raised with the provided arguments.",               name="script_raised_revive",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_script_set_tiles",           order=23,           parameters={             {               description="The surface whose tiles have been changed.",               name="surface_index",               optional=false,               order=0,               type="uint"             },             {               description="The tiles that have been changed.",               name="tiles",               optional=false,               order=1,               type={                 complex_type="array",                 value="Tile"               }             }           },           raises={             {               description="Raised with the provided arguments.",               name="script_raised_set_tiles",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="raise_script_teleported",           order=22,           parameters={             {               description="The entity that was teleported.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="The entity's position before the teleportation.",               name="old_position",               optional=false,               order=2,               type="MapPosition"             },             {               description="The entity's surface before the teleportation.",               name="old_surface_index",               optional=false,               order=1,               type="uint8"             }           },           raises={             {               description="Raised with the provided arguments.",               name="script_raised_teleported",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Register a metatable to have linkage recorded and restored when saving/loading.\n\nThe metatable itself will not be saved. Instead, only the linkage to a registered metatable is saved, and the metatable registered under that name will be used when loading the table.\n\n`register_metatable()` can not be used in the console, in event listeners or during a `remote.call()`.\n\nThe metatable first needs to be defined in the mod's root scope, then registered using this method. From then on, it will be properly restored for tables in [storage](runtime:storage).\n\n```\nlocal metatable =\n{\n  __index = function(key)\n    return \"no value for key \" .. key\n  end\n}\nscript.register_metatable(\"my_metatable\", metatable)\n```\n\nThis previously defined `metatable` can then be set on any table as usual:\n\n```\nlocal table = {key=\"value\"}\nsetmetatable(table, metatable)\n```",           format={             takes_table=false           },           name="register_metatable",           order=6,           parameters={             {               description="The metatable to register.",               name="metatable",               optional=false,               order=1,               type="table"             },             {               description="The name of this metatable. Names must be unique per mod.",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Registers an object so that after it's destroyed, [on_object_destroyed](runtime:on_object_destroyed) is called.\n\nOnce an object is registered, it stays registered until it is actually destroyed, even through save/load cycles. The registration is global across all mods, meaning once one mod registers an object, all mods listening to [on_object_destroyed](runtime:on_object_destroyed) will receive the event when it is destroyed. Registering the same object multiple times will still only fire the destruction event once, and will return the same registration number.\n\nDepending on when a given object is destroyed, [on_object_destroyed](runtime:on_object_destroyed) will either be fired at the end of the current tick or at the end of the next tick.",           format={             takes_table=false           },           name="register_on_object_destroyed",           order=5,           parameters={             {               description="The object to register.",               name="object",               optional=false,               order=0,               type="RegistrationTarget"             }           },           return_values={             {               description="The registration number. It is used to identify the object in the [on_object_destroyed](runtime:on_object_destroyed) event.",               optional=false,               order=0,               type="uint64"             },             {               description="The [useful identifier](runtime:RegistrationTarget) of the object if it has one. This identifier is specific to the object type, for example for trains it is the value [LuaTrain::id](runtime:LuaTrain::id).",               optional=false,               order=1,               type="uint64"             },             {               description="Type of the target object.",               optional=false,               order=2,               type="defines.target_type"             }           }         },         {           description="Sets the filters for the given event. The filters are only retained when set after the actual event registration, because registering for an event with different or no filters will overwrite previously set ones.\n\nLimit the [on_marked_for_deconstruction](runtime:on_marked_for_deconstruction) event to only be received when a non-ghost entity is marked for deconstruction.\n\n```\nscript.set_event_filter(defines.events.on_marked_for_deconstruction, {{filter = \"ghost\", invert = true}})\n```\n\nLimit the [on_built_entity](runtime:on_built_entity) event to only be received when either a `unit` or a `unit-spawner` is built.\n\n```\nscript.set_event_filter(defines.events.on_built_entity, {{filter = \"type\", type = \"unit\"}, {filter = \"type\", type = \"unit-spawner\"}})\n```\n\nLimit the [on_entity_damaged](runtime:on_entity_damaged) event to only be received when a `rail` is damaged by an `acid` attack.\n\n```\nscript.set_event_filter(defines.events.on_entity_damaged, {{filter = \"rail\"}, {filter = \"damage-type\", type = \"acid\", mode = \"and\"}})\n```",           format={             takes_table=false           },           name="set_event_filter",           order=11,           parameters={             {               description="ID of the event to filter.",               name="event",               optional=false,               order=0,               type="LuaEventType"             },             {               description="The filters or `nil` to clear them.",               name="filters",               optional=true,               order=1,               type="EventFilter"             }           },           return_values={}         }       },       name="LuaBootstrap",       operators={},       order=13     },     {       abstract=false,       attributes={         {           description="The burnt result inventory.",           name="burnt_result_inventory",           optional=false,           order=2,           read_type="LuaInventory"         },         {           description="The currently burning item. Writing `nil` will void the currently burning item without producing a [LuaBurner::burnt_result](runtime:LuaBurner::burnt_result).\n\nWriting to this automatically handles correcting [LuaBurner::remaining_burning_fuel](runtime:LuaBurner::remaining_burning_fuel).",           name="currently_burning",           optional=true,           order=6,           read_type="ItemIDAndQualityIDPair",           write_type="ItemWithQualityID"         },         {           description="The fuel categories this burner uses.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",           name="fuel_categories",           optional=false,           order=7,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           }         },         {           description="The current heat (energy) stored in this burner.",           name="heat",           optional=false,           order=3,           read_type="double",           write_type="double"         },         {           description="The maximum heat (maximum energy) that this burner can store.",           name="heat_capacity",           optional=false,           order=4,           read_type="double"         },         {           description="The fuel inventory.",           name="inventory",           optional=false,           order=1,           read_type="LuaInventory"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="The owner of this burner energy source",           name="owner",           optional=false,           order=0,           read_type={             complex_type="union",             full_format=false,             options={               "LuaEntity",               "LuaEquipment"             }           }         },         {           description="The amount of energy left in the currently-burning fuel item.\n\nWriting to this will silently do nothing if there's no [LuaBurner::currently_burning](runtime:LuaBurner::currently_burning) set.",           name="remaining_burning_fuel",           optional=false,           order=5,           read_type="double",           write_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="A reference to the burner energy source owned by a specific [LuaEntity](runtime:LuaEntity) or [LuaEquipment](runtime:LuaEquipment).",       methods={},       name="LuaBurner",       operators={},       order=14     },     {       abstract=false,       attributes={         {           description="",           name="burnt_inventory_size",           optional=false,           order=5,           read_type="uint"         },         {           description="",           name="effectivity",           optional=false,           order=3,           read_type="double"         },         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",           name="emissions_per_joule",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="The value in the dictionary is meaningless and exists just to allow for easy lookup.",           name="fuel_categories",           optional=false,           order=8,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           }         },         {           description="",           name="fuel_inventory_size",           optional=false,           order=4,           read_type="uint"         },         {           description="",           name="initial_fuel",           optional=true,           order=9,           read_type="LuaItemPrototype"         },         {           description="",           name="initial_fuel_percent",           optional=false,           order=10,           read_type="double"         },         {           description="The light flicker definition for this burner prototype.",           name="light_flicker",           optional=true,           order=7,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="border_fix_speed",                 optional=false,                 order=4,                 type="float"               },               {                 description="",                 name="color",                 optional=false,                 order=7,                 type="Color"               },               {                 description="",                 name="derivation_change_deviation",                 optional=false,                 order=3,                 type="float"               },               {                 description="",                 name="derivation_change_frequency",                 optional=false,                 order=2,                 type="float"               },               {                 description="",                 name="light_intensity_to_size_coefficient",                 optional=false,                 order=6,                 type="float"               },               {                 description="",                 name="maximum_intensity",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="minimum_intensity",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="minimum_light_size",                 optional=false,                 order=5,                 type="float"               }             }           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=12,           read_type="string"         },         {           description="",           name="render_no_network_icon",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="render_no_power_icon",           optional=false,           order=2,           read_type="boolean"         },         {           description="The smoke sources for this burner prototype.",           name="smoke",           optional=true,           order=6,           read_type={             complex_type="array",             value="SmokeSource"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=11,           read_type="boolean"         }       },       description="Prototype of a burner energy source.",       methods={},       name="LuaBurnerPrototype",       operators={},       order=15     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Description of burner usage.",       methods={},       name="LuaBurnerUsagePrototype",       operators={},       order=16,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="busy",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="is_input_compatible",           optional=false,           order=3,           read_type="boolean"         },         {           description="",           name="is_output_compatible",           optional=false,           order=4,           read_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="",           name="reserved",           optional=false,           order=2,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="A cargo hatch.",       methods={         {           description="Creates a cargo pod for output at the owning entity hatch location.",           format={             takes_table=false           },           name="create_cargo_pod",           order=0,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaEntity"             }           }         }       },       name="LuaCargoHatch",       operators={},       order=17     },     {       abstract=false,       attributes={         {           description="The circuit mode of operations for the cargo landing pad.",           name="circuit_exclusive_mode_of_operation",           optional=false,           order=0,           read_type="defines.control_behavior.cargo_landing_pad.exclusive_mode",           write_type="defines.control_behavior.cargo_landing_pad.exclusive_mode"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for cargo landing pad.",       methods={},       name="LuaCargoLandingPadControlBehavior",       operators={},       order=18,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="A chunk iterator can be used for iterating chunks coordinates of a surface.\n\nThe returned type is a [ChunkPositionAndArea](runtime:ChunkPositionAndArea) containing the chunk coordinates and its area.",       examples={         "```\nfor chunk in some_surface.get_chunks() do\n  game.player.print(\"x: \" .. chunk.x .. \", y: \" .. chunk.y)\n  game.player.print(\"area: \" .. serpent.line(chunk.area))\nend\n```"       },       methods={},       name="LuaChunkIterator",       operators={         {           description="Gets the next chunk position if the iterator is not yet done and increments the it.",           format={             takes_table=false           },           name="call",           order=0,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="ChunkPositionAndArea"             }           }         }       },       order=19     },     {       abstract=false,       attributes={         {           description="The number of circuits connected to this network.",           name="connected_circuit_count",           optional=false,           order=5,           read_type="uint"         },         {           description="The entity this circuit network reference is associated with.",           name="entity",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="The circuit networks ID.",           name="network_id",           optional=false,           order=4,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=7,           read_type="string"         },         {           description="The circuit network signals last tick. `nil` if there were no signals last tick.",           name="signals",           optional=true,           order=3,           read_type={             complex_type="array",             value="Signal"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=6,           read_type="boolean"         },         {           description="Wire connector ID on associated entity this network was gotten from.",           name="wire_connector_id",           optional=false,           order=2,           read_type="defines.wire_connector_id"         },         {           description="The wire type this network is associated with.",           name="wire_type",           optional=false,           order=1,           read_type="defines.wire_type"         }       },       description="A circuit network associated with a given entity, connector, and wire type.",       methods={         {           description="",           format={             takes_table=false           },           name="get_signal",           order=0,           parameters={             {               description="The signal to read.",               name="signal",               optional=false,               order=0,               type="SignalID"             }           },           return_values={             {               description="The current value of the signal.",               optional=false,               order=0,               type="int"             }           }         }       },       name="LuaCircuitNetwork",       operators={},       order=20     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a collision layer.",       methods={},       name="LuaCollisionLayerPrototype",       operators={},       order=21,       parent="LuaPrototypeBase"     },     {       abstract=true,       attributes={         {           description="The circuit network signals sent by this combinator last tick.",           name="signals_last_tick",           optional=false,           order=0,           read_type={             complex_type="array",             value="Signal"           }         }       },       description="",       methods={         {           description="Gets the value of a specific signal sent by this combinator behavior last tick or `nil` if the signal didn't exist.",           format={             takes_table=false           },           name="get_signal_last_tick",           order=0,           parameters={             {               description="The signal to get",               name="signal",               optional=false,               order=0,               type="SignalID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="int"             }           }         }       },       name="LuaCombinatorControlBehavior",       operators={},       order=22,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="Lists the custom commands registered by scripts through `LuaCommandProcessor`.",           name="commands",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value="LocalisedString"           }         },         {           description="Lists the built-in commands of the core game. The [wiki](https://wiki.factorio.com/Console) has an overview of these.",           name="game_commands",           optional=false,           order=1,           read_type={             complex_type="dictionary",             key="string",             value="LocalisedString"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         }       },       description="Allows for the registration of custom console commands through the global object named `commands`. Similarly to [event subscriptions](runtime:LuaBootstrap::on_event), these don't persist through a save-and-load cycle.",       methods={         {           description="Add a custom console command.\n\nTrying to add a command with the `name` of a game command or the name of a custom command that is already in use will result in an error.\n\nThis example command will register a custom event called `print_tick` that prints the current tick to either the player issuing the command or to everyone on the server, depending on the command parameter:\n\n```\ncommands.add_command(\"print_tick\", nil, function(command)\n  if command.player_index ~= nil and command.parameter == \"me\" then\n    game.get_player(command.player_index).print(command.tick)\n  else\n    game.print(command.tick)\n  end\nend)\n```\n\nThis shows the usage of the table that gets passed to any function handling a custom command. This specific example makes use of the `tick` and the optional `player_index` and `parameter` fields. The user is supposed to either call it without any parameter (`\"/print_tick\"`) or with the `\"me\"` parameter (`\"/print_tick me\"`).",           format={             takes_table=false           },           name="add_command",           order=0,           parameters={             {               description="The function that will be called when this command is invoked.",               name="function",               optional=false,               order=2,               type={                 complex_type="function",                 parameters={                   "CustomCommandData"                 }               }             },             {               description="The localised help message. It will be shown to players using the `/help` command.",               name="help",               optional=false,               order=1,               type="LocalisedString"             },             {               description="The desired name of the command (case sensitive).",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Remove a custom console command.",           format={             takes_table=false           },           name="remove_command",           order=1,           parameters={             {               description="The name of the command to remove (case sensitive).",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="Whether the command was successfully removed. Returns `false` if the command didn't exist.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaCommandProcessor",       operators={},       order=23     },     {       abstract=false,       attributes={         {           description="The command of this commandable, if any.",           name="command",           optional=true,           order=7,           read_type="Command"         },         {           description="Non recursively returns all members of this unit group.",           name="commandable_members",           optional=false,           order=14,           read_type={             complex_type="array",             value="LuaCommandable"           },           subclasses={             "UnitGroup"           }         },         {           description="The distraction command of this commandable, if any.",           name="distraction_command",           optional=true,           order=8,           read_type="Command"         },         {           description="Returns entity object for this commandable.",           name="entity",           optional=false,           order=16,           read_type="LuaEntity",           subclasses={             "Entity"           }         },         {           description="The force of this commandable.",           name="force",           optional=false,           order=4,           read_type="LuaForce"         },         {           description="If this commandable has a command assigned.",           name="has_command",           optional=false,           order=6,           read_type="boolean"         },         {           description="If this commandable is Entity.",           name="is_entity",           optional=false,           order=1,           read_type="boolean"         },         {           description="Whether this unit group is controlled by a script or by the game engine. This can be changed using [LuaCommandable::set_autonomous](runtime:LuaCommandable::set_autonomous). Units created by [LuaSurface::create_unit_group](runtime:LuaSurface::create_unit_group) are considered script-driven.",           name="is_script_driven",           optional=false,           order=15,           read_type="boolean",           subclasses={             "UnitGroup"           }         },         {           description="If this commandable is UnitGroup.",           name="is_unit_group",           optional=false,           order=0,           read_type="boolean"         },         {           description="All entity members of this unit group, recursive (if unit group is member of this unit group, its members will be returned here).",           name="members",           optional=false,           order=13,           read_type={             complex_type="array",             value="LuaEntity"           },           subclasses={             "UnitGroup"           }         },         {           description="Current moving state of the commandable's behavior",           name="moving_state",           optional=false,           order=11,           read_type="defines.moving_state"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=18,           read_type="string"         },         {           description="The unit group this commandable is a member of, if any.",           name="parent_group",           optional=true,           order=9,           read_type="LuaCommandable"         },         {           description="Current position of this commandable.\n\nIf commandable is a UnitGroup, this can have different meanings depending on the group state. When the group is gathering, the position is the place of gathering. When the group is moving, the position is the expected position of its members along the path. When the group is attacking, it is the average position of its members.",           name="position",           optional=false,           order=3,           read_type="MapPosition"         },         {           description="The spawner associated with this commandable, if any.",           name="spawner",           optional=true,           order=10,           read_type="LuaEntity"         },         {           description="Whether this group is gathering, moving or attacking.",           name="state",           optional=false,           order=12,           read_type="defines.group_state",           subclasses={             "UnitGroup"           }         },         {           description="Surface this commandable is on.",           name="surface",           optional=false,           order=2,           read_type="LuaSurface"         },         {           description="Unique identifier of this commandable.",           name="unique_id",           optional=false,           order=5,           read_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=17,           read_type="boolean"         }       },       description="AI object which can be ordered commands. This can represent a UnitGroup (a set of multiple commandables) or can be a single Unit, SpiderUnit or other commandable entity.",       methods={         {           description="Adds a member to this UnitGroup. Has the same effect as setting defines.command.group command on the member to join the group.\n\nThe member must have the same force be on the same surface as the group.",           format={             takes_table=false           },           name="add_member",           order=4,           parameters={             {               description="",               name="member",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaCommandable",                   "LuaEntity"                 }               }             }           },           return_values={},           subclasses={             "UnitGroup"           }         },         {           description="Destroys this commandable. If it is a unit group, members will not be destroyed, they will be merely unlinked from the group.",           format={             takes_table=false           },           name="destroy",           order=0,           parameters={},           return_values={}         },         {           description="Release the commandable from the spawner. This allows the spawner to continue spawning additional units.",           format={             takes_table=false           },           name="release_from_spawner",           order=3,           parameters={},           return_values={}         },         {           description="Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous groups aren't considered to be [script-driven](runtime:LuaCommandable::is_script_driven).",           format={             takes_table=false           },           name="set_autonomous",           order=5,           parameters={},           return_values={},           subclasses={             "UnitGroup"           }         },         {           description="Give this commandable a command.",           format={             takes_table=false           },           name="set_command",           order=1,           parameters={             {               description="",               name="command",               optional=false,               order=0,               type="Command"             }           },           return_values={}         },         {           description="Give this commandable a distraction command.",           format={             takes_table=false           },           name="set_distraction_command",           order=2,           parameters={             {               description="",               name="command",               optional=false,               order=0,               type="Command"             }           },           return_values={}         },         {           description="Make the group start moving even if some of its members haven't yet arrived.",           format={             takes_table=false           },           name="start_moving",           order=6,           parameters={},           return_values={},           subclasses={             "UnitGroup"           }         }       },       name="LuaCommandable",       operators={},       order=24     },     {       abstract=false,       attributes={         {           description="Turns this constant combinator on and off.",           name="enabled",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="All logistic sections of this constant combinator.",           name="sections",           optional=false,           order=1,           read_type={             complex_type="array",             value="LuaLogisticSection"           }         },         {           description="Amount of logistic sections this constant combinator has.",           name="sections_count",           optional=false,           order=2,           read_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Control behavior for constant combinators.",       methods={         {           description="Adds a new logistic section to this constant combinator if possible.",           format={             takes_table=false           },           name="add_section",           order=0,           parameters={             {               description="The group to assign this section to.",               name="group",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="Logistic section if added.",               optional=true,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Gets section on the selected index, if it exists.",           format={             takes_table=false           },           name="get_section",           order=2,           parameters={             {               description="Index of the section.",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).",           format={             takes_table=false           },           name="remove_section",           order=1,           parameters={             {               description="Index of the section.",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether section was removed.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaConstantCombinatorControlBehavior",       operators={},       order=25,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="`true` if this container is sending its content to a circuit network",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for container entities.",       methods={},       name="LuaContainerControlBehavior",       operators={},       order=26,       parent="LuaControlBehavior"     },     {       abstract=true,       attributes={         {           description="The build distance of this character or max uint when not a character or player connected to a character.",           name="build_distance",           optional=false,           order=40,           read_type="uint"         },         {           description="The cargo pod the player is currently sitting in or the cargo pod attached to this rocket silo.",           name="cargo_pod",           optional=true,           order=4,           read_type="LuaEntity"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_additional_mining_categories",           optional=false,           order=27,           read_type={             complex_type="array",             value="string"           },           write_type={             complex_type="array",             value="string"           }         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_build_distance_bonus",           optional=false,           order=29,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_crafting_speed_modifier",           optional=false,           order=25,           read_type="double",           write_type="double"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_health_bonus",           optional=false,           order=38,           read_type="float",           write_type="float"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_inventory_slots_bonus",           optional=false,           order=35,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_item_drop_distance_bonus",           optional=false,           order=30,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_item_pickup_distance_bonus",           optional=false,           order=33,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_loot_pickup_distance_bonus",           optional=false,           order=34,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_maximum_following_robot_count_bonus",           optional=false,           order=37,           read_type="uint",           write_type="uint"         },         {           description="The current mining progress between 0 and 1 of this character, or 0 if they aren't mining.",           name="character_mining_progress",           optional=false,           order=48,           read_type="double"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_mining_speed_modifier",           optional=false,           order=26,           read_type="double",           write_type="double"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_reach_distance_bonus",           optional=false,           order=31,           read_type="uint",           write_type="uint"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_resource_reach_distance_bonus",           optional=false,           order=32,           read_type="uint",           write_type="uint"         },         {           description="The current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.",           name="character_running_speed",           optional=false,           order=47,           read_type="double"         },         {           description="Modifies the running speed of this character by the given value as a percentage. Setting the running modifier to `0.5` makes the character run 50% faster. The minimum value of `-1` reduces the movement speed by 100%, resulting in a speed of `0`.\n\nWhen called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_running_speed_modifier",           optional=false,           order=28,           read_type="double",           write_type="double"         },         {           description="When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="character_trash_slot_count_bonus",           optional=false,           order=36,           read_type="uint",           write_type="uint"         },         {           description="When `true` hand crafting is free and instant.",           name="cheat_mode",           optional=false,           order=24,           read_type="boolean",           write_type="boolean"         },         {           description="The current crafting queue items.",           name="crafting_queue",           optional=false,           order=22,           read_type={             complex_type="array",             value="CraftingQueueItem"           }         },         {           description="The crafting queue progress in the range `[0-1]`. `0` when no recipe is being crafted.",           name="crafting_queue_progress",           optional=false,           order=11,           read_type="double",           write_type="double"         },         {           description="Size of the crafting queue.",           name="crafting_queue_size",           optional=false,           order=10,           read_type="uint"         },         {           description="The ghost prototype in the player's cursor.\n\nItems in the cursor stack will take priority over the cursor ghost.",           name="cursor_ghost",           optional=true,           order=19,           read_type="ItemIDAndQualityIDPair",           write_type="ItemWithQualityID"         },         {           description="The blueprint record in the player's cursor.",           name="cursor_record",           optional=true,           order=20,           read_type="LuaRecord"         },         {           description="The player's cursor stack. `nil` if the player controller is a spectator.",           examples={             "```\n-- Even though this property is marked as read-only, it returns a LuaItemStack,\n-- meaning it can be manipulated like so:\nplayer.cursor_stack.clear()\n```"           },           name="cursor_stack",           optional=true,           order=18,           read_type="LuaItemStack"         },         {           description="`true` if the player is in a vehicle. Writing to this attribute puts the player in or out of a vehicle.",           name="driving",           optional=false,           order=21,           raises={             {               description="Raised if the driving state successfully changed.",               name="on_player_driving_changed_state",               optional=true,               order=0,               timeframe="instantly"             }           },           read_type="boolean",           write_type="boolean"         },         {           description="The item drop distance of this character or max uint when not a character or player connected to a character.",           name="drop_item_distance",           optional=false,           order=41,           read_type="uint"         },         {           description="The current combat robots following the character.\n\nWhen called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",           name="following_robots",           optional=false,           order=23,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The force of this entity. Reading will always give a [LuaForce](runtime:LuaForce), but it is possible to assign either [string](runtime:string), [uint8](runtime:uint8) or [LuaForce](runtime:LuaForce) to this attribute to change the force.",           name="force",           optional=false,           order=6,           read_type="LuaForce",           write_type="ForceID"         },         {           description="Unique [index](runtime:LuaForce::index) (ID) associated with the force of this entity.",           name="force_index",           optional=false,           order=7,           read_type="uint"         },         {           description="The space platform hub the player is currently sitting in.",           name="hub",           optional=true,           order=5,           read_type="LuaEntity"         },         {           description="Whether this character entity is in combat.",           name="in_combat",           optional=false,           order=46,           read_type="boolean"         },         {           description="The item pickup distance of this character or max double when not a character or player connected to a character.",           name="item_pickup_distance",           optional=false,           order=43,           read_type="double"         },         {           description="The loot pickup distance of this character or max double when not a character or player connected to a character.",           name="loot_pickup_distance",           optional=false,           order=44,           read_type="double"         },         {           description="Current mining state.\n\nWhen the player isn't mining tiles the player will mine whatever entity is currently selected. See [LuaControl::selected](runtime:LuaControl::selected) and [LuaControl::update_selected_entity](runtime:LuaControl::update_selected_entity).",           name="mining_state",           optional=false,           order=14,           read_type={             complex_type="table",             parameters={               {                 description="Whether the player is mining at all.",                 name="mining",                 optional=false,                 order=0,                 type="boolean"               },               {                 description="What location the player is mining. Only relevant if `mining` is `true`.",                 name="position",                 optional=true,                 order=1,                 type="MapPosition"               }             }           },           write_type={             complex_type="table",             parameters={               {                 description="Whether the player is mining at all.",                 name="mining",                 optional=false,                 order=0,                 type="boolean"               },               {                 description="What location the player is mining. Only relevant if `mining` is `true`.",                 name="position",                 optional=true,                 order=1,                 type="MapPosition"               }             }           }         },         {           description="The GUI the player currently has open.\n\nThis is the GUI that will asked to close (by firing the [on_gui_closed](runtime:on_gui_closed) event) when the `Esc` or `E` keys are pressed. If this attribute is non-nil, then writing `nil` or a new GUI to it will ask the existing GUI to close.\n\nWrite supports any of the types. Read will return the `entity`, `equipment`, `equipment-grid`, `player`, `element`, `inventory`, `item` or `nil`.",           name="opened",           optional=true,           order=9,           raises={             {               description="Raised when writing a valid GUI target to this attribute.",               name="on_gui_opened",               optional=true,               order=0,               timeframe="instantly"             }           },           read_type={             complex_type="union",             full_format=false,             options={               "LuaEntity",               "LuaItemStack",               "LuaEquipment",               "LuaEquipmentGrid",               "LuaPlayer",               "LuaGuiElement",               "LuaInventory",               "LuaLogisticNetwork",               "LuaItemStack",               "defines.gui_type"             }           },           write_type={             complex_type="union",             full_format=false,             options={               "LuaEntity",               "LuaItemStack",               "LuaEquipment",               "LuaEquipmentGrid",               "LuaPlayer",               "LuaGuiElement",               "LuaInventory",               "LuaLogisticNetwork",               "LuaItemStack",               "defines.gui_type"             }           }         },         {           description="",           name="opened_gui_type",           optional=true,           order=39,           read_type="defines.gui_type"         },         {           description="Current item-picking state.",           name="picking_state",           optional=false,           order=16,           read_type="boolean",           write_type="boolean"         },         {           description="The current position of the entity.",           name="position",           optional=false,           order=2,           read_type="MapPosition"         },         {           description="The reach distance of this character or max uint when not a character or player connected to a character.",           name="reach_distance",           optional=false,           order=42,           read_type="uint"         },         {           description="Current repair state.",           name="repair_state",           optional=false,           order=17,           read_type={             complex_type="table",             parameters={               {                 description="The position being repaired",                 name="position",                 optional=false,                 order=1,                 type="MapPosition"               },               {                 description="The current state",                 name="repairing",                 optional=false,                 order=0,                 type="boolean"               }             }           },           write_type={             complex_type="table",             parameters={               {                 description="The position being repaired",                 name="position",                 optional=false,                 order=1,                 type="MapPosition"               },               {                 description="The current state",                 name="repairing",                 optional=false,                 order=0,                 type="boolean"               }             }           }         },         {           description="The resource reach distance of this character or max double when not a character or player connected to a character.",           name="resource_reach_distance",           optional=false,           order=45,           read_type="double"         },         {           description="Current riding state of this car, or of the car this player is riding in.",           name="riding_state",           optional=false,           order=13,           read_type="RidingState",           write_type="RidingState"         },         {           description="The currently selected entity. Assigning an entity will select it if is selectable, otherwise the selection is cleared.",           name="selected",           optional=true,           order=8,           raises={             {               description="Raised when a selectable entity is written to this attribute.",               name="on_selected_entity_changed",               optional=true,               order=0,               timeframe="instantly"             }           },           read_type="LuaEntity",           write_type="LuaEntity"         },         {           description="Current shooting state.",           name="shooting_state",           optional=false,           order=15,           read_type={             complex_type="table",             parameters={               {                 description="The position being shot at",                 name="position",                 optional=false,                 order=1,                 type="MapPosition"               },               {                 description="The current state",                 name="state",                 optional=false,                 order=0,                 type="defines.shooting"               }             }           },           write_type={             complex_type="table",             parameters={               {                 description="The position being shot at",                 name="position",                 optional=false,                 order=1,                 type="MapPosition"               },               {                 description="The current state",                 name="state",                 optional=false,                 order=0,                 type="defines.shooting"               }             }           }         },         {           description="The surface this entity is currently on.",           name="surface",           optional=false,           order=0,           read_type="LuaSurface"         },         {           description="Unique [index](runtime:LuaSurface::index) (ID) associated with the surface this entity is currently on.",           name="surface_index",           optional=false,           order=1,           read_type="uint"         },         {           description="The vehicle the player is currently sitting in.",           name="vehicle",           optional=true,           order=3,           read_type="LuaEntity"         },         {           description="Current walking state of the player, or the spider-vehicle the character is driving.",           examples={             "```\n-- Make the player go north. Note that a one-shot action like this will only make the player walk for one tick.\ngame.player.walking_state = {walking = true, direction = defines.direction.north}\n```"           },           name="walking_state",           optional=false,           order=12,           read_type={             complex_type="table",             parameters={               {                 description="Direction where the player is walking",                 name="direction",                 optional=false,                 order=1,                 type="defines.direction"               },               {                 description="If `false`, the player is currently not walking; otherwise it's going somewhere",                 name="walking",                 optional=false,                 order=0,                 type="boolean"               }             }           },           write_type={             complex_type="table",             parameters={               {                 description="Direction where the player is walking",                 name="direction",                 optional=false,                 order=1,                 type="defines.direction"               },               {                 description="If `false`, the player is currently not walking; otherwise it's going somewhere",                 name="walking",                 optional=false,                 order=0,                 type="boolean"               }             }           }         }       },       description="This is an abstract base class containing the common functionality between [LuaPlayer](runtime:LuaPlayer) and entities (see [LuaEntity](runtime:LuaEntity)). When accessing player-related functions through a [LuaEntity](runtime:LuaEntity), it must refer to a character entity.",       methods={         {           description="Begins crafting the given count of the given recipe.",           format={             table_optional=false,             takes_table=true           },           name="begin_crafting",           order=20,           parameters={             {               description="The count to craft.",               name="count",               optional=false,               order=0,               type="uint"             },             {               description="The recipe to craft.",               name="recipe",               optional=false,               order=1,               type="RecipeID"             },             {               description="If false and the recipe can't be crafted the requested number of times printing the failure is skipped.",               name="silent",               optional=true,               order=2,               type="boolean"             }           },           raises={             {               description="Raised if crafting was able to be started.",               name="on_player_main_inventory_changed",               optional=true,               order=1,               timeframe="current_tick"             },             {               description="Raised if crafting was able to be started.",               name="on_pre_player_crafted_item",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The count that was actually started crafting.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Can at least some items be inserted?",           format={             takes_table=false           },           name="can_insert",           order=4,           parameters={             {               description="Items that would be inserted.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="`true` if at least a part of the given items could be inserted into this inventory.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Can a given entity be opened or accessed?",           format={             takes_table=false           },           name="can_reach_entity",           order=10,           parameters={             {               description="",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancels crafting the given count of the given crafting queue index.",           format={             table_optional=false,             takes_table=true           },           name="cancel_crafting",           order=21,           parameters={             {               description="The count to cancel crafting.",               name="count",               optional=false,               order=1,               type="uint"             },             {               description="The crafting queue index.",               name="index",               optional=false,               order=0,               type="uint"             }           },           raises={             {               description="Raised if crafting was able to be cancelled.",               name="on_player_cancelled_crafting",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if crafting was able to be cancelled.",               name="on_player_main_inventory_changed",               optional=true,               order=1,               timeframe="current_tick"             }           },           return_values={}         },         {           description="Removes the arrow created by `set_gui_arrow`.",           format={             takes_table=false           },           name="clear_gui_arrow",           order=7,           parameters={},           return_values={}         },         {           description="Remove all items from this entity.",           format={             takes_table=false           },           name="clear_items_inside",           order=11,           parameters={},           return_values={}         },         {           description="Unselect any selected entity.",           format={             takes_table=false           },           name="clear_selected_entity",           order=15,           parameters={},           raises={             {               description="Raised if there is a currently selected entity.",               name="on_selected_entity_changed",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Closes the Factoriopedia GUI if it's open.",           format={             takes_table=false           },           name="close_factoriopedia_gui",           order=27,           parameters={},           return_values={}         },         {           description="Disable the flashlight.\n\nApplied per controller. Only supported by [defines.controllers.character](runtime:defines.controllers.character) and [defines.controllers.remote](runtime:defines.controllers.remote).",           format={             takes_table=false           },           name="disable_flashlight",           order=16,           parameters={},           return_values={}         },         {           description="Enable the flashlight.\n\nApplied per controller. Only supported by [defines.controllers.character](runtime:defines.controllers.character) and [defines.controllers.remote](runtime:defines.controllers.remote).",           format={             takes_table=false           },           name="enable_flashlight",           order=17,           parameters={},           return_values={}         },         {           description="Gets the count of the given recipe that can be crafted.",           format={             takes_table=false           },           name="get_craftable_count",           order=19,           parameters={             {               description="The recipe.",               name="recipe",               optional=false,               order=0,               type="RecipeID"             }           },           return_values={             {               description="The count that can be crafted.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary one, like the module slots or logistic trash slots.\n\nA given [defines.inventory](runtime:defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](runtime:defines.inventory) it's almost guaranteed to not be the inventory asked for.",           format={             takes_table=false           },           name="get_inventory",           order=0,           parameters={             {               description="",               name="inventory",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="The inventory or `nil` if none with the given index was found.",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Get name of inventory. Names match keys of [defines.inventory](runtime:defines.inventory).",           format={             takes_table=false           },           name="get_inventory_name",           order=1,           parameters={             {               description="",               name="inventory",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="string"             }           }         },         {           description="Get the number of all or some items in this entity.",           format={             takes_table=false           },           name="get_item_count",           order=8,           parameters={             {               description="The item to count. If not specified, count all items.",               name="item",               optional=true,               order=0,               type="ItemFilter"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Gets the main inventory for this character or player if this is a character or player.",           format={             takes_table=false           },           name="get_main_inventory",           order=3,           parameters={},           return_values={             {               description="The inventory or `nil` if this entity is not a character or player.",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="The highest index of all inventories this entity can use. Allows iteration over all of them if desired.",           examples={             "```\nfor k = 1, entity.get_max_inventory_index() do [...] end\n```"           },           format={             takes_table=false           },           name="get_max_inventory_index",           order=2,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="defines.inventory"             }           }         },         {           description="Gets the requester logistic point for this entity if it has one.",           format={             takes_table=false           },           name="get_requester_point",           order=30,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaLogisticPoint"             }           }         },         {           description="Does this entity have any item inside it?",           format={             takes_table=false           },           name="has_items_inside",           order=9,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\" inventory is chosen automatically.",           format={             takes_table=false           },           name="insert",           order=5,           parameters={             {               description="The items to insert.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="The number of items that were actually inserted.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Returns whether the player is holding a blueprint. This takes both blueprint items as well as blueprint records from the blueprint library into account.\n\nNote that both this method refers to the currently selected blueprint, which means that a blueprint book with a selected blueprint will return the information as well.",           format={             takes_table=false           },           name="is_cursor_blueprint",           order=28,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Returns whether the player is holding something in the cursor. Takes into account items from the blueprint library, as well as items and ghost cursor.",           format={             takes_table=false           },           name="is_cursor_empty",           order=29,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is the flashlight enabled for the current controller. Only supported by [defines.controllers.character](runtime:defines.controllers.character) and [defines.controllers.remote](runtime:defines.controllers.remote).",           format={             takes_table=false           },           name="is_flashlight_enabled",           order=18,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="When `true` control adapter is a LuaPlayer object, `false` for entities including characters with players.",           format={             takes_table=false           },           name="is_player",           order=24,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Mines the given entity as if this player (or character) mined it.",           format={             takes_table=false           },           name="mine_entity",           order=22,           parameters={             {               description="The entity to mine",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="Forces mining the entity even if the items can't fit in the player.",               name="force",               optional=true,               order=1,               type="boolean"             }           },           raises={             {               description="Raised if mining is successful.",               name="on_player_mined_entity",               optional=true,               order=1,               timeframe="instantly"             },             {               description="Raised if mining is successful.",               name="on_player_mined_item",               optional=true,               order=2,               timeframe="instantly"             },             {               description="Raised if mining is possible.",               name="on_pre_player_mined_item",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the mining succeeded.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Mines the given tile as if this player (or character) mined it.",           format={             takes_table=false           },           name="mine_tile",           order=23,           parameters={             {               description="The tile to mine.",               name="tile",               optional=false,               order=0,               type="LuaTile"             }           },           raises={             {               description="Raised if mining is successful.",               name="on_player_mined_item",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if mining is successful.",               name="on_player_mined_tile",               optional=true,               order=1,               timeframe="instantly"             }           },           return_values={             {               description="Whether the mining succeeded.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Open the Factoriopedia GUI and select a given entry, if any valid ID is given.",           format={             takes_table=false           },           name="open_factoriopedia_gui",           order=26,           parameters={             {               description="",               name="prototype",               optional=true,               order=0,               type="FactoriopediaID"             }           },           return_values={}         },         {           description="Open the technology GUI and select a given technology.",           format={             takes_table=false           },           name="open_technology_gui",           order=25,           parameters={             {               description="The technology to select after opening the GUI.",               name="technology",               optional=true,               order=0,               type="TechnologyID"             }           },           return_values={}         },         {           description="Remove items from this entity.",           format={             takes_table=false           },           name="remove_item",           order=12,           parameters={             {               description="The items to remove.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="The number of items that were actually removed.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Sets if this character or player is driving. Returns if the player or character is still driving.",           format={             takes_table=false           },           name="set_driving",           order=31,           parameters={             {               description="True for enter-vehicle, false for leave.",               name="driving",               optional=false,               order=0,               type="boolean"             },             {               description="If true, the player will be ejected and left at the position of the car if normal \"leave\" is not possible.",               name="force",               optional=true,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="Create an arrow which points at this entity. This is used in the tutorial. For examples, see `control.lua` in the campaign missions.",           format={             table_optional=false,             takes_table=true           },           name="set_gui_arrow",           order=6,           parameters={             {               description="",               name="margin",               optional=false,               order=0,               type="uint"             },             {               description="Where to point to. This field determines what other fields are mandatory.",               name="type",               optional=false,               order=1,               type="GuiArrowType"             }           },           return_values={},           variant_parameter_description="Other attributes may be specified depending on `type`:",           variant_parameter_groups={             {               description="",               name="crafting_queue",               order=2,               parameters={                 {                   description="Index in the crafting queue to point to.",                   name="crafting_queueindex",                   optional=false,                   order=0,                   type="uint"                 }               }             },             {               description="",               name="entity",               order=0,               parameters={                 {                   description="",                   name="entity",                   optional=false,                   order=0,                   type="LuaEntity"                 }               }             },             {               description="",               name="item_stack",               order=3,               parameters={                 {                   description="Which inventory the stack is in.",                   name="inventory_index",                   optional=false,                   order=0,                   type="defines.inventory"                 },                 {                   description="Which stack to point to.",                   name="item_stack_index",                   optional=false,                   order=1,                   type="uint"                 },                 {                   description="",                   name="source",                   optional=false,                   order=2,                   type={                     complex_type="union",                     full_format=false,                     options={                       {                         complex_type="literal",                         value="player"                       },                       {                         complex_type="literal",                         value="target"                       },                       {                         complex_type="literal",                         value="player-quickbar"                       }                     }                   }                 }               }             },             {               description="",               name="position",               order=1,               parameters={                 {                   description="",                   name="position",                   optional=false,                   order=0,                   type="MapPosition"                 }               }             }           }         },         {           description="Teleport the entity to a given position, possibly on another surface.\n\nSome entities may not be teleported. For instance, transport belts won't allow teleportation and this method will always return `false` when used on any such entity.\n\nYou can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinates `'teleport(0, 1)'` to move the entity 1 tile positive y. `'teleport(4)'` to move the entity 4 tiles to the positive x.\n\n`script_raised_teleported` will not be raised if teleporting a player with no character.",           format={             takes_table=false           },           name="teleport",           order=13,           parameters={             {               description="The build check type done when teleporting to the destination. Defaults to `script`. This is ignored when teleporting between surfaces.",               name="build_check_type",               optional=true,               order=4,               type="defines.build_check_type"             },             {               description="Where to teleport to.",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="If true, [defines.events.script_raised_teleported](runtime:defines.events.script_raised_teleported) will be fired on successful entity teleportation.",               name="raise_teleported",               optional=true,               order=2,               type="boolean"             },             {               description="If false the exact position given is used to instead of snapping to the normal entity grid. This only applies if the entity normally snaps to the grid.",               name="snap_to_grid",               optional=true,               order=3,               type="boolean"             },             {               description="Surface to teleport to. If not given, will teleport to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.",               name="surface",               optional=true,               order=1,               type="SurfaceIdentification"             }           },           raises={             {               description="Raised if the teleported entity is a player character.",               name="on_player_changed_position",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if the `raise_teleported` flag was set and the entity was successfully teleported.",               name="script_raised_teleported",               optional=true,               order=1,               timeframe="instantly"             }           },           return_values={             {               description="`true` if the entity was successfully teleported.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Select an entity, as if by hovering the mouse above it.",           format={             takes_table=false           },           name="update_selected_entity",           order=14,           parameters={             {               description="Position of the entity to select.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           raises={             {               description="Raised if there is an entity at the given position to select.",               name="on_selected_entity_changed",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         }       },       name="LuaControl",       operators={},       order=27     },     {       abstract=true,       attributes={         {           description="The entity this control behavior belongs to.",           name="entity",           optional=false,           order=1,           read_type="LuaEntity"         },         {           description="The concrete type of this control behavior.",           name="type",           optional=false,           order=0,           read_type="defines.control_behavior.type"         }       },       description="The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit.\n\nAn control reference becomes invalid once the control behavior is removed or the entity (see [LuaEntity](runtime:LuaEntity)) it resides in is destroyed.",       methods={         {           description="",           format={             takes_table=false           },           name="get_circuit_network",           order=0,           parameters={             {               description="Wire connector to get circuit network for.",               name="wire_connector_id",               optional=false,               order=0,               type="defines.wire_connector_id"             }           },           return_values={             {               description="The circuit network or nil.",               optional=true,               order=0,               type="LuaCircuitNetwork"             }           }         }       },       name="LuaControlBehavior",       operators={},       order=28     },     {       abstract=false,       attributes={         {           description="The force this tag belongs to.",           name="force",           optional=false,           order=5,           read_type="LuaForce"         },         {           description="This tag's icon, if it has one. Writing `nil` removes it.",           name="icon",           optional=false,           order=0,           read_type="SignalID",           write_type="SignalID"         },         {           description="The player who last edited this tag.",           name="last_user",           optional=true,           order=1,           read_type="LuaPlayer",           write_type="LuaPlayer"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="The position of this tag.",           name="position",           optional=false,           order=2,           read_type="MapPosition"         },         {           description="The surface this tag belongs to.",           name="surface",           optional=false,           order=6,           read_type="LuaSurface"         },         {           description="The unique ID for this tag on this force.",           name="tag_number",           optional=false,           order=4,           read_type="uint"         },         {           description="",           name="text",           optional=false,           order=3,           read_type="string",           write_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="A custom tag that shows on the map view.",       methods={         {           description="Destroys this tag.",           format={             takes_table=false           },           name="destroy",           order=0,           parameters={},           return_values={}         }       },       name="LuaCustomChartTag",       operators={},       order=29     },     {       abstract=false,       attributes={         {           description="Event identifier associated with this custom event.",           name="event_id",           optional=false,           order=0,           read_type="defines.events"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Prototype of a custom event.",       methods={},       name="LuaCustomEventPrototype",       operators={},       order=30,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The action that happens when this custom input is triggered.",           name="action",           optional=false,           order=7,           read_type="string"         },         {           description="The default alternative key sequence for this custom input, if any",           name="alternative_key_sequence",           optional=true,           order=2,           read_type="string"         },         {           description="The consuming type.",           name="consuming",           optional=false,           order=6,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="game-only"               }             }           }         },         {           description="The default controller alternative key sequence for this custom input, if any",           name="controller_alternative_key_sequence",           optional=true,           order=4,           read_type="string"         },         {           description="The default controller key sequence for this custom input, if any",           name="controller_key_sequence",           optional=true,           order=3,           read_type="string"         },         {           description="Whether this custom input is enabled. Disabled custom inputs exist but are not used by the game.",           name="enabled",           optional=false,           order=8,           read_type="boolean"         },         {           description="Whether this custom input is enabled while using the cutscene controller.",           name="enabled_while_in_cutscene",           optional=false,           order=10,           read_type="boolean"         },         {           description="Whether this custom input is enabled while using the spectator controller.",           name="enabled_while_spectating",           optional=false,           order=9,           read_type="boolean"         },         {           description="Event identifier associated with this custom input.",           name="event_id",           optional=false,           order=0,           read_type="defines.events"         },         {           description="Whether this custom input will include the selected prototype (if any) when triggered.",           name="include_selected_prototype",           optional=false,           order=11,           read_type="boolean"         },         {           description="The item that gets spawned when this custom input is fired, if any.",           name="item_to_spawn",           optional=true,           order=12,           read_type="LuaItemPrototype"         },         {           description="The default key sequence for this custom input.",           name="key_sequence",           optional=false,           order=1,           read_type="string"         },         {           description="The linked game control name, if any.",           name="linked_game_control",           optional=true,           order=5,           read_type="LinkedGameControl"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=14,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=13,           read_type="boolean"         }       },       description="Prototype of a custom input.",       methods={},       name="LuaCustomInputPrototype",       operators={},       order=31,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Lazily evaluated table. For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their unnecessary construction in some cases.\n\nThere are some notable consequences to the usage of a custom table type rather than the native Lua table type: Iterating a custom table is only possible using the `pairs` Lua function; `ipairs` won't work. Another key difference is that custom tables cannot be serialised into a game save file -- if saving the game would require serialisation of a custom table, an error will be displayed and the game will not be saved.\n\nIn previous versions of Factorio, this would create a [LuaPlayer](runtime:LuaPlayer) instance for every player in the game, even though only one such wrapper is needed. In the current version, accessing [game.players](runtime:LuaGameScript::players) by itself does not create any [LuaPlayer](runtime:LuaPlayer) instances; they are created lazily when accessed. Therefore, this example only constructs one [LuaPlayer](runtime:LuaPlayer) instance, no matter how many elements there are in `game.players`.\n\n```\ngame.players[\"Oxyd\"].character.die()\n```\n\nThis statement will execute successfully and `storage.p` will be useable as one might expect. However, as soon as the user tries to save the game, a \"LuaCustomTable cannot be serialized\" error will be shown. The game will remain unsaveable so long as `storage.p` refers to an instance of a custom table.\n\n```\nstorage.p = game.players  -- This has high potential to make the game unsaveable\n```\n\nThe following will produce no output because `ipairs` is not supported with custom tables.\n\n```\nfor _, p in ipairs(game.players) do game.player.print(p.name); end  -- incorrect; use pairs instead\n```",       examples={         "```\n-- Custom tables may be iterated using `pairs`.\nfor _, p in pairs(game.players) do game.player.print(p.name); end\n```"       },       methods={},       name="LuaCustomTable",       operators={         {           description="Access an element of this custom table.",           name="index",           optional=false,           order=0,           read_type="Any"         },         {           description="Number of elements in this table.",           name="length",           optional=false,           order=1,           read_type="uint"         }       },       order=32     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a damage.",       methods={},       name="LuaDamagePrototype",       operators={},       order=33,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="This decider combinator's parameters. Writing `nil` clears the combinator's parameters.",           name="parameters",           optional=false,           order=0,           read_type="DeciderCombinatorParameters",           write_type="DeciderCombinatorParameters"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for decider combinators.",       methods={         {           description="Adds a new condition.",           format={             takes_table=false           },           name="add_condition",           order=2,           parameters={             {               description="New condition to insert.",               name="condition",               optional=false,               order=0,               type="DeciderCombinatorCondition"             },             {               description="Index to insert new condition at. If not specified, appends to the end.",               name="index",               optional=true,               order=1,               type="uint"             }           },           return_values={}         },         {           description="Adds a new output.",           format={             takes_table=false           },           name="add_output",           order=6,           parameters={             {               description="Index to insert new output at. If not specified, appends to the end.",               name="index",               optional=true,               order=1,               type="uint"             },             {               description="New output to insert.",               name="output",               optional=false,               order=0,               type="DeciderCombinatorOutput"             }           },           return_values={}         },         {           description="Gets the condition at `index`.",           format={             takes_table=false           },           name="get_condition",           order=0,           parameters={             {               description="Index of condition to get.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="DeciderCombinatorCondition"             }           }         },         {           description="Gets the output at `index`.",           format={             takes_table=false           },           name="get_output",           order=4,           parameters={             {               description="Index of output to get.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="DeciderCombinatorOutput"             }           }         },         {           description="Removes the condition at `index`.",           format={             takes_table=false           },           name="remove_condition",           order=3,           parameters={             {               description="Index of condition to remove.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes the output at `index`.",           format={             takes_table=false           },           name="remove_output",           order=7,           parameters={             {               description="Index of output to remove.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the condition at `index`.",           format={             takes_table=false           },           name="set_condition",           order=1,           parameters={             {               description="Data to set selected condition to.",               name="condition",               optional=false,               order=1,               type="DeciderCombinatorCondition"             },             {               description="Index of condition to modify.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the output at `index`.",           format={             takes_table=false           },           name="set_output",           order=5,           parameters={             {               description="Index of output to modify.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="Data to set selected output to.",               name="output",               optional=false,               order=1,               type="DeciderCombinatorOutput"             }           },           return_values={}         }       },       name="LuaDeciderCombinatorControlBehavior",       operators={},       order=34,       parent="LuaCombinatorControlBehavior"     },     {       abstract=false,       attributes={         {           description="Autoplace specification for this decorative prototype, if any.",           name="autoplace_specification",           optional=true,           order=2,           read_type="AutoplaceSpecification"         },         {           description="The bounding box used for collision checking.",           name="collision_box",           optional=false,           order=0,           read_type="BoundingBox"         },         {           description="The collision masks this decorative uses",           name="collision_mask",           optional=false,           order=1,           read_type="CollisionMask"         },         {           description="",           name="decal",           optional=false,           order=4,           read_type="boolean"         },         {           description="",           name="grows_through_rail_path",           optional=false,           order=5,           read_type="boolean"         },         {           description="",           name="minimal_separation",           optional=false,           order=8,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=11,           read_type="string"         },         {           description="",           name="placed_effect",           optional=true,           order=7,           read_type={             complex_type="array",             value="TriggerEffectItem"           }         },         {           description="",           name="render_layer",           optional=false,           order=3,           read_type="string"         },         {           description="",           name="target_count",           optional=false,           order=9,           read_type="uint"         },         {           description="",           name="trigger_effect",           optional=true,           order=6,           read_type={             complex_type="array",             value="TriggerEffectItem"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=10,           read_type="boolean"         }       },       description="Prototype of an optimized decorative.",       methods={},       name="LuaDecorativePrototype",       operators={},       order=35,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The full list of configured messages.",           name="messages",           optional=false,           order=0,           read_type={             complex_type="array",             value="DisplayPanelMessageDefinition"           },           write_type={             complex_type="array",             value="DisplayPanelMessageDefinition"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for display panels.",       methods={         {           description="Get a specific message definition",           format={             takes_table=false           },           name="get_message",           order=0,           parameters={             {               description="Message index.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The message definition at the specified index.",               optional=false,               order=0,               type="DisplayPanelMessageDefinition"             }           }         },         {           description="Set the message at the specified index",           format={             takes_table=false           },           name="set_message",           order=1,           parameters={             {               description="Message index. Use `-1` to append new element.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The message definition for the specified index. Specify `nil` to remove the message.",               name="message",               optional=false,               order=1,               type="DisplayPanelMessageDefinition"             }           },           return_values={}         }       },       name="LuaDisplayPanelControlBehavior",       operators={},       order=36,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="buffer_capacity",           optional=false,           order=0,           read_type="double"         },         {           description="",           name="drain",           optional=false,           order=2,           read_type="double"         },         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",           name="emissions_per_joule",           optional=false,           order=3,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=7,           read_type="string"         },         {           description="",           name="render_no_network_icon",           optional=false,           order=4,           read_type="boolean"         },         {           description="",           name="render_no_power_icon",           optional=false,           order=5,           read_type="boolean"         },         {           description="",           name="usage_priority",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=6,           read_type="boolean"         }       },       description="Prototype of an electric energy source.",       methods={         {           description="",           format={             takes_table=false           },           name="get_input_flow_limit",           order=0,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_output_flow_limit",           order=1,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         }       },       name="LuaElectricEnergySourcePrototype",       operators={},       order=37     },     {       abstract=false,       attributes={         {           description="",           name="absorbed_pollution",           optional=false,           order=116,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="Deactivating an entity will stop all its operations (car will stop moving, inserters will stop working, fish will stop moving etc).\n\nEntities that are not active naturally can't be set to be active (setting it to be active will do nothing)\n\nGhosts, simple smoke, and corpses can't be modified at this time.\n\nIt is even possible to set the character to not be active, so he can't move and perform most of the tasks.",           name="active",           optional=false,           order=9,           read_type="boolean",           write_type="boolean"         },         {           description="The ai settings of this unit.",           name="ai_settings",           optional=false,           order=146,           read_type="LuaAISettings",           subclasses={             "Unit",             "SpiderUnit"           }         },         {           description="",           name="alert_parameters",           optional=false,           order=110,           read_type="ProgrammableSpeakerAlertParameters",           subclasses={             "ProgrammableSpeaker"           },           write_type="ProgrammableSpeakerAlertParameters"         },         {           description="Whether this character's personal roboports are allowed to dispatch robots.",           name="allow_dispatching_robots",           optional=false,           order=157,           read_type="boolean",           subclasses={             "Character"           },           write_type="boolean"         },         {           description="If the lamp is always on when not driven by control behavior.",           name="always_on",           optional=false,           order=200,           read_type="boolean",           subclasses={             "Lamp"           },           write_type="boolean"         },         {           description="Count of resource units contained.",           name="amount",           optional=false,           order=24,           read_type="uint",           subclasses={             "ResourceEntity"           },           write_type="uint"         },         {           description="Whether this land mine is armed.",           name="armed",           optional=false,           order=139,           read_type="boolean",           subclasses={             "LandMine"           }         },         {           description="If this artillery auto-targets enemies.",           name="artillery_auto_targeting",           optional=false,           order=201,           read_type="boolean",           subclasses={             "ArtilleryWagon",             "ArtilleryTurret"           },           write_type="boolean"         },         {           description="The player this character is associated with, if any. Set to `nil` to clear.\n\nThe player will be automatically disassociated when a controller is set on the character. Also, all characters associated to a player will be logged off when the player logs off in multiplayer.\n\nA character associated with a player is not directly controlled by any player.",           name="associated_player",           optional=true,           order=128,           read_type="LuaPlayer",           subclasses={             "Character"           },           write_type="PlayerIdentification"         },         {           description="The cargo pod attached to this rocket silo rocket if any.",           name="attached_cargo_pod",           optional=true,           order=214,           read_type="LuaEntity",           subclasses={             "RocketSiloRocket"           }         },         {           description="Destination of this spidertron's autopilot, if any. Writing `nil` clears all destinations.",           name="autopilot_destination",           optional=true,           order=165,           read_type="MapPosition",           subclasses={             "SpiderVehicle"           },           write_type="MapPosition"         },         {           description="The queued destination positions of spidertron's autopilot.",           name="autopilot_destinations",           optional=false,           order=166,           read_type={             complex_type="array",             value="MapPosition"           },           subclasses={             "SpiderVehicle"           }         },         {           description="The backer name assigned to this entity. Entities that support backer names are labs, locomotives, radars, roboports, and train stops. `nil` if this entity doesn't support backer names.\n\nWhile train stops get the name of a backer when placed down, players can rename them if they want to. In this case, `backer_name` returns the player-given name of the entity.",           name="backer_name",           optional=true,           order=50,           raises={             {               description="",               name="on_entity_renamed",               optional=false,               order=0,               timeframe="instantly"             }           },           read_type="string",           write_type="string"         },         {           description="",           name="base_damage_modifiers",           optional=false,           order=217,           read_type="TriggerModifierData",           subclasses={             "Projectile"           },           write_type="TriggerModifierData"         },         {           description="Number of beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)",           name="beacons_count",           optional=true,           order=122,           read_type="uint"         },         {           description="The belt connectable neighbours of this belt connectable entity. Only entities that input to or are outputs of this entity. Does not contain the other end of an underground belt, see [LuaEntity::neighbours](runtime:LuaEntity::neighbours) for that.",           name="belt_neighbours",           optional=false,           order=48,           read_type={             complex_type="table",             parameters={               {                 description="Array of transport belt connectable entities.",                 name="inputs",                 optional=false,                 order=0,                 type={                   complex_type="array",                   value="LuaEntity"                 }               },               {                 description="Array of transport belt connectable entities.",                 name="outputs",                 optional=false,                 order=1,                 type={                   complex_type="array",                   value="LuaEntity"                 }               }             }           },           subclasses={             "TransportBeltConnectable"           }         },         {           description="Gives what is the current shape of a transport-belt.\n\nCan also be used on entity ghost if it contains transport-belt.",           name="belt_shape",           optional=false,           order=195,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="straight"               },               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="right"               }             }           },           subclasses={             "TransportBelt"           }         },         {           description="Whether this underground belt goes into or out of the ground.",           name="belt_to_ground_type",           optional=false,           order=65,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="output"               }             }           },           subclasses={             "UndergroundBelt"           }         },         {           description="",           name="bonus_damage_modifiers",           optional=false,           order=218,           read_type="TriggerModifierData",           subclasses={             "Projectile"           },           write_type="TriggerModifierData"         },         {           description="The bonus mining progress for this mining drill. Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_time]. `nil` if this isn't a mining drill.",           name="bonus_mining_progress",           optional=true,           order=85,           read_type="double",           write_type="double"         },         {           description="The current productivity bonus progress, as a number in range `[0, 1]`.",           name="bonus_progress",           optional=false,           order=59,           read_type="double",           subclasses={             "CraftingMachine"           },           write_type="double"         },         {           description="[LuaEntityPrototype::collision_box](runtime:LuaEntityPrototype::collision_box) around entity's given position and respecting the current entity orientation.",           name="bounding_box",           optional=false,           order=88,           read_type="BoundingBox"         },         {           description="The burner energy source for this entity, if any.",           name="burner",           optional=true,           order=103,           read_type="LuaBurner"         },         {           description="The space platform hub or cargo landing pad this cargo bay is connected to if any.",           name="cargo_bay_connection_owner",           optional=true,           order=219,           read_type="LuaEntity",           subclasses={             "CargoBay"           }         },         {           description="The cargo hatches owned by this entity if any.",           name="cargo_hatches",           optional=false,           order=210,           read_type={             complex_type="array",             value="LuaCargoHatch"           }         },         {           description="The destination of this cargo pod entity.\n\nUse [force_finish_ascending](runtime:LuaEntity::force_finish_ascending) if you want it to only descend from orbit.",           name="cargo_pod_destination",           optional=false,           order=212,           read_type="CargoDestination",           subclasses={             "CargoPod"           },           write_type="CargoDestination"         },         {           description="The origin of this cargo pod entity. (Must be a silo, hub or pad)",           name="cargo_pod_origin",           optional=true,           order=213,           read_type="LuaEntity",           subclasses={             "CargoPod"           },           write_type="LuaEntity"         },         {           description="The state of this cargo pod entity.",           name="cargo_pod_state",           optional=false,           order=211,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="awaiting_launch"               },               {                 complex_type="literal",                 value="ascending"               },               {                 complex_type="literal",                 value="surface_transition"               },               {                 complex_type="literal",                 value="descending"               },               {                 complex_type="literal",                 value="parking"               }             }           },           subclasses={             "CargoPod"           }         },         {           description="The state of this chain signal.",           name="chain_signal_state",           optional=false,           order=55,           read_type="defines.chain_signal_state",           subclasses={             "RailChainSignal"           }         },         {           description="The reason this character corpse character died. `\"\"` if there is no reason.",           name="character_corpse_death_cause",           optional=false,           order=127,           read_type="LocalisedString",           subclasses={             "CharacterCorpse"           },           write_type="LocalisedString"         },         {           description="The player index associated with this character corpse.\n\nThe index is not guaranteed to be valid so it should always be checked first if a player with that index actually exists.",           name="character_corpse_player_index",           optional=false,           order=125,           read_type="uint",           subclasses={             "CharacterCorpse"           },           write_type="uint"         },         {           description="The tick this character corpse died at.",           name="character_corpse_tick_of_death",           optional=false,           order=126,           read_type="uint",           subclasses={             "CharacterCorpse"           },           write_type="uint"         },         {           description="The orientation of this cliff.",           name="cliff_orientation",           optional=false,           order=21,           read_type="CliffOrientation",           subclasses={             "Cliff"           }         },         {           description="The color of this character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner. `nil` if this entity doesn't use custom colors.\n\nCar color is overridden by the color of the current driver/passenger, if there is one.",           name="color",           optional=true,           order=53,           read_type="Color",           write_type="Color"         },         {           description="The owner of this combat robot, if any.",           name="combat_robot_owner",           optional=true,           order=172,           read_type="LuaEntity",           subclasses={             "CombatRobot"           },           write_type="LuaEntity"         },         {           description="The description on this combinator.",           name="combinator_description",           optional=false,           order=120,           read_type="string",           subclasses={             "ArithmeticCombinator",             "DeciderCombinator",             "SelectorCombinator",             "ConstantCombinator"           },           write_type="string"         },         {           description="Returns a LuaCommandable for this entity or nil if entity is not commandable.",           name="commandable",           optional=true,           order=197,           read_type="LuaCommandable"         },         {           description="The rail entity this train stop is connected to, if any.",           name="connected_rail",           optional=true,           order=141,           read_type="LuaEntity",           subclasses={             "TrainStop"           }         },         {           description="Rail direction to which this train stop is binding. This returns a value even when no rails are present.",           name="connected_rail_direction",           optional=false,           order=142,           read_type="defines.rail_direction",           subclasses={             "TrainStop"           }         },         {           description="The consumption bonus of this entity.",           name="consumption_bonus",           optional=false,           order=64,           read_type="double"         },         {           description="Multiplies the energy consumption.",           name="consumption_modifier",           optional=false,           order=27,           read_type="float",           subclasses={             "Car"           },           write_type="float"         },         {           description="If this rolling stock has 'copy color from train stop' enabled.",           name="copy_color_from_train_stop",           optional=false,           order=191,           read_type="boolean",           subclasses={             "RollingStock"           },           write_type="boolean"         },         {           description="Whether this corpse will ever fade away.",           name="corpse_expires",           optional=false,           order=161,           read_type="boolean",           subclasses={             "Corpse"           },           write_type="boolean"         },         {           description="If true, corpse won't be destroyed when entities are placed over it. If false, whether corpse will be removed or not depends on value of [CorpsePrototype::remove_on_entity_placement](prototype:CorpsePrototype::remove_on_entity_placement).",           name="corpse_immune_to_entity_placement",           optional=false,           order=162,           read_type="boolean",           subclasses={             "Corpse"           },           write_type="boolean"         },         {           description="The current crafting progress, as a number in range `[0, 1]`.",           name="crafting_progress",           optional=false,           order=58,           read_type="float",           subclasses={             "CraftingMachine"           },           write_type="float"         },         {           description="The current crafting speed, including speed bonuses from modules and beacons.",           name="crafting_speed",           optional=false,           order=57,           read_type="double",           subclasses={             "CraftingMachine",             "Character"           }         },         {           description="Destination of the crane of this entity. Throws when trying to set the destination out of range.",           name="crane_destination",           optional=false,           order=186,           read_type="MapPosition",           subclasses={             "AgriculturalTower"           },           write_type="MapPosition"         },         {           description="Destination of the crane of this entity in 3D. Throws when trying to set the destination out of range.",           name="crane_destination_3d",           optional=false,           order=187,           read_type="Vector3D",           subclasses={             "AgriculturalTower"           },           write_type="Vector3D"         },         {           description="Returns current position in 3D for the end of the crane of this entity.",           name="crane_end_position_3d",           optional=false,           order=185,           read_type="Vector3D",           subclasses={             "AgriculturalTower"           }         },         {           description="Will set destination for the grappler of crane of this entity. The crane grappler will start moving to reach the destination, but the rest of the arm will remain stationary. Throws when trying to set the destination out of range.",           name="crane_grappler_destination",           optional=false,           order=188,           subclasses={             "AgriculturalTower"           },           write_type="MapPosition"         },         {           description="Will set destination in 3D for the grappler of crane of this entity. The crane grappler will start moving to reach the destination, but the rest of the arm will remain stationary. Throws when trying to set the destination out of range.",           name="crane_grappler_destination_3d",           optional=false,           order=189,           subclasses={             "AgriculturalTower"           },           write_type="Vector3D"         },         {           description="A custom status for this entity that will be displayed in the GUI.",           name="custom_status",           optional=true,           order=150,           read_type="CustomEntityStatus",           write_type="CustomEntityStatus"         },         {           description="The damage dealt by this turret, artillery turret, or artillery wagon.",           name="damage_dealt",           optional=false,           order=75,           read_type="double",           subclasses={             "Turret"           },           write_type="double"         },         {           description="If set to `false`, this entity can't be damaged and won't be attacked automatically. It can however still be mined.\n\nEntities that are indestructible naturally (they have no health, like smoke, resource etc) can't be set to be destructible.",           name="destructible",           optional=false,           order=10,           read_type="boolean",           write_type="boolean"         },         {           description="The current direction this entity is facing.",           name="direction",           optional=false,           order=17,           read_type="defines.direction",           write_type="defines.direction"         },         {           description="If the updatable entity is disabled by control behavior.",           name="disabled_by_control_behavior",           optional=false,           order=206,           read_type="boolean",           subclasses={             "UpdatableEntity"           }         },         {           description="If the updatable entity is disabled by recipe.",           name="disabled_by_recipe",           optional=false,           order=207,           read_type="boolean",           subclasses={             "UpdatableEntity"           }         },         {           description="If the updatable entity is disabled by script.\n\nNote: Some entities (Corpse, FireFlame, Roboport, RollingStock, dying entities) need to remain active and will ignore writes.",           name="disabled_by_script",           optional=false,           order=205,           read_type="boolean",           subclasses={             "UpdatableEntity"           },           write_type="boolean"         },         {           description="",           name="display_panel_always_show",           optional=false,           order=226,           read_type="boolean",           subclasses={             "DisplayPanel"           },           write_type="boolean"         },         {           description="Icon visible on the display panel. Can be written only when it is not set by control behavior.",           name="display_panel_icon",           optional=false,           order=225,           read_type="SignalID",           subclasses={             "DisplayPanel"           },           write_type="SignalID"         },         {           description="",           name="display_panel_show_in_chart",           optional=false,           order=227,           read_type="boolean",           subclasses={             "DisplayPanel"           },           write_type="boolean"         },         {           description="Text visible on the display panel. Can be written only when it is not set by control behavior.",           name="display_panel_text",           optional=false,           order=224,           read_type="LocalisedString",           subclasses={             "DisplayPanel"           },           write_type="LocalisedString"         },         {           description="Gives a draw data of the given entity if it supports such data.",           name="draw_data",           optional=false,           order=193,           read_type="RollingStockDrawData",           subclasses={             "RollingStock"           }         },         {           description="Whether the driver of this car or spidertron is the gunner. If `false`, the passenger is the gunner. `nil` if this is neither a car or a spidertron.",           name="driver_is_gunner",           optional=true,           order=29,           read_type="boolean",           subclasses={             "Car",             "SpiderVehicle"           },           write_type="boolean"         },         {           description="Position where the entity puts its stuff.\n\nMining drills and crafting machines can't have their drop position changed; inserters must have `allow_custom_vectors` set to true on their prototype to allow changing the drop position.\n\nMeaningful only for entities that put stuff somewhere, such as mining drills, crafting machines with a drop target or inserters.",           name="drop_position",           optional=false,           order=36,           read_type="MapPosition",           write_type="MapPosition"         },         {           description="The entity this entity is putting its items to. If there are multiple possible entities at the drop-off point, writing to this attribute allows a mod to choose which one to drop off items to. The entity needs to collide with the tile box under the drop-off position. `nil` if there is no entity to put items to, or if this is not an entity that puts items somewhere.",           name="drop_target",           optional=true,           order=38,           read_type="LuaEntity",           write_type="LuaEntity"         },         {           description="The current speed of this unit in tiles per tick, taking into account any walking speed modifier given by the tile the unit is standing on. `nil` if this is not a unit.",           name="effective_speed",           optional=true,           order=32,           read_type="float",           subclasses={             "Unit"           }         },         {           description="Multiplies the acceleration the vehicle can create for one unit of energy. Defaults to `1`.",           name="effectivity_modifier",           optional=false,           order=26,           read_type="float",           subclasses={             "Car"           },           write_type="float"         },         {           description="The effects being applied to this entity, if any. For beacons, this is the effect the beacon is broadcasting.",           name="effects",           optional=true,           order=121,           read_type="ModuleEffects"         },         {           description="The buffer size for the electric energy source. `nil` if the entity doesn't have an electric energy source.\n\nWrite access is limited to the ElectricEnergyInterface type.",           name="electric_buffer_size",           optional=true,           order=79,           read_type="double",           write_type="double"         },         {           description="The electric drain for the electric energy source. `nil` if the entity doesn't have an electric energy source.",           name="electric_drain",           optional=true,           order=80,           read_type="double"         },         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. `nil` if the entity doesn't have an electric energy source. Multiplying values in the returned table by energy consumption in `Watt` gives `pollution/second`.",           name="electric_emissions_per_joule",           optional=true,           order=81,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="Returns the id of the electric network that this entity is connected to, if any.",           name="electric_network_id",           optional=true,           order=156,           read_type="uint"         },         {           description="The electric network statistics for this electric pole.",           name="electric_network_statistics",           optional=false,           order=111,           read_type="LuaFlowStatistics",           subclasses={             "ElectricPole"           }         },         {           description="Whether equipment grid logistics are enabled while this vehicle is moving.",           name="enable_logistics_while_moving",           optional=false,           order=151,           read_type="boolean",           subclasses={             "Vehicle"           },           write_type="boolean"         },         {           description="Energy stored in the entity's energy buffer (energy stored in electrical devices etc.). Always 0 for entities that don't have the concept of energy stored inside.",           examples={             "```\ngame.player.print(\"Machine energy: \" .. game.player.selected.energy .. \"J\")\ngame.player.selected.energy = 3000\n```"           },           name="energy",           optional=false,           order=41,           read_type="double",           write_type="double"         },         {           description="How much energy this generator generated in the last tick.",           name="energy_generated_last_tick",           optional=false,           order=158,           read_type="double",           subclasses={             "Generator"           }         },         {           description="The label on this spider-vehicle entity, if any. `nil` if this is not a spider-vehicle.",           name="entity_label",           optional=true,           order=51,           raises={             {               description="",               name="on_entity_renamed",               optional=false,               order=0,               timeframe="instantly"             }           },           read_type="string",           write_type="string"         },         {           description="The number of filter slots this inserter, loader, mining drill, asteroid collector or logistic storage container has. 0 if not one of those entities.",           name="filter_slot_count",           optional=false,           order=93,           read_type="uint"         },         {           description="Fluidboxes of this entity.",           name="fluidbox",           optional=false,           order=49,           read_type="LuaFluidBox"         },         {           description="Returns count of fluid storages. This includes fluid storages provided by FluidBoxes but also covers other fluid storages like FluidTurret's internal buffer and FluidWagon's fluid since they are not FluidBox and cannot be exposed through [LuaFluidBox](runtime:LuaFluidBox).",           name="fluids_count",           optional=false,           order=198,           read_type="uint"         },         {           description="The follow offset of this spidertron, if any entity is being followed. This is randomized each time the follow entity is set.",           name="follow_offset",           optional=true,           order=175,           read_type="Vector",           subclasses={             "SpiderVehicle"           },           write_type="Vector"         },         {           description="The follow target of this spidertron, if any.",           name="follow_target",           optional=true,           order=174,           read_type="LuaEntity",           subclasses={             "SpiderVehicle"           },           write_type="LuaEntity"         },         {           description="Multiplies the car friction rate.",           examples={             "```\n-- This will allow the car to go much faster\ngame.player.vehicle.friction_modifier = 0.5\n```"           },           name="friction_modifier",           optional=false,           order=28,           read_type="float",           subclasses={             "Car"           },           write_type="float"         },         {           description="If the freezable entity is currently frozen.",           name="frozen",           optional=false,           order=209,           read_type="boolean",           subclasses={             "FreezableEntity"           }         },         {           description="",           name="ghost_localised_description",           optional=false,           order=5,           read_type="LocalisedString",           subclasses={             "Ghost"           }         },         {           description="Localised name of the entity or tile contained in this ghost.",           name="ghost_localised_name",           optional=false,           order=4,           read_type="LocalisedString",           subclasses={             "Ghost"           }         },         {           description="Name of the entity or tile contained in this ghost",           name="ghost_name",           optional=false,           order=1,           read_type="string",           subclasses={             "Ghost"           }         },         {           description="The prototype of the entity or tile contained in this ghost.",           name="ghost_prototype",           optional=false,           order=35,           read_type={             complex_type="union",             full_format=false,             options={               "LuaEntityPrototype",               "LuaTilePrototype"             }           },           subclasses={             "Ghost"           }         },         {           description="The prototype type of the entity or tile contained in this ghost.",           name="ghost_type",           optional=false,           order=7,           read_type="string",           subclasses={             "Ghost"           }         },         {           description="The [unit_number](runtime:LuaEntity::unit_number) of the entity contained in this ghost. It is the same as the unit number of the [EntityWithOwnerPrototype](prototype:EntityWithOwnerPrototype) that was destroyed to create this ghost. If it was created by other means, or if the inner entity does not support unit numbers, this property is `nil`.",           name="ghost_unit_number",           optional=true,           order=83,           read_type="uint64",           subclasses={             "EntityGhost"           }         },         {           description="Returns a [rich text](https://wiki.factorio.com/Rich_text) string containing this entity's position and surface name as a gps tag. [Printing](runtime:LuaGameScript::print) it will ping the location of the entity.",           examples={             "```\n-- called on a LuaEntity on the default surface it returns:\nentity.gps_tag -- => \"[gps=-4,-9]\"\n\n-- called on a LuaEntity on \"custom-surface\" it returns:\ndifferent_entity.gps_tag -- => \"[gps=1,-5,custom-surface]\"\n```"           },           name="gps_tag",           optional=false,           order=196,           read_type="string"         },         {           description="The graphics variation for this entity. `nil` if this entity doesn't use graphics variations.",           name="graphics_variation",           optional=true,           order=96,           read_type="uint8",           write_type="uint8"         },         {           description="This entity's equipment grid, if any.",           name="grid",           optional=true,           order=95,           read_type="LuaEquipmentGrid"         },         {           description="The current health of the entity, if any. Health is automatically clamped to be between `0` and max health (inclusive). Entities with a health of `0` can not be attacked.\n\nTo get the maximum possible health of this entity, see [LuaEntity::max_health](runtime:LuaEntity::max_health).",           name="health",           optional=true,           order=15,           read_type="float",           write_type="float"         },         {           description="The item stack currently held in an inserter's hand.",           name="held_stack",           optional=false,           order=44,           read_type="LuaItemStack",           subclasses={             "Inserter"           }         },         {           description="Current position of the inserter's \"hand\".",           name="held_stack_position",           optional=false,           order=45,           read_type="MapPosition",           subclasses={             "Inserter"           }         },         {           description="The blink interval of this highlight box entity. `0` indicates no blink.",           name="highlight_box_blink_interval",           optional=false,           order=148,           read_type="uint",           subclasses={             "HighlightBox"           },           write_type="uint"         },         {           description="The highlight box type of this highlight box entity.",           name="highlight_box_type",           optional=false,           order=147,           read_type="CursorBoxRenderType",           subclasses={             "HighlightBox"           },           write_type="CursorBoxRenderType"         },         {           description="Whether this turret shoots at targets that are not on its priority list.",           name="ignore_unprioritised_targets",           optional=false,           order=77,           read_type="boolean",           subclasses={             "Turret"           },           write_type="boolean"         },         {           description="The filters for this infinity container.",           name="infinity_container_filters",           optional=false,           order=123,           read_type={             complex_type="array",             value="InfinityInventoryFilter"           },           subclasses={             "InfinityContainer",             "InfinityCargoWagon"           },           write_type={             complex_type="array",             value="InfinityInventoryFilter"           }         },         {           description="Count of initial resource units contained. `nil` if this is not an infinite resource.\n\nIf this is not an infinite resource, writing will produce an error.",           name="initial_amount",           optional=true,           order=25,           read_type="uint",           subclasses={             "ResourceEntity"           },           write_type="uint"         },         {           description="The insert plan for this ghost or item request proxy.",           name="insert_plan",           optional=false,           order=72,           read_type={             complex_type="array",             value="BlueprintInsertPlan"           },           subclasses={             "EntityGhost",             "ItemRequestProxy"           },           write_type={             complex_type="array",             value="BlueprintInsertPlan"           }         },         {           description="The filter mode for this filter inserter. `nil` if this inserter doesn't use filters.",           name="inserter_filter_mode",           optional=true,           order=132,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           },           subclasses={             "Inserter"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           }         },         {           description="The spoil priority for this inserter.",           name="inserter_spoil_priority",           optional=false,           order=138,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="fresh_first"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="spoiled_first"               }             }           },           subclasses={             "Inserter"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="fresh_first"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="spoiled_first"               }             }           }         },         {           description="Sets the stack size limit on this inserter.\n\nSet to `0` to reset.",           name="inserter_stack_size_override",           optional=false,           order=113,           read_type="uint",           subclasses={             "Inserter"           },           write_type="uint"         },         {           description="Returns the current target pickup count of the inserter.\n\nThis considers the circuit network, manual override and the inserter stack size limit based on technology.",           name="inserter_target_pickup_count",           optional=false,           order=112,           read_type="uint",           subclasses={             "Inserter"           }         },         {           description="If this entity is EntityWithHealth",           name="is_entity_with_health",           optional=false,           order=171,           read_type="boolean"         },         {           description="If this entity is EntityWithOwner",           name="is_entity_with_owner",           optional=false,           order=170,           read_type="boolean"         },         {           description="If the entity is freezable.",           name="is_freezable",           optional=false,           order=208,           read_type="boolean"         },         {           description="If the rolling stock is facing train's front.",           name="is_headed_to_trains_front",           optional=false,           order=192,           read_type="boolean",           subclasses={             "RollingStock"           }         },         {           description="Whether this entity is a MilitaryTarget. Can be written to if [LuaEntityPrototype::allow_run_time_change_of_is_military_target](runtime:LuaEntityPrototype::allow_run_time_change_of_is_military_target) returns `true`.",           name="is_military_target",           optional=false,           order=169,           read_type="boolean",           write_type="boolean"         },         {           description="If the entity is updatable.",           name="is_updatable",           optional=false,           order=204,           read_type="boolean"         },         {           description="The first found item request proxy targeting this entity.",           name="item_request_proxy",           optional=true,           order=216,           read_type="LuaEntity"         },         {           description="Items this ghost will request when revived or items this item request proxy is requesting.",           name="item_requests",           optional=false,           order=71,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           }         },         {           description="The number of units killed by this turret, artillery turret, or artillery wagon.",           name="kills",           optional=false,           order=76,           read_type="uint",           subclasses={             "Turret"           },           write_type="uint"         },         {           description="The last player that changed any setting on this entity. This includes building the entity, changing its color, or configuring its circuit network. `nil` if the last user is not part of the save anymore.",           name="last_user",           optional=true,           order=78,           read_type="LuaPlayer",           subclasses={             "EntityWithOwner",             "DeconstructibleTileProxy",             "TileGhost"           },           write_type="PlayerIdentification"         },         {           description="The link ID this linked container is using.",           name="link_id",           optional=false,           order=173,           read_type="uint",           subclasses={             "LinkedContainer"           },           write_type="uint"         },         {           description="Neighbour to which this linked belt is connected to, if any.\n\nCan also be used on entity ghost if it contains linked-belt.\n\nMay return entity ghost which contains linked belt to which connection is made.",           name="linked_belt_neighbour",           optional=true,           order=177,           read_type="LuaEntity",           subclasses={             "LinkedBelt"           }         },         {           description="Type of linked belt. Changing type will also flip direction so the belt is out of the same side.\n\nCan only be changed when linked belt is disconnected (has no neighbour set).\n\nCan also be used on entity ghost if it contains linked-belt.",           name="linked_belt_type",           optional=false,           order=176,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="output"               }             }           },           subclasses={             "LinkedBelt"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="output"               }             }           }         },         {           description="The belt stack size override for this loader. Set to `0` to disable. Writing this value requires [LoaderPrototype::adjustable_belt_stack_size](prototype:LoaderPrototype::adjustable_belt_stack_size) to be `true`.",           name="loader_belt_stack_size_override",           optional=false,           order=134,           read_type="uint8",           subclasses={             "Loader"           },           write_type="uint8"         },         {           description="The container entity this loader is pointing at/pulling from depending on the [LuaEntity::loader_type](runtime:LuaEntity::loader_type), if any.",           name="loader_container",           optional=true,           order=94,           read_type="LuaEntity",           subclasses={             "Loader"           }         },         {           description="The filter mode for this loader. `nil` if this loader does not support filters.",           name="loader_filter_mode",           optional=true,           order=133,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           },           subclasses={             "Loader"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           }         },         {           description="Whether this loader gets items from or puts item into a container.",           name="loader_type",           optional=false,           order=66,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="output"               }             }           },           subclasses={             "Loader"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="output"               }             }           }         },         {           description="",           name="localised_description",           optional=false,           order=3,           read_type="LocalisedString"         },         {           description="Localised name of the entity.",           name="localised_name",           optional=false,           order=2,           read_type="LocalisedString"         },         {           description="The logistic cell this entity is a part of. Will be `nil` if this entity is not a part of any logistic cell.",           name="logistic_cell",           optional=false,           order=70,           read_type="LuaLogisticCell"         },         {           description="The logistic network this entity is a part of, or `nil` if this entity is not a part of any logistic network.",           name="logistic_network",           optional=false,           order=69,           read_type="LuaLogisticNetwork",           write_type="LuaLogisticNetwork"         },         {           description="Max health of this entity.",           name="max_health",           optional=false,           order=16,           read_type="float"         },         {           description="Not minable entities can still be destroyed.\n\nTells if entity reports as being minable right now. This takes into account minable_flag and entity specific conditions (for example rail under rolling stocks is not minable, vehicle with passenger is not minable).\n\nWrite to this field since 2.0.26 is deprecated and it will result in write to minable_flag instead.",           name="minable",           optional=false,           order=11,           read_type="boolean",           write_type="boolean"         },         {           description="Script controlled flag that allows entity to be mined.",           name="minable_flag",           optional=false,           order=12,           read_type="boolean",           write_type="boolean"         },         {           description="The filter mode for this mining drill. `nil` if this mining drill doesn't have filters.",           name="mining_drill_filter_mode",           optional=true,           order=135,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           },           subclasses={             "MiningDrill"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           }         },         {           description="The mining progress for this mining drill. Is a number in range [0, mining_target.prototype.mineable_properties.mining_time]. `nil` if this isn't a mining drill.",           name="mining_progress",           optional=true,           order=84,           read_type="double",           write_type="double"         },         {           description="The mining target, if any.",           name="mining_target",           optional=true,           order=92,           read_type="LuaEntity",           subclasses={             "MiningDrill"           }         },         {           description="If the entity is currently mirrored. This state is referred to as `flipped` elsewhere, such as on the [on_player_flipped_entity](runtime:on_player_flipped_entity) event.",           name="mirroring",           optional=false,           order=18,           read_type="boolean",           write_type="boolean"         },         {           description="Name of the entity prototype. E.g. \"inserter\" or \"fast-inserter\".",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="Name tag of this entity. Returns `nil` if entity has no name tag. When name tag is already used by other entity, the name will be removed from the other entity. Entity name tags can also be set in the entity \"extra settings\" GUI in the map editor.",           name="name_tag",           optional=false,           order=181,           read_type="string",           write_type="string"         },         {           description="The current total neighbour bonus of this reactor.",           name="neighbour_bonus",           optional=false,           order=145,           read_type="double",           subclasses={             "Reactor"           }         },         {           description="A list of neighbours for certain types of entities. Applies to underground belts, walls, gates, reactors, cliffs, and pipe-connectable entities.",           lists={             "Differs depending on the type of entity:\n\n- When called on a pipe-connectable entity, this is an array of entity arrays of all entities a given fluidbox is connected to.\n- When called on an underground transport belt, this is the other end of the underground belt connection, or `nil` if none.\n- When called on a wall-connectable entity or reactor, this is a dictionary of all connections indexed by the connection direction \"north\", \"south\", \"east\", and \"west\".\n- When called on a cliff entity, this is a dictionary of all connections indexed by the connection direction \"north\", \"south\", \"east\", and \"west\"."           },           name="neighbours",           optional=true,           order=47,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="dictionary",                 key="string",                 value={                   complex_type="array",                   value="LuaEntity"                 }               },               {                 complex_type="array",                 value={                   complex_type="array",                   value="LuaEntity"                 }               },               "LuaEntity"             }           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=229,           read_type="string"         },         {           description="Player can't open gui of this entity and he can't quick insert/input stuff in to the entity when it is not operable.",           name="operable",           optional=false,           order=14,           read_type="boolean",           write_type="boolean"         },         {           description="The smooth orientation of this entity.",           name="orientation",           optional=false,           order=20,           read_type="RealOrientation",           write_type="RealOrientation"         },         {           description="Plants registered by this agricultural tower. One plant can be registered in multiple agricultural towers.",           name="owned_plants",           optional=false,           order=190,           read_type={             complex_type="array",             value="LuaEntity"           },           subclasses={             "AgriculturalTower"           }         },         {           description="",           name="parameters",           optional=false,           order=109,           read_type="ProgrammableSpeakerParameters",           subclasses={             "ProgrammableSpeaker"           },           write_type="ProgrammableSpeakerParameters"         },         {           description="For inserters taking items from transport belt connectables, this determines whether the inserter is allowed to take items from the left lane.",           name="pickup_from_left_lane",           optional=false,           order=220,           read_type="boolean",           subclasses={             "Inserter"           },           write_type="boolean"         },         {           description="For inserters taking items from transport belt connectables, this determines whether the inserter is allowed to take items from the right lane.",           name="pickup_from_right_lane",           optional=false,           order=221,           read_type="boolean",           subclasses={             "Inserter"           },           write_type="boolean"         },         {           description="Where the inserter will pick up items from.\n\nInserters must have `allow_custom_vectors` set to true on their prototype to allow changing the pickup position.",           name="pickup_position",           optional=false,           order=37,           read_type="MapPosition",           subclasses={             "Inserter"           },           write_type="MapPosition"         },         {           description="The entity this inserter will attempt to pick up items from. If there are multiple possible entities at the pick-up point, writing to this attribute allows a mod to choose which one to pick up items from. The entity needs to collide with the tile box under the pick-up position. `nil` if there is no entity to pull items from.",           name="pickup_target",           optional=true,           order=39,           read_type="LuaEntity",           subclasses={             "Inserter"           },           write_type="LuaEntity"         },         {           description="The player connected to this character, if any.",           name="player",           optional=true,           order=74,           read_type="LuaPlayer",           subclasses={             "Character"           }         },         {           description="The pollution bonus of this entity.",           name="pollution_bonus",           optional=false,           order=62,           read_type="double"         },         {           description="The power production specific to the ElectricEnergyInterface entity type.",           name="power_production",           optional=false,           order=86,           read_type="double",           subclasses={             "ElectricEnergyInterface"           },           write_type="double"         },         {           description="The state of this power switch.",           name="power_switch_state",           optional=false,           order=119,           read_type="boolean",           subclasses={             "PowerSwitch"           },           write_type="boolean"         },         {           description="The power usage specific to the ElectricEnergyInterface entity type.",           name="power_usage",           optional=false,           order=87,           read_type="double",           subclasses={             "ElectricEnergyInterface"           },           write_type="double"         },         {           description="The previous recipe this furnace was using, if any.",           name="previous_recipe",           optional=true,           order=43,           read_type="RecipeIDAndQualityIDPair",           subclasses={             "Furnace"           }         },         {           description="how far into the current procession the cargo pod is.",           name="procession_tick",           optional=false,           order=203,           read_type="MapTick",           subclasses={             "CargoPod"           },           write_type="MapTick"         },         {           description="The productivity bonus of this entity.\n\nThis includes force based bonuses as well as beacon/module bonuses.",           name="productivity_bonus",           optional=false,           order=61,           read_type="double"         },         {           description="The number of products this machine finished crafting in its lifetime.",           name="products_finished",           optional=false,           order=114,           read_type="uint",           subclasses={             "CraftingMachine"           },           write_type="uint"         },         {           description="The entity prototype of this entity.",           name="prototype",           optional=false,           order=34,           read_type="LuaEntityPrototype"         },         {           description="The target entity for this item-request-proxy, if any.",           name="proxy_target",           optional=true,           order=105,           read_type="LuaEntity",           subclasses={             "ItemRequestProxy"           }         },         {           description="Entity of which inventory is exposed by this ProxyContainer",           name="proxy_target_entity",           optional=true,           order=222,           read_type="LuaEntity",           subclasses={             "ProxyContainer"           },           write_type="LuaEntity"         },         {           description="Inventory index of the inventory that is exposed by this ProxyContainer",           name="proxy_target_inventory",           optional=false,           order=223,           read_type="defines.inventory",           subclasses={             "ProxyContainer"           },           write_type="defines.inventory"         },         {           description="The rail target of this pump, if any.",           name="pump_rail_target",           optional=true,           order=154,           read_type="LuaEntity",           subclasses={             "Pump"           }         },         {           description="The quality of this entity.\n\nNot all entities support quality and will give the \"normal\" quality back if they don't.",           name="quality",           optional=false,           order=178,           read_type="LuaQualityPrototype"         },         {           description="The current radar scan progress, as a number in range `[0, 1]`.",           name="radar_scan_progress",           optional=false,           order=180,           read_type="float",           subclasses={             "Radar"           }         },         {           description="Gets rail layer of a given signal",           name="rail_layer",           optional=false,           order=179,           read_type="defines.rail_layer",           subclasses={             "RailSignal",             "RailChainSignal"           }         },         {           description="When locked; the recipe in this assembling machine can't be changed by the player.",           name="recipe_locked",           optional=false,           order=140,           read_type="boolean",           subclasses={             "AssemblingMachine"           },           write_type="boolean"         },         {           description="The relative orientation of the vehicle turret, artillery turret, artillery wagon. `nil` if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon.\n\nWriting does nothing if the vehicle doesn't have a turret.",           name="relative_turret_orientation",           optional=true,           order=22,           read_type="RealOrientation",           write_type="RealOrientation"         },         {           description="The removal plan for this item request proxy.",           name="removal_plan",           optional=false,           order=73,           read_type={             complex_type="array",             value="BlueprintInsertPlan"           },           subclasses={             "ItemRequestProxy"           },           write_type={             complex_type="array",             value="BlueprintInsertPlan"           }         },         {           description="Whether items not included in this infinity container filters should be removed from the container.",           name="remove_unfiltered_items",           optional=false,           order=124,           read_type="boolean",           subclasses={             "InfinityContainer",             "InfinityCargoWagon"           },           write_type="boolean"         },         {           description="The player that this `simple-entity-with-owner`, `simple-entity-with-force`, or `highlight-box` is visible to. `nil` when this entity is rendered for all players.",           name="render_player",           optional=true,           order=152,           read_type="LuaPlayer",           write_type="PlayerIdentification"         },         {           description="The forces that this `simple-entity-with-owner` or `simple-entity-with-force` is visible to. `nil` or an empty array when this entity is rendered for all forces.\n\nReading will always give an array of [LuaForce](runtime:LuaForce)",           name="render_to_forces",           optional=true,           order=153,           read_type="ForceSet",           write_type="ForceSet"         },         {           description="Whether this requester chest is set to also request from buffer chests.\n\nUseable only on entities that have requester slots.",           name="request_from_buffers",           optional=false,           order=160,           read_type="boolean",           write_type="boolean"         },         {           description="The quality produced when this crafting machine finishes crafting. `nil` when crafting is not in progress.\n\nNote: Writing `nil` is not allowed.",           name="result_quality",           optional=true,           order=60,           read_type="LuaQualityPrototype",           subclasses={             "CraftingMachine"           },           write_type="QualityID"         },         {           description="Get the current queue of robot orders.",           name="robot_order_queue",           optional=false,           order=202,           read_type={             complex_type="array",             value="WorkerRobotOrder"           },           subclasses={             "ConstructionRobot",             "LogisticRobot"           }         },         {           description="The rocket silo rocket this cargo pod is attached to, or rocket silo rocket attached to this rocket silo - if any.",           name="rocket",           optional=true,           order=215,           read_type="LuaEntity"         },         {           description="Number of rocket parts in the silo.",           name="rocket_parts",           optional=false,           order=68,           read_type="uint",           subclasses={             "RocketSilo"           },           write_type="uint"         },         {           description="The status of this rocket silo entity.",           name="rocket_silo_status",           optional=false,           order=182,           read_type="defines.rocket_silo_status",           subclasses={             "RocketSilo"           }         },         {           description="When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated by player using the R key.\n\nEntities that are not rotatable naturally (like chest or furnace) can't be set to be rotatable.",           name="rotatable",           optional=false,           order=13,           read_type="boolean",           write_type="boolean"         },         {           description="The secondary bounding box of this entity or `nil` if it doesn't have one. This only exists for curved rails, and is automatically determined by the game.",           name="secondary_bounding_box",           optional=true,           order=89,           read_type="BoundingBox"         },         {           description="The secondary selection box of this entity or `nil` if it doesn't have one. This only exists for curved rails, and is automatically determined by the game.",           name="secondary_selection_box",           optional=true,           order=91,           read_type="BoundingBox"         },         {           description="Index of the currently selected weapon slot of this character, car, or spidertron. `nil` if this entity doesn't have guns.",           name="selected_gun_index",           optional=true,           order=40,           read_type="uint",           subclasses={             "Character",             "Car",             "SpiderVehicle"           },           write_type="uint"         },         {           description="[LuaEntityPrototype::selection_box](runtime:LuaEntityPrototype::selection_box) around entity's given position and respecting the current entity orientation.",           name="selection_box",           optional=false,           order=90,           read_type="BoundingBox"         },         {           description="The shooting target for this turret, if any. Can't be set to `nil` via script.",           name="shooting_target",           optional=true,           order=104,           read_type="LuaEntity",           subclasses={             "Turret"           },           write_type="LuaEntity"         },         {           description="The state of this rail signal.",           name="signal_state",           optional=false,           order=54,           read_type="defines.signal_state",           subclasses={             "RailSignal",             "RailChainSignal"           }         },         {           description="",           name="spawn_shift",           optional=false,           order=117,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="",           name="spawning_cooldown",           optional=false,           order=115,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="The current speed if this is a car, rolling stock, projectile or spidertron, or the maximum speed if this is a unit. The speed is in tiles per tick. `nil` if this is not a car, rolling stock, unit, projectile or spidertron.\n\nOnly the speed of units, cars, and projectiles are writable.",           name="speed",           optional=true,           order=31,           read_type="float",           write_type="float"         },         {           description="The speed bonus of this entity.\n\nThis includes force based bonuses as well as beacon/module bonuses.",           name="speed_bonus",           optional=false,           order=63,           read_type="double"         },         {           description="The filter for this splitter, if any is set.",           name="splitter_filter",           optional=true,           order=131,           read_type="ItemFilter",           subclasses={             "Splitter",             "LaneSplitter"           },           write_type="ItemFilter"         },         {           description="The input priority for this splitter.",           name="splitter_input_priority",           optional=false,           order=136,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="right"               }             }           },           subclasses={             "Splitter",             "LaneSplitter"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="right"               }             }           }         },         {           description="The output priority for this splitter.",           name="splitter_output_priority",           optional=false,           order=137,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="right"               }             }           },           subclasses={             "Splitter",             "LaneSplitter"           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="right"               }             }           }         },         {           description="",           name="stack",           optional=false,           order=33,           read_type="LuaItemStack",           subclasses={             "ItemEntity"           }         },         {           description="The status of this entity, if any.\n\nThis is always the actual status of the entity, even if [LuaEntity::custom_status](runtime:LuaEntity::custom_status) is set.",           name="status",           optional=true,           order=149,           read_type="defines.entity_status"         },         {           description="The entity this sticker is sticked to.",           name="sticked_to",           optional=false,           order=107,           read_type="LuaEntity",           subclasses={             "Sticker"           }         },         {           description="The vehicle modifiers applied to this entity through the attached stickers.",           name="sticker_vehicle_modifiers",           optional=true,           order=108,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="friction_modifier",                 optional=false,                 order=2,                 type="double"               },               {                 description="",                 name="speed_max",                 optional=false,                 order=1,                 type="double"               },               {                 description="",                 name="speed_modifier",                 optional=false,                 order=0,                 type="double"               }             }           }         },         {           description="The sticker entities attached to this entity, if any.",           name="stickers",           optional=true,           order=106,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The storage filter for this logistic storage container.\n\nUseable only on logistic containers with the `\"storage\"` [logistic_mode](runtime:LuaEntityPrototype::logistic_mode).",           name="storage_filter",           optional=true,           order=159,           read_type="ItemIDAndQualityIDPair",           write_type="ItemWithQualityID"         },         {           description="Whether the entity has direction. When it is false for this entity, it will always return north direction when asked for.",           name="supports_direction",           optional=false,           order=19,           read_type="boolean"         },         {           description="The tags associated with this entity ghost. `nil` if this is not an entity ghost or when the ghost has no tags.",           name="tags",           optional=true,           order=163,           read_type="Tags",           write_type="Tags"         },         {           description="The temperature of this entity's heat energy source. `nil` if this entity does not use a heat energy source.",           name="temperature",           optional=true,           order=42,           read_type="double",           write_type="double"         },         {           description="The tick when this plant is fully grown.",           name="tick_grown",           optional=false,           order=199,           read_type="MapTick",           subclasses={             "Plant"           },           write_type="MapTick"         },         {           description="The last tick this character entity was attacked.",           name="tick_of_last_attack",           optional=false,           order=129,           read_type="uint",           subclasses={             "Character"           },           write_type="uint"         },         {           description="The last tick this character entity was damaged.",           name="tick_of_last_damage",           optional=false,           order=130,           read_type="uint",           subclasses={             "Character"           },           write_type="uint"         },         {           description="Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity.",           name="tile_height",           optional=false,           order=184,           read_type="uint"         },         {           description="Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity.",           name="tile_width",           optional=false,           order=183,           read_type="uint"         },         {           description="The ticks left before a combat robot, highlight box, smoke, or sticker entity is destroyed.",           name="time_to_live",           optional=false,           order=52,           read_type="uint64",           subclasses={             "CombatRobot",             "HighlightBox",             "Smoke",             "Sticker"           },           write_type="uint64"         },         {           description="The ticks until the next trigger effect of this smoke-with-trigger.",           name="time_to_next_effect",           optional=false,           order=164,           read_type="uint",           subclasses={             "SmokeWithTrigger"           },           write_type="uint"         },         {           description="The timeout that's left on this landmine in ticks. It describes the time between the landmine being placed and it being armed.",           name="timeout",           optional=false,           order=144,           read_type="uint",           subclasses={             "LandMine"           },           write_type="uint"         },         {           description="Will this item entity be picked up automatically when the player walks over it?",           name="to_be_looted",           optional=false,           order=56,           read_type="boolean",           subclasses={             "ItemEntity"           },           write_type="boolean"         },         {           description="The torso orientation of this spider vehicle.",           name="torso_orientation",           optional=false,           order=23,           read_type="RealOrientation",           subclasses={             "SpiderVehicle"           },           write_type="RealOrientation"         },         {           description="The train this rolling stock belongs to, if any. `nil` if this is not a rolling stock.",           name="train",           optional=true,           order=46,           read_type="LuaTrain"         },         {           description="Priority of this train stop.",           name="train_stop_priority",           optional=false,           order=194,           read_type="uint8",           subclasses={             "TrainStop"           },           write_type="uint8"         },         {           description="Amount of trains related to this particular train stop. Includes train stopped at this train stop (until it finds a path to next target) and trains having this train stop as goal or waypoint.\n\nTrain may be included multiple times when braking distance covers this train stop multiple times.\n\nValue may be read even when train stop has no control behavior.",           name="trains_count",           optional=false,           order=167,           read_type="uint",           subclasses={             "TrainStop"           }         },         {           description="The number of trains in this rail block for this rail entity.",           name="trains_in_block",           optional=false,           order=143,           read_type="uint",           subclasses={             "Rail"           }         },         {           description="Amount of trains above which no new trains will be sent to this train stop. Writing nil will disable the limit (will set a maximum possible value).\n\nWhen a train stop has a control behavior with wire connected and set_trains_limit enabled, this value will be overwritten by it.",           name="trains_limit",           optional=false,           order=168,           read_type="uint",           subclasses={             "TrainStop"           },           write_type="uint"         },         {           description="Index of the tree color.",           name="tree_color_index",           optional=false,           order=97,           read_type="uint8",           subclasses={             "Tree"           },           write_type="uint8"         },         {           description="Maximum index of the tree colors.",           name="tree_color_index_max",           optional=false,           order=98,           read_type="uint8",           subclasses={             "Tree"           }         },         {           description="Index of the tree gray stage",           name="tree_gray_stage_index",           optional=false,           order=101,           read_type="uint8",           subclasses={             "Tree"           },           write_type="uint8"         },         {           description="Maximum index of the tree gray stages.",           name="tree_gray_stage_index_max",           optional=false,           order=102,           read_type="uint8",           subclasses={             "Tree"           }         },         {           description="Index of the tree stage.",           name="tree_stage_index",           optional=false,           order=99,           read_type="uint8",           subclasses={             "Tree"           },           write_type="uint8"         },         {           description="Maximum index of the tree stages.",           name="tree_stage_index_max",           optional=false,           order=100,           read_type="uint8",           subclasses={             "Tree"           }         },         {           description="The entity prototype type of this entity.",           name="type",           optional=false,           order=6,           read_type="string"         },         {           description="A unique number identifying this entity for the lifetime of the save. These are allocated sequentially, and not re-used (until overflow).\n\nOnly entities inheriting from [EntityWithOwnerPrototype](prototype:EntityWithOwnerPrototype), as well as [ItemRequestProxyPrototype](prototype:ItemRequestProxyPrototype) and [EntityGhostPrototype](prototype:EntityGhostPrototype) are assigned a unit number. Returns `nil` otherwise.",           name="unit_number",           optional=true,           order=82,           read_type="uint64"         },         {           description="The units associated with this spawner entity.",           name="units",           optional=false,           order=118,           read_type={             complex_type="array",             value="LuaEntity"           },           subclasses={             "Spawner"           }         },         {           description="If set to 'true', this inserter will use filtering logic.\n\nThis has no effect if the prototype does not support filters.",           name="use_filters",           optional=false,           order=8,           read_type="boolean",           subclasses={             "Inserter"           },           write_type="boolean"         },         {           description="When true, the rocket silo will request items for space platforms in orbit.\n\nSetting the value will have no effect when the silo doesn't support logistics.",           name="use_transitional_requests",           optional=false,           order=67,           read_type="boolean",           subclasses={             "RocketSilo"           },           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=228,           read_type="boolean"         },         {           description="The threshold override of this valve, or `nil` if an override is not defined.\n\nIf no override is defined, the threshold is taken from [LuaEntityPrototype::valve_threshold](runtime:LuaEntityPrototype::valve_threshold).",           name="valve_threshold_override",           optional=true,           order=155,           read_type="float",           subclasses={             "Valve"           },           write_type="float"         },         {           description="Read when this spidertron auto-targets enemies",           name="vehicle_automatic_targeting_parameters",           optional=false,           order=30,           read_type="VehicleAutomaticTargetingParameters",           subclasses={             "SpiderVehicle"           },           write_type="VehicleAutomaticTargetingParameters"         }       },       description="The primary interface for interacting with entities through the Lua API. Entities are everything that exists on the map except for tiles (see [LuaTile](runtime:LuaTile)).\n\nMost functions on LuaEntity also work when the entity is contained in a ghost.",       methods={         {           description="Adds the given position to this spidertron's autopilot's queue of destinations.",           format={             takes_table=false           },           name="add_autopilot_destination",           order=108,           parameters={             {               description="The position the spidertron should move to.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={},           subclasses={             "SpiderVehicle"           }         },         {           description="Offer a thing on the market.",           examples={             "```\n-- Adds market offer, 1 copper ore for 10 iron ore\nmarket.add_market_item{price={{name = \"iron-ore\", count = 10}}, offer={type=\"give-item\", item=\"copper-ore\"}}\n```",             "```\n-- Adds market offer, 1 copper ore for 5 iron ore and 5 stone ore\nmarket.add_market_item{price={{name = \"iron-ore\", count = 5}, {name = \"stone\", count = 5}}, offer={type=\"give-item\", item=\"copper-ore\"}}\n```"           },           format={             takes_table=false           },           name="add_market_item",           order=10,           parameters={             {               description="",               name="offer",               optional=false,               order=0,               type="Offer"             }           },           return_values={},           subclasses={             "Market"           }         },         {           description="Whether the entity can be destroyed",           format={             takes_table=false           },           name="can_be_destroyed",           order=5,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="The same as [LuaInventory::can_set_filter](runtime:LuaInventory::can_set_filter) but also works for ghosts.",           format={             takes_table=false           },           name="can_set_inventory_filter",           order=129,           parameters={             {               description="The item filter",               name="filter",               optional=false,               order=2,               type="ItemFilter"             },             {               description="The item stack index",               name="index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Whether this character can shoot the given entity or position.",           format={             takes_table=false           },           name="can_shoot",           order=93,           parameters={             {               description="",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="",               name="target",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Character"           }         },         {           description="Can wires reach between these entities.",           format={             takes_table=false           },           name="can_wires_reach",           order=102,           parameters={             {               description="",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancels deconstruction if it is scheduled, does nothing otherwise.",           format={             takes_table=false           },           name="cancel_deconstruction",           order=15,           parameters={             {               description="The force who did the deconstruction order.",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="The player to set the `last_user` to if any.",               name="player",               optional=true,               order=1,               type="PlayerIdentification"             }           },           raises={             {               description="Raised if the entity's deconstruction was successfully cancelled.",               name="on_cancelled_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Cancels upgrade if it is scheduled, does nothing otherwise.",           format={             takes_table=false           },           name="cancel_upgrade",           order=18,           parameters={             {               description="The force who did the upgrade order.",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=1,               type="PlayerIdentification"             }           },           raises={             {               description="Raised if the entity way previously marked for upgrade.",               name="on_cancelled_upgrade",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the cancel was successful.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Remove all fluids from this entity.",           format={             takes_table=false           },           name="clear_fluid_inside",           order=83,           parameters={},           return_values={}         },         {           description="Removes all offers from a market.",           format={             takes_table=false           },           name="clear_market_items",           order=13,           parameters={},           return_values={},           subclasses={             "Market"           }         },         {           description="Clones this entity.",           format={             table_optional=false,             takes_table=true           },           name="clone",           order=78,           parameters={             {               description="If false, the building effect smoke will not be shown around the new entity.",               name="create_build_effect_smoke",               optional=true,               order=3,               type="boolean"             },             {               description="",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="The destination position",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="The destination surface",               name="surface",               optional=true,               order=1,               type="LuaSurface"             }           },           raises={             {               description="Raised if the entity was successfully cloned.",               name="on_entity_cloned",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The cloned entity or `nil` if this entity can't be cloned/can't be cloned to the given location.",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Connects current linked belt with another one.\n\nNeighbours have to be of different type. If given linked belt is connected to something else it will be disconnected first. If provided neighbour is connected to something else it will also be disconnected first. Automatically updates neighbour to be connected back to this one.\n\nCan also be used on entity ghost if it contains linked-belt.",           format={             takes_table=false           },           name="connect_linked_belts",           order=109,           parameters={             {               description="Another linked belt or entity ghost containing linked belt to connect or nil to disconnect",               name="neighbour",               optional=true,               order=0,               type="LuaEntity"             }           },           return_values={},           subclasses={             "LinkedBelt"           }         },         {           description="Connects the rolling stock in the given direction.",           format={             takes_table=false           },           name="connect_rolling_stock",           order=65,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="Whether any connection was made",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "RollingStock"           }         },         {           description="Copies settings from the given entity onto this entity.",           format={             takes_table=false           },           name="copy_settings",           order=62,           parameters={             {               description="If provided, the copying is done 'as' this player and [on_entity_settings_pasted](runtime:on_entity_settings_pasted) is triggered.",               name="by_player",               optional=true,               order=1,               type="PlayerIdentification"             },             {               description="",               name="entity",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="Any items removed from this entity as a result of copying the settings.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         },         {           description="Creates the same smoke that is created when you place a building by hand.\n\nYou can play the building sound to go with it by using [LuaSurface::play_sound](runtime:LuaSurface::play_sound), eg: `entity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}`",           format={             takes_table=false           },           name="create_build_effect_smoke",           order=90,           parameters={},           return_values={}         },         {           description="Creates a cargo pod if possible.\n\nCargo pod will be created with [invalid](runtime:defines.cargo_destination.invalid) destination type. Setting [cargo_pod_destination](runtime:LuaEntity::cargo_pod_destination) will cause it to launch.",           format={             takes_table=false           },           name="create_cargo_pod",           order=122,           parameters={             {               description="The hatch to create the pod at. A random (available) one is picked if not provided.",               name="cargo_hatch",               optional=true,               order=0,               type="LuaCargoHatch"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaEntity"             }           },           subclasses={             "RocketSilo",             "CargoLandingPad",             "SpacePlatformHub"           }         },         {           description="Damages the entity.",           format={             takes_table=false           },           name="damage",           order=4,           parameters={             {               description="The entity that originally triggered the events that led to this damage being dealt (e.g. the character, turret, enemy, etc. that pulled the trigger). Does not need to be on the same surface as the entity being damaged.",               name="cause",               optional=true,               order=4,               type="LuaEntity"             },             {               description="The amount of damage to be done.",               name="damage",               optional=false,               order=0,               type="float"             },             {               description="The force that will be doing the damage.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The entity that is directly dealing the damage (e.g. the projectile, flame, sticker, grenade, laser beam, etc.). Needs to be on the same surface as the entity being damaged.",               name="source",               optional=true,               order=3,               type="LuaEntity"             },             {               description="The type of damage to be done, defaults to `\"impact\"`.",               name="type",               optional=true,               order=2,               type="DamageTypeID"             }           },           raises={             {               description="",               name="on_entity_damaged",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="the total damage actually applied after resistances.",               optional=false,               order=0,               type="float"             }           },           subclasses={             "EntityWithHealth"           }         },         {           description="Depletes and destroys this resource entity.",           format={             takes_table=false           },           name="deplete",           order=97,           parameters={},           raises={             {               description="",               name="on_resource_depleted",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={},           subclasses={             "ResourceEntity"           }         },         {           description="Destroys the entity.\n\nNot all entities can be destroyed - things such as rails under trains cannot be destroyed until the train is moved or destroyed.",           format={             table_optional=true,             takes_table=true           },           name="destroy",           order=6,           parameters={             {               description="Whether neighbouring cliffs should be corrected. Defaults to `false`.",               name="do_cliff_correction",               optional=true,               order=0,               type="boolean"             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",               name="item_index",               optional=true,               order=3,               type="uint"             },             {               description="The player whose undo queue this action should be added to.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="If `true`, [script_raised_destroy](runtime:script_raised_destroy) will be called. Defaults to `false`.",               name="raise_destroy",               optional=true,               order=1,               type="boolean"             }           },           raises={             {               description="Raised if the `raise_destroy` flag was set and the entity was successfully destroyed.",               name="script_raised_destroy",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Returns `false` if the entity was valid and destruction failed, `true` in all other cases.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Immediately kills the entity. Does nothing if the entity doesn't have health.\n\nUnlike [LuaEntity::destroy](runtime:LuaEntity::destroy), `die` will trigger the [on_entity_died](runtime:on_entity_died) event and the entity will produce a corpse and drop loot if it has any.",           examples={             "```\n-- This function can be called with only the `cause` argument and no `force`:\nentity.die(nil, killer_entity)\n```"           },           format={             takes_table=false           },           name="die",           order=7,           parameters={             {               description="The cause to attribute the kill to.",               name="cause",               optional=true,               order=1,               type="LuaEntity"             },             {               description="The force to attribute the kill to.",               name="force",               optional=true,               order=0,               type="ForceID"             }           },           raises={             {               description="Raised if the entity was successfully killed. If `force` is not specified, the event will blame the `\"neutral\"` force.",               name="on_entity_died",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if the entity was successfully killed.",               name="on_post_entity_died",               optional=true,               order=1,               timeframe="instantly"             }           },           return_values={             {               description="Whether the entity was successfully killed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Disconnects linked belt from its neighbour.\n\nCan also be used on entity ghost if it contains linked-belt",           format={             takes_table=false           },           name="disconnect_linked_belts",           order=110,           parameters={},           return_values={},           subclasses={             "LinkedBelt"           }         },         {           description="Tries to disconnect this rolling stock in the given direction.",           format={             takes_table=false           },           name="disconnect_rolling_stock",           order=66,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="If anything was disconnected",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "RollingStock"           }         },         {           description="Take an ascending cargo pod and safely make it skip all animation and immediately switch surface.",           format={             takes_table=false           },           name="force_finish_ascending",           order=120,           parameters={},           raises={             {               description="",               name="on_cargo_pod_finished_ascending",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={},           subclasses={             "CargoPod"           }         },         {           description="Take a descending cargo pod and safely make it arrive and deposit cargo.",           format={             takes_table=false           },           name="force_finish_descending",           order=121,           parameters={},           raises={             {               description="Raised instantly if landing on the ground (i.e. destination type is [surface](runtime:defines.cargo_destination.surface). If landing in a [station](runtime:defines.cargo_destination.station), event will be raised after parking is complete.",               name="on_cargo_pod_delivered_cargo",               optional=true,               order=1,               timeframe="instantly"             },             {               description="",               name="on_cargo_pod_finished_descending",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={},           subclasses={             "CargoPod"           }         },         {           description="Returns a table with all entities affected by this beacon",           format={             takes_table=false           },           name="get_beacon_effect_receivers",           order=119,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "Beacon"           }         },         {           description="Returns a table with all beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)",           format={             takes_table=false           },           name="get_beacons",           order=118,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Get the source of this beam.",           format={             takes_table=false           },           name="get_beam_source",           order=84,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="BeamTarget"             }           },           subclasses={             "Beam"           }         },         {           description="Get the target of this beam.",           format={             takes_table=false           },           name="get_beam_target",           order=86,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="BeamTarget"             }           },           subclasses={             "Beam"           }         },         {           description="The burnt result inventory for this entity or `nil` if this entity doesn't have a burnt result inventory.",           format={             takes_table=false           },           name="get_burnt_result_inventory",           order=3,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Gets the cargo bays connected to this cargo landing pad or space platform hub.",           format={             takes_table=false           },           name="get_cargo_bays",           order=123,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "CargoLandingPad",             "SpacePlatformHub"           }         },         {           description="Returns all child signals. Child signals can be either RailSignal or RailChainSignal. Child signals are signals which are checked by this signal to determine a chain state.",           format={             takes_table=false           },           name="get_child_signals",           order=45,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "RailChainSignal"           }         },         {           description="",           format={             takes_table=false           },           name="get_circuit_network",           order=58,           parameters={             {               description="Wire connector to get circuit network for.",               name="wire_connector_id",               optional=false,               order=0,               type="defines.wire_connector_id"             }           },           return_values={             {               description="The circuit network or nil.",               optional=true,               order=0,               type="LuaCircuitNetwork"             }           }         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="get_connected_rail",           order=34,           parameters={             {               description="",               name="rail_connection_direction",               optional=false,               order=1,               type="defines.rail_connection_direction"             },             {               description="",               name="rail_direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="Rail connected in the specified manner to this one, `nil` if unsuccessful.",               optional=true,               order=0,               type="LuaEntity"             },             {               description="Rail direction of the returned rail which points to origin rail",               optional=true,               order=1,               type="defines.rail_direction"             },             {               description="Turn to be taken when going back from returned rail to origin rail",               optional=true,               order=2,               type="defines.rail_connection_direction"             }           },           subclasses={             "Rail"           }         },         {           description="Get the rails that this signal is connected to.",           format={             takes_table=false           },           name="get_connected_rails",           order=35,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "RailSignal",             "RailChainSignal"           }         },         {           description="Gets rolling stock connected to the given end of this stock.",           format={             takes_table=false           },           name="get_connected_rolling_stock",           order=103,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="The rolling stock connected at the given end, `nil` if none is connected there.",               optional=true,               order=0,               type="LuaEntity"             },             {               description="The rail direction of the connected rolling stock if any.",               optional=true,               order=1,               type="defines.rail_direction"             }           },           subclasses={             "RollingStock"           }         },         {           description="Gets the control behavior of the entity (if any).",           format={             takes_table=false           },           name="get_control_behavior",           order=56,           parameters={},           return_values={             {               description="The control behavior or `nil`.",               optional=true,               order=0,               type="LuaControlBehavior"             }           }         },         {           description="Returns the amount of damage to be taken by this entity.",           format={             takes_table=false           },           name="get_damage_to_be_taken",           order=96,           parameters={},           return_values={             {               description="`nil` if this entity does not have health.",               optional=true,               order=0,               type="float"             }           }         },         {           description="Gets the driver of this vehicle if any.",           format={             takes_table=false           },           name="get_driver",           order=71,           parameters={},           return_values={             {               description="`nil` if the vehicle contains no driver. To check if there's a passenger see [LuaEntity::get_passenger](runtime:LuaEntity::get_passenger).",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "LuaPlayer"                 }               }             }           },           subclasses={             "Vehicle"           }         },         {           description="The input flow limit for the electric energy source. `nil` if the entity doesn't have an electric energy source.",           format={             takes_table=false           },           name="get_electric_input_flow_limit",           order=116,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           }         },         {           description="The output flow limit for the electric energy source. `nil` if the entity doesn't have an electric energy source.",           format={             takes_table=false           },           name="get_electric_output_flow_limit",           order=117,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           }         },         {           description="Get the filter for a slot in an inserter, loader, mining drill, asteroid collector, or logistic storage container. The entity must allow filters.",           format={             takes_table=false           },           name="get_filter",           order=48,           parameters={             {               description="Index of the slot to get the filter for.",               name="slot_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The filter, or `nil` if the given slot has no filter.",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "EntityID",                   "AsteroidChunkID"                 }               }             }           }         },         {           description="Gets fluid of the i-th fluid storage.",           format={             takes_table=false           },           name="get_fluid",           order=132,           parameters={             {               description="Fluid storage index. Valid values are from 1 up to [LuaEntity::fluids_count](runtime:LuaEntity::fluids_count).",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Fluid in this storage. nil if fluid storage is empty.",               optional=true,               order=0,               type="Fluid"             }           }         },         {           description="Get amounts of all fluids in this entity.\n\nIf information about fluid temperatures is required, [LuaEntity::fluidbox](runtime:LuaEntity::fluidbox) should be used instead.",           format={             takes_table=false           },           name="get_fluid_contents",           order=80,           parameters={},           return_values={             {               description="The amounts, indexed by fluid names.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="double"               }             }           }         },         {           description="Get the amount of all or some fluid in this entity.\n\nIf information about fluid temperatures is required, [LuaEntity::fluidbox](runtime:LuaEntity::fluidbox) should be used instead.",           format={             takes_table=false           },           name="get_fluid_count",           order=79,           parameters={             {               description="Prototype name of the fluid to count. If not specified, count all fluids.",               name="fluid",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Checks what is expected fluid to be produced from the offshore pump's source tile. It accounts for visible tile, hidden tile and double hidden tile. It ignores currently set fluid box filter.",           format={             takes_table=false           },           name="get_fluid_source_fluid",           order=138,           parameters={},           return_values={             {               description="Name of fluid that should be produced by this offshore pump based on existing tiles.",               optional=true,               order=0,               type="string"             }           },           subclasses={             "OffshorePump"           }         },         {           description="Gives TilePosition of a tile which this offshore pump uses to check what fluid should be produced.",           format={             takes_table=false           },           name="get_fluid_source_tile",           order=137,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="TilePosition"             }           },           subclasses={             "OffshorePump"           }         },         {           description="The fuel inventory for this entity or `nil` if this entity doesn't have a fuel inventory.",           format={             takes_table=false           },           name="get_fuel_inventory",           order=2,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="The health ratio of this entity between 1 and 0 (for full health and no health respectively).",           format={             takes_table=false           },           name="get_health_ratio",           order=89,           parameters={},           return_values={             {               description="`nil` if this entity doesn't have health.",               optional=true,               order=0,               type="float"             }           }         },         {           description="Gets the heat setting for this heat interface.",           format={             takes_table=false           },           name="get_heat_setting",           order=54,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="HeatSetting"             }           },           subclasses={             "HeatInterface"           }         },         {           description="Returns all signals guarding entrance to a rail block this rail belongs to.",           format={             takes_table=false           },           name="get_inbound_signals",           order=46,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "Rail"           }         },         {           description="Gets the filter for this infinity container at the given index, or `nil` if the filter index doesn't exist or is empty.",           format={             takes_table=false           },           name="get_infinity_container_filter",           order=50,           parameters={             {               description="The index to get.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="InfinityInventoryFilter"             }           },           subclasses={             "InfinityContainer",             "InfinityCargoWagon"           }         },         {           description="Gets the filter for this infinity pipe, or `nil` if the filter is empty.",           format={             takes_table=false           },           name="get_infinity_pipe_filter",           order=52,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="InfinityPipeFilter"             }           },           subclasses={             "InfinityPipe"           }         },         {           description="The same as [LuaInventory::get_bar](runtime:LuaInventory::get_bar) but also works for ghosts.",           format={             takes_table=false           },           name="get_inventory_bar",           order=125,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="The same as [LuaInventory::get_filter](runtime:LuaInventory::get_filter) but also works for ghosts.",           format={             takes_table=false           },           name="get_inventory_filter",           order=130,           parameters={             {               description="The item stack index",               name="index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="The current filter or `nil` if none.",               optional=true,               order=0,               type="ItemFilter"             }           }         },         {           description="Gets the inventory size override of the selected inventory if size override was set using [set_inventory_size_override](runtime:LuaEntity::set_inventory_size_override).",           format={             takes_table=false           },           name="get_inventory_size_override",           order=136,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint16"             }           },           subclasses={             "ContainerEntity",             "CargoWagon"           }         },         {           description="Get an item insert specification onto a belt connectable: for a given map position provides into which line at what position item should be inserted to be closest to the provided position.",           format={             takes_table=false           },           name="get_item_insert_specification",           order=28,           parameters={             {               description="Position where the item is to be inserted.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="Index of the transport line that is closest to the provided map position.",               optional=false,               order=0,               type="uint"             },             {               description="Position along the transport line where item should be dropped.",               optional=false,               order=1,               type="float"             }           },           subclasses={             "TransportBeltConnectable"           }         },         {           description="Get a map position related to a position on a transport line.",           format={             takes_table=false           },           name="get_line_item_position",           order=29,           parameters={             {               description="Index of the transport line. Transport lines are 1-indexed.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="Linear position along the transport line. Clamped to the transport line range.",               name="position",               optional=false,               order=1,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="MapPosition"             }           },           subclasses={             "TransportBeltConnectable"           }         },         {           description="Gets all the `LuaLogisticPoint`s that this entity owns. Optionally returns only the point specified by the index parameter.",           format={             takes_table=false           },           name="get_logistic_point",           order=63,           parameters={             {               description="If provided, this method only returns the `LuaLogisticPoint` specified by this index, or `nil` if it doesn't exist.",               name="index",               optional=true,               order=0,               type="defines.logistic_member_index"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaLogisticPoint",                   {                     complex_type="array",                     value="LuaLogisticPoint"                   }                 }               }             }           }         },         {           description="Gives logistic sections of this entity if it uses logistic sections.",           format={             takes_table=false           },           name="get_logistic_sections",           order=134,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaLogisticSections"             }           }         },         {           description="Get all offers in a market as an array.",           format={             takes_table=false           },           name="get_market_items",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="Offer"               }             }           },           subclasses={             "Market"           }         },         {           description="Get the maximum transport line index of a belt or belt connectable entity.",           format={             takes_table=false           },           name="get_max_transport_line_index",           order=30,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           },           subclasses={             "TransportBeltConnectable"           }         },         {           description="Inventory for storing modules of this entity; `nil` if this entity has no module inventory.",           format={             takes_table=false           },           name="get_module_inventory",           order=1,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Gets (and or creates if needed) the control behavior of the entity.",           format={             takes_table=false           },           name="get_or_create_control_behavior",           order=57,           parameters={},           return_values={             {               description="The control behavior or `nil`.",               optional=true,               order=0,               type="LuaControlBehavior"             }           }         },         {           description="Returns all signals guarding exit from a rail block this rail belongs to.",           format={             takes_table=false           },           name="get_outbound_signals",           order=47,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "Rail"           }         },         {           description="Gets the entity's output inventory if it has one.",           format={             takes_table=false           },           name="get_output_inventory",           order=0,           parameters={},           return_values={             {               description="A reference to the entity's output inventory.",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Returns all parent signals. Parent signals are always RailChainSignal. Parent signals are those signals that are checking state of this signal to determine their own chain state.",           format={             takes_table=false           },           name="get_parent_signals",           order=44,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "RailSignal",             "RailChainSignal"           }         },         {           description="Gets the passenger of this car, spidertron, or cargo pod if any.\n\nThis differs over [LuaEntity::get_driver](runtime:LuaEntity::get_driver) in that for cars, the passenger can't drive the car.",           format={             takes_table=false           },           name="get_passenger",           order=73,           parameters={},           return_values={             {               description="`nil` if the vehicle contains no passenger. To check if there's a driver see [LuaEntity::get_driver](runtime:LuaEntity::get_driver).",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "LuaPlayer"                 }               }             }           },           subclasses={             "Car",             "SpiderVehicle",             "CargoPod"           }         },         {           description="Get the entity ID at the specified position in the turret's priority list.",           format={             takes_table=false           },           name="get_priority_target",           order=100,           parameters={             {               description="The index of the entry to fetch.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaEntityPrototype"             }           }         },         {           description="The radius of this entity.",           format={             takes_table=false           },           name="get_radius",           order=88,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets a LuaRailEnd object for specified end of this rail",           format={             takes_table=false           },           name="get_rail_end",           order=115,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRailEnd"             }           },           subclasses={             "Rail"           }         },         {           description="Get the rail at the end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_end",           order=38,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="The rail entity.",               optional=false,               order=0,               type="LuaEntity"             },             {               description="A rail direction pointing out of the rail segment from the end rail.",               optional=false,               order=1,               type="defines.rail_direction"             }           },           subclasses={             "Rail"           }         },         {           description="Get the length of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_length",           order=40,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           },           subclasses={             "Rail"           }         },         {           description="Get a rail from each rail segment that overlaps with this rail's rail segment.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_overlaps",           order=41,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "Rail"           }         },         {           description="Get all rails of a rail segment this rail is in\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_rails",           order=39,           parameters={             {               description="Selects end of this rail that points to a rail segment end from which to start returning rails",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="Rails of this rail segment",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "Rail"           }         },         {           description="Get the rail signal at the start/end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_signal",           order=36,           parameters={             {               description="The direction of travel relative to this rail.",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             },             {               description="If true, gets the signal at the entrance of the rail segment, otherwise gets the signal at the exit of the rail segment.",               name="in_else_out",               optional=false,               order=1,               type="boolean"             }           },           return_values={             {               description="`nil` if the rail segment doesn't start/end with a signal.",               optional=true,               order=0,               type="LuaEntity"             }           },           subclasses={             "Rail"           }         },         {           description="Get train stop at the start/end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.",           format={             takes_table=false           },           name="get_rail_segment_stop",           order=37,           parameters={             {               description="The direction of travel relative to this rail.",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="`nil` if the rail segment doesn't start/end with a train stop.",               optional=true,               order=0,               type="LuaEntity"             }           },           subclasses={             "Rail"           }         },         {           description="Current recipe being assembled by this machine, if any.",           format={             takes_table=false           },           name="get_recipe",           order=68,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaRecipe"             },             {               description="",               optional=true,               order=1,               type="LuaQualityPrototype"             }           },           subclasses={             "CraftingMachine"           }         },         {           description="Read a single signal from the selected wire connector",           format={             takes_table=false           },           name="get_signal",           order=59,           parameters={             {               description="Additional wire connector ID. If specified, signal will be added to the result",               name="extra_wire_connector_id",               optional=true,               order=2,               type="defines.wire_connector_id"             },             {               description="The signal to read.",               name="signal",               optional=false,               order=0,               type="SignalID"             },             {               description="Wire connector ID from which to get the signal",               name="wire_connector_id",               optional=false,               order=1,               type="defines.wire_connector_id"             }           },           return_values={             {               description="The current value of the signal.",               optional=false,               order=0,               type="int"             }           }         },         {           description="Read all signals from the selected wire connector.",           format={             takes_table=false           },           name="get_signals",           order=60,           parameters={             {               description="Additional wire connector ID. If specified, signals will be added to the result",               name="extra_wire_connector_id",               optional=true,               order=1,               type="defines.wire_connector_id"             },             {               description="Wire connector ID from which to get the signal",               name="wire_connector_id",               optional=false,               order=0,               type="defines.wire_connector_id"             }           },           return_values={             {               description="Current values of all signals.",               optional=true,               order=0,               type={                 complex_type="array",                 value="Signal"               }             }           }         },         {           description="Gets legs of given SpiderVehicle.",           format={             takes_table=false           },           name="get_spider_legs",           order=111,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "SpiderVehicle"           }         },         {           description="The train currently stopped at this train stop, if any.",           format={             takes_table=false           },           name="get_stopped_train",           order=77,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="LuaTrain"             }           },           subclasses={             "TrainStop"           }         },         {           description="The trains scheduled to stop at this train stop.",           format={             takes_table=false           },           name="get_train_stop_trains",           order=76,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaTrain"               }             }           },           subclasses={             "TrainStop"           }         },         {           description="Get a transport line of a belt or belt connectable entity.",           format={             takes_table=false           },           name="get_transport_line",           order=27,           parameters={             {               description="Index of the requested transport line. Transport lines are 1-indexed.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaTransportLine"             }           },           subclasses={             "TransportBeltConnectable"           }         },         {           description="Returns the new entity prototype and its quality.",           format={             takes_table=false           },           name="get_upgrade_target",           order=95,           parameters={},           return_values={             {               description="`nil` if this entity is not marked for upgrade.",               optional=true,               order=0,               type="LuaEntityPrototype"             },             {               description="`nil` if this entity is not marked for upgrade.",               optional=true,               order=1,               type="LuaQualityPrototype"             }           }         },         {           description="Gets a single wire connector of this entity",           format={             takes_table=false           },           name="get_wire_connector",           order=113,           parameters={             {               description="If true and connector does not exist, it will be allocated if possible",               name="or_create",               optional=false,               order=1,               type="boolean"             },             {               description="Identifier of a specific connector to get",               name="wire_connector_id",               optional=false,               order=0,               type="defines.wire_connector_id"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaWireConnector"             }           }         },         {           description="Gets all wire connectors of this entity",           format={             takes_table=false           },           name="get_wire_connectors",           order=114,           parameters={             {               description="If true, it will try to create all connectors possible",               name="or_create",               optional=false,               order=0,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="defines.wire_connector_id",                 value="LuaWireConnector"               }             }           }         },         {           description="Same as [LuaEntity::has_flag](runtime:LuaEntity::has_flag), but targets the inner entity on a entity ghost.",           format={             takes_table=false           },           name="ghost_has_flag",           order=9,           parameters={             {               description="The flag to test.",               name="flag",               optional=false,               order=0,               type="EntityPrototypeFlag"             }           },           return_values={             {               description="`true` if the entity has the given flag set.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "EntityGhost"           }         },         {           description="Test whether this entity's prototype has a certain flag set.\n\n`entity.has_flag(f)` is a shortcut for `entity.prototype.has_flag(f)`.",           format={             takes_table=false           },           name="has_flag",           order=8,           parameters={             {               description="The flag to test.",               name="flag",               optional=false,               order=0,               type="EntityPrototypeFlag"             }           },           return_values={             {               description="`true` if this entity has the given flag set.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Insert fluid into this entity. Fluidbox is chosen automatically.",           format={             takes_table=false           },           name="insert_fluid",           order=82,           parameters={             {               description="Fluid to insert.",               name="fluid",               optional=false,               order=0,               type="Fluid"             }           },           return_values={             {               description="Amount of fluid actually inserted.",               optional=false,               order=0,               type="double"             }           }         },         {           description="The same as [LuaInventory::supports_bar](runtime:LuaInventory::supports_bar) but also works for ghosts.",           format={             takes_table=false           },           name="inventory_supports_bar",           order=124,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="The same as [LuaInventory::supports_filters](runtime:LuaInventory::supports_filters) but also works for ghosts.",           format={             takes_table=false           },           name="inventory_supports_filters",           order=127,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="is_closed",           order=23,           parameters={},           return_values={             {               description="`true` if this gate is currently closed.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Gate"           }         },         {           description="",           format={             takes_table=false           },           name="is_closing",           order=24,           parameters={},           return_values={             {               description="`true` if this gate is currently closing",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Gate"           }         },         {           description="Returns `true` if this entity produces or consumes electricity and is connected to an electric network that has at least one entity that can produce power.",           format={             takes_table=false           },           name="is_connected_to_electric_network",           order=75,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Returns whether a craft is currently in process. It does not indicate whether progress is currently being made, but whether a crafting process has been started in this machine.",           format={             takes_table=false           },           name="is_crafting",           order=20,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "CraftingMachine"           }         },         {           description="The same as [LuaInventory::is_filtered](runtime:LuaInventory::is_filtered) but also works for ghosts.",           format={             takes_table=false           },           name="is_inventory_filtered",           order=128,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="is_opened",           order=21,           parameters={},           return_values={             {               description="`true` if this gate is currently opened.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Gate"           }         },         {           description="",           format={             takes_table=false           },           name="is_opening",           order=22,           parameters={},           return_values={             {               description="`true` if this gate is currently opening.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Gate"           }         },         {           description="Checks if this rail and other rail both belong to the same rail block.",           format={             takes_table=false           },           name="is_rail_in_same_rail_block_as",           order=43,           parameters={             {               description="",               name="other_rail",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Rail"           }         },         {           description="Checks if this rail and other rail both belong to the same rail segment.",           format={             takes_table=false           },           name="is_rail_in_same_rail_segment_as",           order=42,           parameters={             {               description="",               name="other_rail",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Rail"           }         },         {           description="Is this entity or tile ghost or item request proxy registered for construction? If false, it means a construction robot has been dispatched to build the entity, or it is not an entity that can be constructed.",           format={             takes_table=false           },           name="is_registered_for_construction",           order=104,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this entity registered for deconstruction with this force? If false, it means a construction robot has been dispatched to deconstruct it, or it is not marked for deconstruction. The complexity is effectively O(1) - it depends on the number of objects targeting this entity which should be small enough.",           format={             takes_table=false           },           name="is_registered_for_deconstruction",           order=105,           parameters={             {               description="The force construction manager to check.",               name="force",               optional=false,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this entity registered for repair? If false, it means a construction robot has been dispatched to repair it, or it is not damaged. This is worst-case O(N) complexity where N is the current number of things in the repair queue.",           format={             takes_table=false           },           name="is_registered_for_repair",           order=107,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this entity registered for upgrade? If false, it means a construction robot has been dispatched to upgrade it, or it is not marked for upgrade. This is worst-case O(N) complexity where N is the current number of things in the upgrade queue.",           format={             takes_table=false           },           name="is_registered_for_upgrade",           order=106,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="launch_rocket",           order=31,           parameters={             {               description="If provided, must be of `character` type.",               name="character",               optional=true,               order=1,               type="LuaEntity"             },             {               description="",               name="destination",               optional=true,               order=0,               type="CargoDestination"             }           },           raises={             {               description="Raised if the rocket launch was successfully initiated.",               name="on_rocket_launch_ordered",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="`true` if the rocket was successfully launched. Return value of `false` means the silo is not ready for launch.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "RocketSilo"           }         },         {           description="Mines this entity.\n\n'Standard' operation is to keep calling `LuaEntity.mine` with an inventory until all items are transferred and the items dealt with.\n\nThe result of mining the entity (the item(s) it produces when mined) will be dropped on the ground if they don't fit into the provided inventory. If no inventory is provided, the items will be destroyed.",           format={             table_optional=true,             takes_table=true           },           name="mine",           order=98,           parameters={             {               description="If true, when the item(s) don't fit into the given inventory the entity is force mined. If false, the mining operation fails when there isn't enough room to transfer all of the items into the inventory. Defaults to false. This is ignored and acts as `true` if no inventory is provided.",               name="force",               optional=true,               order=1,               type="boolean"             },             {               description="If true, the minable state of the entity is ignored. Defaults to `false`. If false, an entity that isn't minable (set as not-minable in the prototype or isn't minable for other reasons) will fail to be mined.",               name="ignore_minable",               optional=true,               order=3,               type="boolean"             },             {               description="If provided the item(s) will be transferred into this inventory. If provided, this must be an inventory created with [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) or be a basic inventory owned by some entity.",               name="inventory",               optional=true,               order=0,               type="LuaInventory"             },             {               description="If true, [script_raised_destroy](runtime:script_raised_destroy) will be raised. Defaults to `true`.",               name="raise_destroyed",               optional=true,               order=2,               type="boolean"             }           },           raises={             {               description="Raised if the `raise_destroyed` flag was set and the entity was successfully mined.",               name="script_raised_destroy",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether mining succeeded.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sets the entity to be deconstructed by construction robots.",           format={             takes_table=false           },           name="order_deconstruction",           order=14,           parameters={             {               description="The force whose robots are supposed to do the deconstruction.",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. An index of `1` adds the action to the latest undo action on the stack. Defaults to putting it into the appropriate undo item automatically if one is not specified.",               name="item_index",               optional=true,               order=2,               type="uint"             },             {               description="The player to set the last_user to, if any. Also the player whose undo queue this action should be added to.",               name="player",               optional=true,               order=1,               type="PlayerIdentification"             }           },           raises={             {               description="Raised if the entity was successfully marked for deconstruction.",               name="on_marked_for_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="if the entity was marked for deconstruction.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sets the entity to be upgraded by construction robots.",           format={             table_optional=false,             takes_table=true           },           name="order_upgrade",           order=17,           parameters={             {               description="The force whose robots are supposed to do the upgrade.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",               name="item_index",               optional=true,               order=3,               type="uint"             },             {               description="The player whose undo queue this action should be added to.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="The prototype of the entity to upgrade to.",               name="target",               optional=false,               order=0,               type="EntityWithQualityID"             }           },           raises={             {               description="Raised if the entity was successfully marked for upgrade.",               name="on_marked_for_upgrade",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the entity was marked for upgrade.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Plays a note with the given instrument and note.",           format={             takes_table=false           },           name="play_note",           order=64,           parameters={             {               description="",               name="instrument",               optional=false,               order=0,               type="uint"             },             {               description="",               name="note",               optional=false,               order=1,               type="uint"             },             {               description="",               name="stop_playing_sounds",               optional=true,               order=2,               type="boolean"             }           },           return_values={             {               description="Whether the request is valid. The sound may or may not be played depending on polyphony settings.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "ProgrammableSpeaker"           }         },         {           description="Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional units.",           format={             takes_table=false           },           name="release_from_spawner",           order=91,           parameters={},           return_values={},           subclasses={             "Unit",             "SpiderUnit"           }         },         {           description="Remove fluid from this entity.\n\nIf temperature is given only fluid matching that exact temperature is removed. If minimum and maximum is given fluid within that range is removed.",           format={             table_optional=false,             takes_table=true           },           name="remove_fluid",           order=81,           parameters={             {               description="Amount to remove",               name="amount",               optional=false,               order=1,               type="double"             },             {               description="",               name="maximum_temperature",               optional=true,               order=3,               type="double"             },             {               description="",               name="minimum_temperature",               optional=true,               order=2,               type="double"             },             {               description="Fluid prototype name.",               name="name",               optional=false,               order=0,               type="string"             },             {               description="",               name="temperature",               optional=true,               order=4,               type="double"             }           },           return_values={             {               description="Amount of fluid actually removed.",               optional=false,               order=0,               type="double"             }           }         },         {           description="Remove an offer from a market.\n\nThe other offers are moved down to fill the gap created by removing the offer, which decrements the overall size of the offer array.",           format={             takes_table=false           },           name="remove_market_item",           order=11,           parameters={             {               description="Index of offer to remove.",               name="offer",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="`true` if the offer was successfully removed; `false` when the given index was not valid.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "Market"           }         },         {           description="",           format={             takes_table=false           },           name="request_to_close",           order=26,           parameters={             {               description="The force that requests the gate to be closed.",               name="force",               optional=false,               order=0,               type="ForceID"             }           },           return_values={},           subclasses={             "Gate"           }         },         {           description="",           format={             takes_table=false           },           name="request_to_open",           order=25,           parameters={             {               description="Extra ticks to stay open.",               name="extra_time",               optional=true,               order=1,               type="uint"             },             {               description="The force that requests the gate to be open.",               name="force",               optional=false,               order=0,               type="ForceID"             }           },           return_values={},           subclasses={             "Gate"           }         },         {           description="Revive a ghost, which turns it from a ghost into a real entity or tile.",           format={             table_optional=true,             takes_table=true           },           name="revive",           order=32,           parameters={             {               description="If true, and an entity ghost; [script_raised_revive](runtime:script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](runtime:script_raised_set_tiles) will be called.",               name="raise_revive",               optional=true,               order=1,               type="boolean"             },             {               description="If `true` the function will return item request proxy as the third return value.",               name="return_item_request_proxy",               optional=true,               order=0,               type="boolean"             }           },           raises={             {               description="Raised if this was an entity ghost and the `raise_revive` flag was set and the entity was successfully revived.",               name="script_raised_revive",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if this was a tile ghost and the `raise_revive` flag was set and the tile was successfully revived.",               name="script_raised_set_tiles",               optional=true,               order=1,               timeframe="instantly"             }           },           return_values={             {               description="Any items the new real entity collided with or `nil` if the ghost could not be revived.",               optional=true,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="uint"               }             },             {               description="The revived entity if an entity ghost was successfully revived.",               optional=true,               order=1,               type="LuaEntity"             },             {               description="The item request proxy if it was requested with `return_item_request_proxy`.",               optional=true,               order=2,               type="LuaEntity"             }           },           subclasses={             "Ghost"           }         },         {           description="Rotates this entity as if the player rotated it.",           format={             table_optional=true,             takes_table=true           },           name="rotate",           order=70,           parameters={             {               description="",               name="by_player",               optional=true,               order=1,               type="PlayerIdentification"             },             {               description="If `true`, rotate the entity in the counter-clockwise direction.",               name="reverse",               optional=true,               order=0,               type="boolean"             }           },           raises={             {               description="Raised if the `by_player` argument was given and the rotation was successful.",               name="on_player_rotated_entity",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the rotation was successful.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Set the source of this beam.",           format={             takes_table=false           },           name="set_beam_source",           order=85,           parameters={             {               description="",               name="source",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "MapPosition"                 }               }             }           },           return_values={},           subclasses={             "Beam"           }         },         {           description="Set the target of this beam.",           format={             takes_table=false           },           name="set_beam_target",           order=87,           parameters={             {               description="",               name="target",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "MapPosition"                 }               }             }           },           return_values={},           subclasses={             "Beam"           }         },         {           description="Sets the driver of this vehicle.\n\nThis differs from [LuaEntity::set_passenger](runtime:LuaEntity::set_passenger) in that the passenger can't drive the vehicle.",           format={             takes_table=false           },           name="set_driver",           order=72,           parameters={             {               description="The new driver. Writing `nil` ejects the current driver, if any.",               name="driver",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "PlayerIdentification",                   "nil"                 }               }             }           },           raises={             {               description="",               name="on_player_driving_changed_state",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={},           subclasses={             "Vehicle"           }         },         {           description="Set the filter for a slot in an inserter (ItemFilter), loader (ItemFilter), mining drill (EntityID), asteroid collector (AsteroidChunkID) or logistic storage container (ItemWithQualityID). The entity must allow filters.",           format={             takes_table=false           },           name="set_filter",           order=49,           parameters={             {               description="The item or entity to filter, or `nil` to clear the filter.",               name="filter",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "ItemWithQualityID",                   "EntityID",                   "AsteroidChunkID"                 }               }             },             {               description="Index of the slot to set the filter for.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets fluid to the i-th fluid storage.\n\nFluid storages that are part of FluidBoxes (also available through [LuaFluidBox](runtime:LuaFluidBox)) may reject some fluids if they do not match filters or are above the FluidBox volume. To verify how much fluid was set a return value can be used which is the same as value that would be returned by [LuaEntity::get_fluid](runtime:LuaEntity::get_fluid).",           format={             takes_table=false           },           name="set_fluid",           order=133,           parameters={             {               description="Fluid to set. Fluid storage will be cleared if this is not provided.",               name="fluid",               optional=true,               order=1,               type="Fluid"             },             {               description="Fluid storage index. Valid values are from 1 up to [LuaEntity::fluids_count](runtime:LuaEntity::fluids_count).",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Fluid in this storage after it was set. nil if fluid storage is empty.",               optional=true,               order=0,               type="Fluid"             }           }         },         {           description="Sets the heat setting for this heat interface.",           format={             takes_table=false           },           name="set_heat_setting",           order=55,           parameters={             {               description="The new setting.",               name="filter",               optional=false,               order=0,               type="HeatSetting"             }           },           return_values={},           subclasses={             "HeatInterface"           }         },         {           description="Sets the filter for this infinity container at the given index.",           format={             takes_table=false           },           name="set_infinity_container_filter",           order=51,           parameters={             {               description="The new filter, or `nil` to clear the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "InfinityInventoryFilter",                   "nil"                 }               }             },             {               description="The index to set.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={},           subclasses={             "InfinityContainer",             "InfinityCargoWagon"           }         },         {           description="Sets the filter for this infinity pipe.",           format={             takes_table=false           },           name="set_infinity_pipe_filter",           order=53,           parameters={             {               description="The new filter, or `nil` to clear the filter.",               name="filter",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "InfinityPipeFilter",                   "nil"                 }               }             }           },           return_values={},           subclasses={             "InfinityPipe"           }         },         {           description="The same as [LuaInventory::set_bar](runtime:LuaInventory::set_bar) but also works for ghosts.",           format={             takes_table=false           },           name="set_inventory_bar",           order=126,           parameters={             {               description="The new limit. Omitting this parameter or passing `nil` will clear the limit.",               name="bar",               optional=true,               order=1,               type="uint"             },             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={}         },         {           description="The same as [LuaInventory::set_filter](runtime:LuaInventory::set_filter) but also works for ghosts.",           format={             takes_table=false           },           name="set_inventory_filter",           order=131,           parameters={             {               description="The new filter. `nil` erases any existing filter.",               name="filter",               optional=false,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "nil"                 }               }             },             {               description="The item stack index.",               name="index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="If the filter was allowed to be set.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sets inventory size override. When set, supported entity will ignore inventory size from prototype and will instead keep inventory size equal to the override. Setting `nil` will restore default inventory size.",           format={             takes_table=false           },           name="set_inventory_size_override",           order=135,           parameters={             {               description="",               name="inventory_index",               optional=false,               order=0,               type="defines.inventory"             },             {               description="Items that would be deleted due to change of inventory size will be transferred to this inventory. Must be a script inventory or inventory of other entity. Inventory references obtained from proxy container are not allowed.",               name="overflow",               optional=true,               order=2,               type="LuaInventory"             },             {               description="",               name="size_override",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint16",                   "nil"                 }               }             }           },           return_values={},           subclasses={             "ContainerEntity",             "CargoWagon"           }         },         {           description="Sets the passenger of this car, spidertron, or cargo pod.\n\nThis differs from [LuaEntity::get_driver](runtime:LuaEntity::get_driver) in that the passenger can't drive the car.",           format={             takes_table=false           },           name="set_passenger",           order=74,           parameters={             {               description="The new passenger. Writing `nil` ejects the current passenger, if any.",               name="passenger",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "PlayerIdentification",                   "nil"                 }               }             }           },           raises={             {               description="",               name="on_player_driving_changed_state",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={},           subclasses={             "Car",             "SpiderVehicle",             "CargoPod"           }         },         {           description="Set the entity ID name at the specified position in the turret's priority list.",           format={             takes_table=false           },           name="set_priority_target",           order=101,           parameters={             {               description="The name of the entity prototype, or `nil` to clear the entry.",               name="entity_id",               optional=true,               order=1,               type="EntityID"             },             {               description="The index of the entry to set.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the given recipe in this assembly machine.",           format={             takes_table=false           },           name="set_recipe",           order=69,           parameters={             {               description="The quality. If not provided `normal` is used.",               name="quality",               optional=true,               order=1,               type="QualityID"             },             {               description="The new recipe. Writing `nil` clears the recipe, if any.",               name="recipe",               optional=true,               order=0,               type="RecipeID"             }           },           return_values={             {               description="Any items removed from this entity as a result of setting the recipe.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           },           subclasses={             "AssemblingMachine"           }         },         {           description="Revives a ghost silently, so the revival makes no sound and no smoke is created.",           format={             table_optional=true,             takes_table=true           },           name="silent_revive",           order=33,           parameters={             {               description="If true, and an entity ghost; [script_raised_revive](runtime:script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](runtime:script_raised_set_tiles) will be called.",               name="raise_revive",               optional=true,               order=0,               type="boolean"             }           },           raises={             {               description="Raised if this was an entity ghost and the `raise_revive` flag was set and the entity was successfully revived.",               name="script_raised_revive",               optional=true,               order=0,               timeframe="instantly"             },             {               description="Raised if this was a tile ghost and the `raise_revive` flag was set and the tile was successfully revived.",               name="script_raised_set_tiles",               optional=true,               order=1,               timeframe="instantly"             }           },           return_values={             {               description="Any items the new real entity collided with or `nil` if the ghost could not be revived.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             },             {               description="The revived entity if an entity ghost was successfully revived.",               optional=true,               order=1,               type="LuaEntity"             },             {               description="The item request proxy.",               optional=true,               order=2,               type="LuaEntity"             }           },           subclasses={             "Ghost"           }         },         {           description="Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".",           format={             takes_table=false           },           name="spawn_decorations",           order=99,           parameters={},           return_values={}         },         {           description="Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style. Starts animating the opacity of the speech bubble towards zero, and destroys the entity when it hits zero.",           format={             takes_table=false           },           name="start_fading_out",           order=94,           parameters={},           return_values={},           subclasses={             "SpeechBubble"           }         },         {           description="Sets the [speed](runtime:LuaEntity::speed) of the given SpiderVehicle to zero. Notably does not clear its [autopilot_destination](runtime:LuaEntity::autopilot_destination), which it will continue moving towards if set.",           format={             takes_table=false           },           name="stop_spider",           order=112,           parameters={},           return_values={},           subclasses={             "SpiderVehicle"           }         },         {           description="Whether this entity supports a backer name.",           format={             takes_table=false           },           name="supports_backer_name",           order=61,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this entity marked for deconstruction?",           format={             takes_table=false           },           name="to_be_deconstructed",           order=16,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this entity marked for upgrade?",           format={             takes_table=false           },           name="to_be_upgraded",           order=19,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment grid.\n\nThis property can also be read and written on the equipment grid of this entity.",           format={             takes_table=false           },           name="toggle_equipment_movement_bonus",           order=92,           parameters={},           return_values={}         },         {           description="Reconnect loader, beacon, cliff and mining drill connections to entities that might have been teleported out or in by the script. The game doesn't do this automatically as we don't want to lose performance by checking this in normal games.",           format={             takes_table=false           },           name="update_connections",           order=67,           parameters={},           return_values={}         }       },       name="LuaEntity",       operators={},       order=38,       parent="LuaControl"     },     {       abstract=false,       attributes={         {           description="A table of pollutions amounts that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution, indexed by the name of each absorbed pollution type.",           name="absorptions_to_join_attack",           optional=true,           order=176,           read_type={             complex_type="dictionary",             key="string",             value="float"           },           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="",           name="accepted_seeds",           optional=true,           order=238,           read_type={             complex_type="array",             value="string"           },           subclasses={             "AgriculturalTower"           }         },         {           description="The active energy usage of this rocket silo or combinator prototype.",           name="active_energy_usage",           optional=true,           order=212,           read_type="double",           subclasses={             "RocketSilo",             "Combinator"           }         },         {           description="Entities this entity can be pasted onto in addition to the normal allowed ones.",           name="additional_pastable_entities",           optional=false,           order=43,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="Whether this unit prototype is affected by tile walking speed modifiers.",           name="affected_by_tiles",           optional=true,           order=182,           read_type="boolean",           subclasses={             "Unit"           }         },         {           description="",           name="agricultural_tower_radius",           optional=true,           order=226,           read_type="double",           subclasses={             "AgriculturalTower"           }         },         {           description="The air resistance of this rolling stock prototype.",           name="air_resistance",           optional=true,           order=68,           read_type="double",           subclasses={             "RollingStock"           }         },         {           description="The alert icon scale of this entity prototype.",           name="alert_icon_scale",           optional=false,           order=186,           read_type="float"         },         {           description="The alert icon shift of this entity prototype.",           name="alert_icon_shift",           optional=false,           order=185,           read_type="Vector"         },         {           description="Whether this turret raises an alert when attacking",           name="alert_when_attacking",           optional=true,           order=125,           read_type="boolean",           subclasses={             "Turret"           }         },         {           description="Whether this entity raises an alert when damaged.",           name="alert_when_damaged",           optional=true,           order=124,           read_type="boolean",           subclasses={             "EntityWithHealth"           }         },         {           description="Whether this market allows access to all forces or just friendly ones.",           name="allow_access_to_all_forces",           optional=true,           order=190,           read_type="boolean",           subclasses={             "Market"           }         },         {           description="Whether this inserter allows burner leeching.",           name="allow_burner_leech",           optional=true,           order=107,           read_type="boolean",           subclasses={             "Inserter"           }         },         {           description="When false copy-paste is not allowed for this entity.",           name="allow_copy_paste",           optional=false,           order=44,           read_type="boolean"         },         {           description="Whether this inserter allows custom pickup and drop vectors.",           name="allow_custom_vectors",           optional=true,           order=106,           read_type="boolean",           subclasses={             "Inserter"           }         },         {           description="Whether this vehicle allows passengers.",           name="allow_passengers",           optional=true,           order=193,           read_type="boolean",           subclasses={             "Vehicle"           }         },         {           description="True if this entity-with-owner's is_military_target can be changed run-time (on the entity, not on the prototype itself)",           name="allow_run_time_change_of_is_military_target",           optional=true,           order=201,           read_type="boolean",           subclasses={             "EntityWithOwner"           }         },         {           description="The allowed module effects for this entity, if any.",           name="allowed_effects",           optional=true,           order=130,           read_type={             complex_type="dictionary",             key="string",             value="boolean"           }         },         {           description="The allowed module categories for this entity, if any.",           name="allowed_module_categories",           optional=true,           order=131,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           }         },         {           description="Whether the lamp is always on (except when out of power or turned off by the circuit network).",           name="always_on",           optional=true,           order=161,           read_type="boolean",           subclasses={             "Lamp"           }         },         {           description="Name of the ammo category of this land mine.",           name="ammo_category",           optional=true,           order=147,           read_type="string",           subclasses={             "LandMine"           }         },         {           description="The animation speed coefficient of this belt connectable prototype.",           name="animation_speed_coefficient",           optional=true,           order=209,           read_type="double",           subclasses={             "BeltConnectable"           }         },         {           description="",           name="arm_angular_speed_cap_base",           optional=true,           order=280,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_angular_speed_cap_quality_scaling",           optional=true,           order=281,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_color_gradient",           optional=true,           order=288,           read_type={             complex_type="array",             value="Color"           },           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_count_base",           optional=true,           order=273,           read_type="uint",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_count_quality_scaling",           optional=true,           order=274,           read_type="uint",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_energy_usage",           optional=true,           order=270,           read_type="double",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_inventory_size_quality_increase",           optional=true,           order=267,           read_type="uint",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_slow_energy_usage",           optional=true,           order=271,           read_type="double",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_speed_base",           optional=true,           order=278,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="arm_speed_quality_scaling",           optional=true,           order=279,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="The attack parameters for this entity, if any.",           name="attack_parameters",           optional=true,           order=32,           read_type="AttackParameters"         },         {           description="",           name="attack_reaction",           optional=true,           order=248,           read_type={             complex_type="array",             value="AttackReactionItem"           },           subclasses={             "EntityWithHealth"           }         },         {           description="The attack result of this entity, if any.",           name="attack_result",           optional=true,           order=30,           read_type={             complex_type="array",             value="TriggerItem"           }         },         {           description="",           name="auto_setup_collision_box",           optional=false,           order=232,           read_type="boolean",           subclasses={             "Corpse"           }         },         {           description="The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret.",           name="automated_ammo_count",           optional=true,           order=157,           read_type="uint",           subclasses={             "ArtilleryTurret",             "AmmoTurret"           }         },         {           description="Whether this spider vehicle prototype automatically cycles weapons.",           name="automatic_weapon_cycling",           optional=true,           order=206,           read_type="boolean",           subclasses={             "SpiderVehicle"           }         },         {           description="Autoplace specification for this entity prototype, if any.",           name="autoplace_specification",           optional=true,           order=27,           read_type="AutoplaceSpecification"         },         {           description="The beacon counter used by effect receiver when deciding which sample to take from beacon profile.",           name="beacon_counter",           optional=true,           order=120,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="total"               },               {                 complex_type="literal",                 value="same_type"               }             }           },           subclasses={             "Beacon"           }         },         {           description="",           name="belt_distance",           optional=true,           order=153,           read_type="double",           subclasses={             "Loader"           }         },         {           description="",           name="belt_length",           optional=true,           order=154,           read_type="double",           subclasses={             "Loader"           }         },         {           description="The speed of this transport belt.",           name="belt_speed",           optional=true,           order=28,           read_type="double",           subclasses={             "TransportBeltConnectable"           }         },         {           description="The boiler operation mode of this boiler prototype.",           name="boiler_mode",           optional=true,           order=97,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="heat-fluid-inside"               },               {                 complex_type="literal",                 value="output-to-separate-pipe"               }             }           },           subclasses={             "Boiler"           }         },         {           description="The braking force of this vehicle prototype.",           name="braking_force",           optional=true,           order=67,           read_type="double",           subclasses={             "Vehicle"           }         },         {           description="The evolution requirement to build this entity as a base when expanding enemy bases.",           name="build_base_evolution_requirement",           optional=false,           order=51,           read_type="double"         },         {           description="",           name="build_distance",           optional=true,           order=254,           read_type="uint",           subclasses={             "Character"           }         },         {           description="The log2 of grid size of the building",           name="building_grid_bit_shift",           optional=false,           order=89,           read_type="uint"         },         {           description="Whether this inserter is a bulk-type.",           name="bulk",           optional=true,           order=102,           read_type="boolean",           subclasses={             "Inserter"           }         },         {           description="The burner energy source prototype this entity uses, if any.",           name="burner_prototype",           optional=true,           order=83,           read_type="LuaBurnerPrototype"         },         {           description="Whether this generator prototype burns fluid.",           name="burns_fluid",           optional=true,           order=92,           read_type="boolean",           subclasses={             "Generator"           }         },         {           description="",           name="call_for_help_radius",           optional=true,           order=164,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="Whether this unit prototype can open gates.",           name="can_open_gates",           optional=true,           order=181,           read_type="boolean",           subclasses={             "Unit"           }         },         {           description="",           name="captured_spawner_entity",           optional=true,           order=239,           read_type="LuaEntityPrototype",           subclasses={             "EnemySpawnerPrototype"           }         },         {           description="The chain shooting cooldown modifier of this spider vehicle prototype.",           name="chain_shooting_cooldown_modifier",           optional=true,           order=207,           read_type="double",           subclasses={             "SpiderVehicle"           }         },         {           description="",           name="character_corpse",           optional=true,           order=266,           read_type="LuaEntityPrototype",           subclasses={             "Character"           }         },         {           description="The chunk exploration radius of this vehicle prototype.",           name="chunk_exploration_radius",           optional=true,           order=208,           read_type="double",           subclasses={             "Vehicle"           }         },         {           description="The item prototype name used to destroy this cliff.",           name="cliff_explosive_prototype",           optional=true,           order=172,           read_type="string",           subclasses={             "Cliff"           }         },         {           description="",           name="collection_box_offset",           optional=true,           order=276,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="The bounding box used for collision checking.",           name="collision_box",           optional=false,           order=7,           read_type="BoundingBox"         },         {           description="The collision masks this entity uses",           name="collision_mask",           optional=false,           order=13,           read_type="CollisionMask"         },         {           description="Does this prototype collision mask collide with itself?",           name="collision_mask_collides_with_self",           optional=false,           order=127,           read_type="boolean"         },         {           description="Does this prototype collision mask collide with tiles only?",           name="collision_mask_collides_with_tiles_only",           optional=false,           order=128,           read_type="boolean"         },         {           description="Does this prototype collision mask consider tile transitions?",           name="collision_mask_considers_tile_transitions",           optional=false,           order=129,           read_type="boolean"         },         {           description="The color of the prototype, if any.",           name="color",           optional=true,           order=126,           read_type="Color"         },         {           description="",           name="connection_distance",           optional=true,           order=221,           read_type="double",           subclasses={             "RollingStock"           }         },         {           description="The construction radius for this roboport prototype.",           name="construction_radius",           optional=true,           order=143,           read_type="double",           subclasses={             "Roboport"           }         },         {           description="The energy consumption of this car prototype.",           name="consumption",           optional=true,           order=65,           read_type="double",           subclasses={             "Car"           }         },         {           description="",           name="container_distance",           optional=true,           order=152,           read_type="double",           subclasses={             "Loader"           }         },         {           description="Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype name.",           name="corpses",           optional=true,           order=17,           read_type={             complex_type="dictionary",             key="string",             value="LuaEntityPrototype"           },           subclasses={             "EntityWithHealth"           }         },         {           description="If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter.",           name="count_as_rock_for_filtered_deconstruction",           optional=true,           order=114,           read_type="boolean",           subclasses={             "SimpleEntity"           }         },         {           description="The [crafting categories](runtime:LuaRecipeCategoryPrototype) this entity prototype supports.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",           name="crafting_categories",           optional=true,           order=61,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           },           subclasses={             "CraftingMachine",             "Character"           }         },         {           description="The crane energy usage of this agricultural tower prototype.",           name="crane_energy_usage",           optional=true,           order=214,           read_type="double",           subclasses={             "AgriculturalTower"           }         },         {           description="If this prototype will attempt to create a ghost of itself on death.\n\nIf this is false then a ghost will never be made, if it's true a ghost may be made.",           name="create_ghost_on_death",           optional=false,           order=146,           read_type="boolean"         },         {           description="The trigger to run when this entity is created, if any.",           name="created_effect",           optional=true,           order=47,           read_type={             complex_type="array",             value="TriggerItem"           }         },         {           description="The smoke trigger run when this entity is built, if any.",           name="created_smoke",           optional=true,           order=46,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="initial_height",                 optional=false,                 order=3,                 type="float"               },               {                 description="",                 name="max_radius",                 optional=true,                 order=4,                 type="float"               },               {                 description="",                 name="offset_deviation",                 optional=false,                 order=2,                 type="BoundingBox"               },               {                 description="",                 name="offsets",                 optional=false,                 order=1,                 type={                   complex_type="array",                   value="Vector"                 }               },               {                 description="",                 name="smoke_name",                 optional=false,                 order=0,                 type="string"               },               {                 description="",                 name="speed",                 optional=false,                 order=5,                 type="Vector"               },               {                 description="",                 name="speed_from_center",                 optional=false,                 order=10,                 type="float"               },               {                 description="",                 name="speed_from_center_deviation",                 optional=false,                 order=11,                 type="float"               },               {                 description="",                 name="speed_multiplier",                 optional=false,                 order=6,                 type="float"               },               {                 description="",                 name="speed_multiplier_deviation",                 optional=false,                 order=7,                 type="float"               },               {                 description="",                 name="starting_frame",                 optional=false,                 order=8,                 type="float"               },               {                 description="",                 name="starting_frame_deviation",                 optional=false,                 order=9,                 type="float"               }             }           }         },         {           description="",           name="damage_hit_tint",           optional=true,           order=265,           read_type="Color",           subclasses={             "Character"           }         },         {           description="",           name="damaged_trigger_effect",           optional=true,           order=247,           read_type={             complex_type="array",             value="TriggerEffectItem"           },           subclasses={             "EntityWithHealth"           }         },         {           description="Value between 0 and 1 darkness where all lamps of this lamp prototype are off.",           name="darkness_for_all_lamps_off",           optional=true,           order=160,           read_type="float",           subclasses={             "Lamp"           }         },         {           description="Value between 0 and 1 darkness where all lamps of this lamp prototype are on.",           name="darkness_for_all_lamps_on",           optional=true,           order=159,           read_type="float",           subclasses={             "Lamp"           }         },         {           description="",           name="deposit_radius",           optional=true,           order=277,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="Whether this generator prototype destroys non-fuel fluids.",           name="destroy_non_fuel_fluid",           optional=true,           order=94,           read_type="boolean",           subclasses={             "Generator"           }         },         {           description="The distraction cooldown of this unit prototype.",           name="distraction_cooldown",           optional=true,           order=183,           read_type="uint",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The distribution effectivity for this beacon prototype.",           name="distribution_effectivity",           optional=true,           order=117,           read_type="double",           subclasses={             "Beacon"           }         },         {           description="The distribution effectivity bonus per quality level for this beacon prototype.",           name="distribution_effectivity_bonus_per_quality_level",           optional=true,           order=118,           read_type="double",           subclasses={             "Beacon"           }         },         {           description="The door opening speed for this rocket silo prototype.",           name="door_opening_speed",           optional=true,           order=136,           read_type="double",           subclasses={             "RocketSilo"           }         },         {           description="Whether this logistics or construction robot renders its cargo when flying.",           name="draw_cargo",           optional=true,           order=78,           read_type="boolean",           subclasses={             "RobotWithLogisticsInterface"           }         },         {           description="Extra vertical space needed to see the whole entity in GUIs. This is used to calculate the correct zoom and positioning in the entity info gui, for example in the entity tooltip.",           name="drawing_box_vertical_extension",           optional=false,           order=11,           read_type="double"         },         {           description="",           name="drop_item_distance",           optional=true,           order=255,           read_type="uint",           subclasses={             "Character"           }         },         {           description="",           name="dying_explosion",           optional=true,           order=245,           read_type={             complex_type="array",             value="ExplosionDefinition"           },           subclasses={             "EntityWithHealth"           }         },         {           description="The dying time of this corpse prototype.",           name="dying_speed",           optional=true,           order=211,           read_type="float",           subclasses={             "Corpse"           }         },         {           description="",           name="dying_trigger_effect",           optional=true,           order=246,           read_type={             complex_type="array",             value="TriggerEffectItem"           },           subclasses={             "EntityWithHealth"           }         },         {           description="Effect receiver prototype of this crafting machine, lab, or mining drill.",           name="effect_receiver",           optional=true,           order=189,           read_type="EffectReceiver",           subclasses={             "CraftingMachine",             "Lab",             "MiningDrill"           }         },         {           description="The effectivity of this car prototype, generator prototype.",           name="effectivity",           optional=true,           order=64,           read_type="double",           subclasses={             "Car",             "Generator"           }         },         {           description="The electric energy source prototype this entity uses, if any.",           name="electric_energy_source_prototype",           optional=true,           order=84,           read_type="LuaElectricEnergySourcePrototype"         },         {           description="A table of pollution emissions per second the entity will create, grouped by the name of the pollution type.",           name="emissions_per_second",           optional=false,           order=16,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="The enemy map color used when charting this entity.",           name="enemy_map_color",           optional=false,           order=50,           read_type="Color"         },         {           description="The energy used per hit point taken for this vehicle during collisions.",           name="energy_per_hit_point",           optional=true,           order=145,           read_type="double",           subclasses={             "Vehicle"           }         },         {           description="The energy consumed per tile moved for this flying robot.",           name="energy_per_move",           optional=true,           order=79,           read_type="double",           subclasses={             "FlyingRobot"           }         },         {           description="The energy consumed per tick for this flying robot.",           name="energy_per_tick",           optional=true,           order=80,           read_type="double",           subclasses={             "FlyingRobot"           }         },         {           description="The direct energy usage of this entity, if any.",           name="energy_usage",           optional=true,           order=63,           read_type="double"         },         {           description="",           name="energy_usage_quality_scaling",           optional=true,           order=272,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="The engine starting speed for this rocket silo rocket prototype.",           name="engine_starting_speed",           optional=true,           order=139,           read_type="double",           subclasses={             "RocketSiloRocket"           }         },         {           description="",           name="enter_vehicle_distance",           optional=true,           order=260,           read_type="double",           subclasses={             "Character"           }         },         {           description="Whether this explosion has a beam.",           name="explosion_beam",           optional=true,           order=121,           read_type="double",           subclasses={             "Explosion"           }         },         {           description="Whether this explosion rotates.",           name="explosion_rotate",           optional=true,           order=122,           read_type="double",           subclasses={             "Explosion"           }         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=233,           read_type="LuaEntityPrototype"         },         {           description="The group of mutually fast-replaceable entities, if any.",           name="fast_replaceable_group",           optional=true,           order=22,           read_type="string"         },         {           description="The filter count of this inserter, loader, mining drill or logistic chest. For logistic containers, `nil` means no limit.",           name="filter_count",           optional=true,           order=115,           read_type="uint",           subclasses={             "Inserter",             "Loader",             "LogisticContainer",             "MiningDrill"           }         },         {           description="The final attack result for this projectile.",           name="final_attack_result",           optional=true,           order=31,           read_type={             complex_type="array",             value="TriggerItem"           },           subclasses={             "Projectile"           }         },         {           description="The fixed recipe name for this assembling machine prototype, if any.",           name="fixed_recipe",           optional=true,           order=142,           read_type="string",           subclasses={             "AssemblingMachine"           }         },         {           description="The flags for this entity prototype.",           name="flags",           optional=false,           order=41,           read_type="EntityPrototypeFlags"         },         {           description="",           name="flow_scaling",           optional=true,           order=105,           read_type="boolean",           subclasses={             "Pump"           }         },         {           description="The fluid capacity of this entity or 0 if this entity doesn't support fluids.\n\nCrafting machines will report 0 due to their fluid capacity being whatever a given recipe needs.",           name="fluid_capacity",           optional=false,           order=98,           read_type="double"         },         {           description="The fluid energy source prototype this entity uses, if any.",           name="fluid_energy_source_prototype",           optional=true,           order=86,           read_type="LuaFluidEnergySourcePrototype"         },         {           description="",           name="fluid_source_offset",           optional=true,           order=104,           read_type="Vector",           subclasses={             "OffshorePump"           }         },         {           description="The fluid usage of this generator prototype. This property is deprecated in favor of [LuaEntityPrototype::get_fluid_usage_per_tick](runtime:LuaEntityPrototype::get_fluid_usage_per_tick) and should not be used.",           name="fluid_usage_per_tick",           optional=true,           order=90,           read_type="double",           subclasses={             "Generator"           }         },         {           description="The fluidbox prototypes for this entity.",           name="fluidbox_prototypes",           optional=false,           order=150,           read_type={             complex_type="array",             value="LuaFluidBoxPrototype"           }         },         {           description="The flying acceleration for this rocket silo rocket prototype.",           name="flying_acceleration",           optional=true,           order=141,           read_type="double",           subclasses={             "RocketSiloRocket"           }         },         {           description="The flying speed for this rocket silo rocket prototype.",           name="flying_speed",           optional=true,           order=140,           read_type="double",           subclasses={             "RocketSiloRocket"           }         },         {           description="The friction of this vehicle prototype.",           name="friction_force",           optional=true,           order=66,           read_type="double",           subclasses={             "Vehicle"           }         },         {           description="The friendly map color used when charting this entity.",           name="friendly_map_color",           optional=false,           order=49,           read_type="Color"         },         {           description="The equipment grid prototype for this entity, if any.",           name="grid_prototype",           optional=true,           order=194,           read_type="LuaEquipmentGridPrototype"         },         {           description="",           name="growth_area_radius",           optional=true,           order=227,           read_type="double",           subclasses={             "AgriculturalTower"           }         },         {           description="",           name="growth_grid_tile_size",           optional=true,           order=228,           read_type="uint",           subclasses={             "AgriculturalTower"           }         },         {           description="",           name="growth_ticks",           optional=true,           order=224,           read_type="uint",           subclasses={             "Plant"           }         },         {           description="A mapping of the gun name to the gun prototype this prototype uses. `nil` if this entity prototype doesn't use guns.",           name="guns",           optional=true,           order=73,           read_type={             complex_type="dictionary",             key="string",             value="LuaItemPrototype"           }         },         {           description="A table of pollutants that this plant will release when it is harvested.",           name="harvest_emissions",           optional=true,           order=225,           read_type={             complex_type="dictionary",             key="string",             value="double"           },           subclasses={             "Plant"           }         },         {           description="Whether this unit, car, or character prototype has belt immunity.",           name="has_belt_immunity",           optional=true,           order=174,           read_type="boolean",           subclasses={             "Unit",             "Car",             "Character"           }         },         {           description="",           name="head_collection_radius",           optional=true,           order=275,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="Amount this entity can heal per tick, if any.",           name="healing_per_tick",           optional=true,           order=15,           read_type="float"         },         {           description="The heat buffer prototype this entity uses, if any.",           name="heat_buffer_prototype",           optional=true,           order=88,           read_type="LuaHeatBufferPrototype"         },         {           description="The heat energy source prototype this entity uses, if any.",           name="heat_energy_source_prototype",           optional=true,           order=85,           read_type="LuaHeatEnergySourcePrototype"         },         {           description="The energy required to keep this entity from freezing. Zero energy means it doesn't freeze.",           name="heating_energy",           optional=false,           order=231,           read_type="double"         },         {           description="The height of this spider vehicle prototype.",           name="height",           optional=true,           order=203,           read_type="double",           subclasses={             "SpiderUnit",             "SpiderVehicle"           }         },         {           description="",           name="held_items_display_count",           optional=true,           order=287,           read_type="uint8",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="held_items_offset",           optional=true,           order=285,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="held_items_spread",           optional=true,           order=286,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="hide_resistances",           optional=true,           order=249,           read_type="boolean",           subclasses={             "EntityWithHealth"           }         },         {           description="A vector of the gun prototypes of this car, spider vehicle, artillery wagon, or turret.",           name="indexed_guns",           optional=true,           order=74,           read_type={             complex_type="array",             value="LuaItemPrototype"           },           subclasses={             "Car",             "SpiderVehicle",             "ArtilleryTurret",             "ArtilleryWagon"           }         },         {           description="Every time this infinite resource 'ticks' down, it is reduced by this amount. Meaningless if this isn't an infinite resource.",           name="infinite_depletion_resource_amount",           optional=true,           order=3,           read_type="uint",           subclasses={             "ResourceEntity"           }         },         {           description="Whether this resource is infinite.",           name="infinite_resource",           optional=true,           order=0,           read_type="boolean",           subclasses={             "ResourceEntity"           }         },         {           description="The max number of ingredients this crafting machine prototype supports.",           name="ingredient_count",           optional=true,           order=59,           read_type="uint",           subclasses={             "CraftingMachine"           }         },         {           description="True if this inserter chases items on belts for pickup.",           name="inserter_chases_belt_items",           optional=true,           order=110,           read_type="boolean",           subclasses={             "Inserter"           }         },         {           description="The drop position for this inserter.",           name="inserter_drop_position",           optional=true,           order=109,           read_type="Vector",           subclasses={             "Inserter"           }         },         {           description="The pickup position for this inserter.",           name="inserter_pickup_position",           optional=true,           order=108,           read_type="Vector",           subclasses={             "Inserter"           }         },         {           description="The built-in stack size bonus of this inserter prototype.",           name="inserter_stack_size_bonus",           optional=true,           order=197,           read_type="uint",           subclasses={             "Inserter"           }         },         {           description="The instruments for this programmable speaker.",           name="instruments",           optional=true,           order=52,           read_type={             complex_type="array",             value="ProgrammableSpeakerInstrument"           },           subclasses={             "ProgrammableSpeaker"           }         },         {           description="Properties of custom inventory. Only provided if inventory_type is `\"with_custom_stack_size\"`.",           name="inventory_properties",           optional=true,           order=58,           read_type="InventoryWithCustomStackSizeSpecification",           subclasses={             "ContainerEntity",             "LinkedContainer"           }         },         {           description="",           name="inventory_size_quality_increase",           optional=true,           order=268,           read_type="uint",           subclasses={             "AsteroidCollector"           }         },         {           description="The inventory type this container or linked container uses.",           name="inventory_type",           optional=true,           order=56,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="normal"               },               {                 complex_type="literal",                 value="with_bar"               },               {                 complex_type="literal",                 value="with_filters"               },               {                 complex_type="literal",                 value="with_filters_and_bar"               },               {                 complex_type="literal",                 value="with_weight_limit"               },               {                 complex_type="literal",                 value="with_custom_stack_size"               }             }           },           subclasses={             "ContainerEntity",             "LinkedContainer"           }         },         {           description="Weight limit of the inventory if inventory_type is `\"with_weight_limit\"`.",           name="inventory_weight_limit",           optional=true,           order=57,           read_type="Weight",           subclasses={             "ContainerEntity",             "LinkedContainer"           }         },         {           description="",           lists={             "These are the objects that are considered buildings:\n\n- AccumulatorPrototype\n- AgriculturalTowerPrototype\n- ArtilleryTurretPrototype\n- AsteroidCollectorPrototype\n- BeaconPrototype\n- BoilerPrototype\n- BurnerGeneratorPrototype\n- CargoBayPrototype\n- CargoLandingPadPrototype\n- CombinatorPrototype → ArithmeticCombinator, DeciderCombinator, SelectorCombinator\n- ConstantCombinatorPrototype\n- ContainerPrototype → LogisticContainer, InfinityContainer, TemporaryContainer\n- CraftingMachinePrototype → AssemblingMachine, RocketSilo, Furnace\n- DisplayPanelPrototype\n- ElectricEnergyInterfacePrototype\n- ElectricPolePrototype\n- EnemySpawnerPrototype\n- FusionGeneratorPrototype\n- FusionReactorPrototype\n- GatePrototype\n- GeneratorPrototype\n- HeatInterfacePrototype\n- HeatPipePrototype\n- InserterPrototype\n- LabPrototype\n- LampPrototype\n- LightningAttractorPrototype\n- LinkedContainerPrototype\n- MarketPrototype\n- MiningDrillPrototype\n- OffshorePumpPrototype\n- PipePrototype → InfinityPipe\n- PipeToGroundPrototype\n- PowerSwitchPrototype\n- ProgrammableSpeakerPrototype\n- ProxyContainerPrototype\n- PumpPrototype\n- RadarPrototype\n- RailPrototype → CurvedRailA, ElevatedCurvedRailA, CurvedRailB, ElevatedCurvedRailB, HalfDiagonalRail, ElevatedHalfDiagonalRail, LegacyCurvedRail, LegacyStraightRail, RailRamp, StraightRail, ElevatedStraightRail\n- RailSignalBasePrototype → RailChainSignal, RailSignal\n- RailSupportPrototype\n- ReactorPrototype\n- RoboportPrototype\n- SimpleEntityPrototype\n- SimpleEntityWithOwnerPrototype → SimpleEntityWithForce\n- SolarPanelPrototype\n- SpacePlatformHubPrototype\n- StorageTankPrototype\n- ThrusterPrototype\n- TrainStopPrototype\n- TransportBeltConnectablePrototype → LaneSplitter, LinkedBelt, Loader1x1, Loader1x2, Splitter, TransportBelt, UndergroundBelt\n- TurretPrototype → AmmoTurret, ElectricTurret, FluidTurret\n- ValvePrototype\n- WallPrototype"           },           name="is_building",           optional=false,           order=156,           read_type="boolean"         },         {           description="True if this is entity-with-owner",           name="is_entity_with_owner",           optional=false,           order=199,           read_type="boolean"         },         {           description="True if this entity-with-owner is military target",           name="is_military_target",           optional=true,           order=200,           read_type="boolean",           subclasses={             "EntityWithOwner"           }         },         {           description="",           name="item_pickup_distance",           optional=true,           order=258,           read_type="double",           subclasses={             "Character"           }         },         {           description="Items that when placed will produce this entity, if any. Construction bots will choose the first item in the list to build this entity.",           name="items_to_place_this",           optional=true,           order=6,           read_type={             complex_type="array",             value="ItemWithCount"           }         },         {           description="",           name="joint_distance",           optional=true,           order=222,           read_type="double",           subclasses={             "RollingStock"           }         },         {           description="The item prototype names that are the inputs of this lab prototype.",           name="lab_inputs",           optional=true,           order=187,           read_type={             complex_type="array",             value="string"           },           subclasses={             "Lab"           }         },         {           description="The lamp energy usage of this rocket silo prototype.",           name="lamp_energy_usage",           optional=true,           order=213,           read_type="double",           subclasses={             "RocketSilo"           }         },         {           description="",           name="launch_to_space_platforms",           optional=true,           order=137,           read_type="boolean",           subclasses={             "RocketSilo"           }         },         {           description="The rocket launch delay for this rocket silo prototype.",           name="launch_wait_time",           optional=true,           order=134,           read_type="uint8",           subclasses={             "RocketSilo"           }         },         {           description="The light blinking speed for this rocket silo prototype.",           name="light_blinking_speed",           optional=true,           order=135,           read_type="double",           subclasses={             "RocketSilo"           }         },         {           description="True if this loader supports a runtime-adjustable belt stack size.",           name="loader_adjustable_belt_stack_size",           optional=true,           order=112,           read_type="boolean",           subclasses={             "Loader"           }         },         {           description="The max belt stack size for this loader.",           name="loader_max_belt_stack_size",           optional=true,           order=111,           read_type="uint8",           subclasses={             "Loader"           }         },         {           description="True if this loader will not drop items for which total amount is less than a full belt stack.",           name="loader_wait_for_full_stack",           optional=true,           order=113,           read_type="boolean",           subclasses={             "Loader"           }         },         {           description="The logistic mode of this logistic container.",           name="logistic_mode",           optional=true,           order=39,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="requester"               },               {                 complex_type="literal",                 value="active-provider"               },               {                 complex_type="literal",                 value="passive-provider"               },               {                 complex_type="literal",                 value="buffer"               },               {                 complex_type="literal",                 value="storage"               },               {                 complex_type="literal",                 value="none"               }             }           },           subclasses={             "LogisticContainer"           }         },         {           description="The logistic parameters for this roboport.",           name="logistic_parameters",           optional=true,           order=202,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="charge_approach_distance",                 optional=false,                 order=3,                 type="float"               },               {                 description="",                 name="charging_distance",                 optional=false,                 order=7,                 type="float"               },               {                 description="",                 name="charging_energy",                 optional=false,                 order=9,                 type="double"               },               {                 description="",                 name="charging_station_count",                 optional=false,                 order=6,                 type="uint"               },               {                 description="",                 name="charging_station_shift",                 optional=false,                 order=8,                 type="Vector"               },               {                 description="",                 name="charging_threshold_distance",                 optional=false,                 order=10,                 type="float"               },               {                 description="",                 name="construction_radius",                 optional=false,                 order=5,                 type="float"               },               {                 description="",                 name="logistic_radius",                 optional=false,                 order=4,                 type="float"               },               {                 description="",                 name="logistics_connection_distance",                 optional=false,                 order=14,                 type="float"               },               {                 description="",                 name="robot_limit",                 optional=false,                 order=13,                 type="uint"               },               {                 description="",                 name="robot_vertical_acceleration",                 optional=false,                 order=11,                 type="float"               },               {                 description="",                 name="robots_shrink_when_entering_and_exiting",                 optional=false,                 order=15,                 type="boolean"               },               {                 description="",                 name="spawn_and_station_height",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="spawn_and_station_shadow_height_offset",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="stationing_offset",                 optional=false,                 order=12,                 type="Vector"               },               {                 description="",                 name="stationing_render_layer_swap_height",                 optional=false,                 order=2,                 type="float"               }             }           },           subclasses={             "Roboport"           }         },         {           description="The logistic radius for this roboport prototype.",           name="logistic_radius",           optional=true,           order=144,           read_type="double",           subclasses={             "Roboport"           }         },         {           description="Loot that will be dropped when this entity is killed, if any.",           name="loot",           optional=true,           order=24,           read_type={             complex_type="array",             value="Loot"           },           subclasses={             "EntityWithHealth"           }         },         {           description="",           name="loot_pickup_distance",           optional=true,           order=259,           read_type="double",           subclasses={             "Character"           }         },         {           description="The manual range modifier for this artillery turret or wagon prototype.",           name="manual_range_modifier",           optional=true,           order=210,           read_type="double",           subclasses={             "ArtilleryWagon",             "ArtilleryTurret"           }         },         {           description="The map color used when charting this entity if a friendly or enemy color isn't defined, if any.",           name="map_color",           optional=true,           order=48,           read_type="Color"         },         {           description="The bounding box used for map generator collision checking.",           name="map_generator_bounding_box",           optional=false,           order=9,           read_type="BoundingBox"         },         {           description="Count of defensive enemies this spawner can sustain.",           name="max_count_of_owned_defensive_units",           optional=true,           order=166,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="Count of enemies this spawner can sustain.",           name="max_count_of_owned_units",           optional=true,           order=165,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="The maximum darkness at which this unit spawner can spawn entities.",           name="max_darkness_to_spawn",           optional=true,           order=163,           read_type="float",           subclasses={             "Spawner"           }         },         {           description="How many defensive friendly units are required within the spawning_radius of this spawner for it to stop producing more units.",           name="max_defensive_friends_around_to_spawn",           optional=true,           order=168,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.",           name="max_friends_around_to_spawn",           optional=true,           order=167,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="The max number of item products this crafting machine prototype supports.",           name="max_item_product_count",           optional=true,           order=60,           read_type="uint",           subclasses={             "CraftingMachine"           }         },         {           description="The max payload size of this logistics or construction robot.",           name="max_payload_size",           optional=true,           order=77,           read_type="uint",           subclasses={             "RobotWithLogisticsInterface"           }         },         {           description="",           name="max_performance",           optional=true,           order=241,           read_type="ThrusterPerformancePoint",           subclasses={             "ThrusterPrototype"           }         },         {           description="The maximum polyphony for this programmable speaker.",           name="max_polyphony",           optional=true,           order=53,           read_type="uint",           subclasses={             "ProgrammableSpeaker"           }         },         {           description="The default maximum power output of this generator prototype. This property is deprecated in favor of [LuaEntityPrototype::get_max_power_output](runtime:LuaEntityPrototype::get_max_power_output) and should not be used.",           name="max_power_output",           optional=true,           order=95,           read_type="double",           subclasses={             "BurnerGenerator",             "Generator"           }         },         {           description="The maximum pursue distance of this unit prototype.",           name="max_pursue_distance",           optional=true,           order=178,           read_type="double",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The max speed of this projectile or flying robot prototype.",           name="max_speed",           optional=true,           order=158,           read_type="double",           subclasses={             "Projectile",             "FlyingRobot"           }         },         {           description="The maximum energy for this flying robot above which it won't try to recharge when stationing.",           name="max_to_charge",           optional=true,           order=82,           read_type="float",           subclasses={             "FlyingRobot"           }         },         {           description="The max underground distance for underground belts and underground pipes.",           name="max_underground_distance",           optional=true,           order=40,           read_type="uint8",           subclasses={             "UndergroundBelt",             "PipeToGround"           }         },         {           description="",           name="maximum_corner_sliding_distance",           optional=true,           order=253,           read_type="double",           subclasses={             "Character"           }         },         {           description="The maximum fluid temperature of this generator prototype.",           name="maximum_temperature",           optional=true,           order=91,           read_type="double",           subclasses={             "Generator"           }         },         {           description="The minimum darkness at which this unit spawner can spawn entities.",           name="min_darkness_to_spawn",           optional=true,           order=162,           read_type="float",           subclasses={             "Spawner"           }         },         {           description="",           name="min_performance",           optional=true,           order=240,           read_type="ThrusterPerformancePoint",           subclasses={             "ThrusterPrototype"           }         },         {           description="The minimum pursue time of this unit prototype.",           name="min_pursue_time",           optional=true,           order=177,           read_type="uint",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The minimum energy for this flying robot before it tries to recharge.",           name="min_to_charge",           optional=true,           order=81,           read_type="float",           subclasses={             "FlyingRobot"           }         },         {           description="Whether this entity is minable and what can be obtained by mining it.",           name="mineable_properties",           optional=false,           order=5,           read_type="MineableProperties"         },         {           description="",           name="minimal_arm_swing_segment_retraction",           optional=true,           order=284,           read_type="uint",           subclasses={             "AsteroidCollector"           }         },         {           description="Minimum amount of this resource.",           name="minimum_resource_amount",           optional=true,           order=1,           read_type="uint",           subclasses={             "ResourceEntity"           }         },         {           description="The mining radius of this mining drill prototype.",           name="mining_drill_radius",           optional=true,           order=34,           read_type="double",           subclasses={             "MiningDrill"           }         },         {           description="The mining speed of this mining drill/character prototype.",           name="mining_speed",           optional=true,           order=36,           read_type="double",           subclasses={             "MiningDrill",             "Character"           }         },         {           description="The module inventory size. `nil` if this entity doesn't support modules.",           name="module_inventory_size",           optional=true,           order=54,           read_type="uint"         },         {           description="Whether this unit prototype can move while shooting.",           name="move_while_shooting",           optional=true,           order=180,           read_type="boolean",           subclasses={             "Unit"           }         },         {           description="",           name="neighbour_bonus",           optional=true,           order=151,           read_type="double",           subclasses={             "Reactor",             "FusionReactor"           }         },         {           description="",           name="neighbour_connectable",           optional=true,           order=251,           read_type="NeighbourConnectable",           subclasses={             "FusionReactor"           }         },         {           description="The next upgrade for this entity, if any.",           name="next_upgrade",           optional=true,           order=23,           read_type="LuaEntityPrototype"         },         {           description="The normal amount for this resource.",           name="normal_resource_amount",           optional=true,           order=2,           read_type="uint",           subclasses={             "ResourceEntity"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=290,           read_type="string"         },         {           description="",           name="overkill_fraction",           optional=true,           order=244,           read_type="float",           subclasses={             "EntityWithHealth"           }         },         {           description="",           name="passive_energy_usage",           optional=true,           order=269,           read_type="double",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="per_lane_filters",           optional=true,           order=155,           read_type="boolean",           subclasses={             "Loader"           }         },         {           description="",           name="perceived_performance",           optional=true,           order=243,           read_type="PerceivedPerformance",           subclasses={             "FusionReactor"           }         },         {           description="The beacon profile: extra multiplier applied to the effects received from beacon by the effect receiver based on amount of beacons that reach that effect receiver",           name="profile",           optional=true,           order=119,           read_type={             complex_type="array",             value="double"           },           subclasses={             "Beacon"           }         },         {           description="True if this entity prototype should be included during tile collision checks with [LuaTilePrototype::check_collision_with_entities](runtime:LuaTilePrototype::check_collision_with_entities) enabled.",           name="protected_from_tile_building",           optional=false,           order=198,           read_type="boolean"         },         {           description="The pumping speed of this offshore or normal pump. This property is deprecated in favor of [LuaEntityPrototype::get_pumping_speed](runtime:LuaEntityPrototype::get_pumping_speed) and should not be used.",           name="pumping_speed",           optional=true,           order=99,           read_type="double",           subclasses={             "OffshorePump",             "Pump"           }         },         {           description="",           name="quality_affects_mining_radius",           optional=true,           order=35,           read_type="boolean",           subclasses={             "MiningDrill"           }         },         {           description="",           name="quality_affects_module_slots",           optional=true,           order=55,           read_type="boolean",           subclasses={             "Beacon",             "CraftingMachine",             "MiningDrill",             "Lab"           }         },         {           description="The radar range of this unit prototype.",           name="radar_range",           optional=true,           order=179,           read_type="uint",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The radius of this entity prototype.",           name="radius",           optional=false,           order=171,           read_type="double"         },         {           description="",           name="radius_visualisation_specification",           optional=true,           order=223,           read_type="RadiusVisualisationSpecification"         },         {           description="",           name="random_corpse_variation",           optional=true,           order=250,           read_type="boolean",           subclasses={             "EntityWithHealth"           }         },         {           description="",           name="reach_distance",           optional=true,           order=256,           read_type="uint",           subclasses={             "Character"           }         },         {           description="",           name="reach_resource_distance",           optional=true,           order=257,           read_type="double",           subclasses={             "Character"           }         },         {           description="",           name="related_underground_belt",           optional=true,           order=196,           read_type="LuaEntityPrototype",           subclasses={             "TransportBelt"           }         },         {           description="The remains left behind when this entity is mined.",           name="remains_when_mined",           optional=false,           order=42,           read_type={             complex_type="array",             value="LuaEntityPrototype"           }         },         {           description="Whether this entity should remove decoratives that collide with it when this entity is built.",           name="remove_decoratives",           optional=false,           order=195,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="automatic"               },               {                 complex_type="literal",                 value="true"               },               {                 complex_type="literal",                 value="false"               }             }           }         },         {           description="Repair-speed modifier for this entity, if any. Actual repair speed will be `tool_repair_speed * entity_repair_speed_modifier`.",           name="repair_speed_modifier",           optional=true,           order=25,           read_type="float",           subclasses={             "EntityWithHealth"           }         },         {           description="List of resistances towards each damage type. It is a dictionary indexed by damage type names (see `data/base/prototypes/damage-type.lua`).",           name="resistances",           optional=true,           order=21,           read_type={             complex_type="dictionary",             key="string",             value="Resistance"           },           subclasses={             "EntityWithHealth"           }         },         {           description="The [resource categories](runtime:LuaResourceCategoryPrototype) this character or mining drill supports.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",           name="resource_categories",           optional=true,           order=62,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           },           subclasses={             "MiningDrill",             "Character"           }         },         {           description="Name of the category of this resource.\n\nDuring data stage, this property is named \"category\".",           name="resource_category",           optional=true,           order=4,           read_type="string",           subclasses={             "ResourceEntity"           }         },         {           description="The resource drain rate percent of this mining drill prototype.",           name="resource_drain_rate_percent",           optional=true,           order=37,           read_type="uint8",           subclasses={             "MiningDrill"           }         },         {           description="",           name="respawn_time",           optional=true,           order=264,           read_type="uint",           subclasses={             "Character"           }         },         {           description="The result units and spawn points with weight and evolution factor for a biter spawner entity.",           name="result_units",           optional=true,           order=29,           read_type={             complex_type="array",             value="UnitSpawnDefinition"           },           subclasses={             "Spawner"           }         },         {           description="",           name="rewire_neighbours_when_destroying",           optional=false,           order=234,           read_type="boolean",           subclasses={             "ElectricPole"           }         },         {           description="The rising speed for this rocket silo rocket prototype.",           name="rising_speed",           optional=true,           order=138,           read_type="double",           subclasses={             "RocketSiloRocket"           }         },         {           description="The rocket entity prototype associated with this rocket silo prototype.",           name="rocket_entity_prototype",           optional=true,           order=173,           read_type="LuaEntityPrototype",           subclasses={             "RocketSilo"           }         },         {           description="The rocket parts required for this rocket silo prototype.",           name="rocket_parts_required",           optional=true,           order=132,           read_type="uint",           subclasses={             "RocketSilo"           }         },         {           description="The rocket rising delay for this rocket silo prototype.",           name="rocket_rising_delay",           optional=true,           order=133,           read_type="uint8",           subclasses={             "RocketSilo"           }         },         {           description="The rotation snap angle of this car prototype.",           name="rotation_snap_angle",           optional=true,           order=71,           read_type="double",           subclasses={             "Car"           }         },         {           description="The rotation speed of this car prototype.",           name="rotation_speed",           optional=true,           order=70,           read_type="double",           subclasses={             "Car"           }         },         {           description="The movement speed of this character prototype.",           name="running_speed",           optional=true,           order=252,           read_type="double",           subclasses={             "Character"           }         },         {           description="Whether this generator prototype scales fluid usage.",           name="scale_fluid_usage",           optional=true,           order=93,           read_type="boolean",           subclasses={             "Generator"           }         },         {           description="How much science pack durability is required to research one science point.",           name="science_pack_drain_rate_percent",           optional=false,           order=188,           read_type="uint8",           subclasses={             "Lab"           }         },         {           description="The secondary bounding box used for collision checking, if any. This is only used in rails and rail remnants.",           name="secondary_collision_box",           optional=true,           order=8,           read_type="BoundingBox"         },         {           description="Is this entity selectable?",           name="selectable_in_game",           optional=false,           order=18,           read_type="boolean"         },         {           description="The bounding box used for drawing selection.",           name="selection_box",           optional=false,           order=10,           read_type="BoundingBox"         },         {           description="The selection priority of this entity - a value between `0` and `255`.",           name="selection_priority",           optional=false,           order=19,           read_type="uint"         },         {           description="The cursor size used when shooting at this entity.",           name="shooting_cursor_size",           optional=false,           order=45,           read_type="float"         },         {           description="",           name="solar_panel_performance_at_day",           optional=false,           order=235,           read_type="double",           subclasses={             "SolarPanel"           }         },         {           description="",           name="solar_panel_performance_at_night",           optional=false,           order=236,           read_type="double",           subclasses={             "SolarPanel"           }         },         {           description="",           name="solar_panel_solar_coefficient_property",           optional=false,           order=237,           read_type="LuaSurfacePropertyPrototype",           subclasses={             "SolarPanel"           }         },         {           description="The spawning cooldown for this enemy spawner prototype.",           name="spawn_cooldown",           optional=true,           order=33,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="max",                 optional=false,                 order=1,                 type="double"               },               {                 description="",                 name="min",                 optional=false,                 order=0,                 type="double"               }             }           },           subclasses={             "Spawner"           }         },         {           description="",           name="spawn_decoration",           optional=true,           order=219,           read_type={             complex_type="array",             value="TriggerEffectItem"           },           subclasses={             "Spawner",             "Turret"           }         },         {           description="",           name="spawn_decorations_on_expansion",           optional=true,           order=220,           read_type="boolean",           subclasses={             "Spawner",             "Turret"           }         },         {           description="How far from the spawner can the units be spawned.",           name="spawning_radius",           optional=true,           order=169,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="What spaces should be between the spawned units.",           name="spawning_spacing",           optional=true,           order=170,           read_type="double",           subclasses={             "Spawner"           }         },         {           description="The spawning time modifier of this unit prototype.",           name="spawning_time_modifier",           optional=true,           order=184,           read_type="double",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The default speed of this flying robot, rolling stock or unit. For rolling stocks, this is their `max_speed`.",           name="speed",           optional=true,           order=75,           read_type="double",           subclasses={             "FlyingRobot",             "RollingStock",             "Unit"           }         },         {           description="The speed multiplier when this flying robot is out of energy.",           name="speed_multiplier_when_out_of_energy",           optional=true,           order=76,           read_type="float",           subclasses={             "FlyingRobot"           }         },         {           description="The bounding box used to attach sticker type entities.",           name="sticker_box",           optional=false,           order=12,           read_type="BoundingBox"         },         {           description="Whether this entity prototype could possibly ever be rotated.",           name="supports_direction",           optional=false,           order=191,           read_type="boolean"         },         {           description="The surface conditions required to build this entity.",           name="surface_conditions",           optional=true,           order=230,           read_type={             complex_type="array",             value="SurfaceCondition"           }         },         {           description="If this car prototype uses tank controls to drive.",           name="tank_driving",           optional=true,           order=69,           read_type="boolean",           subclasses={             "Car"           }         },         {           description="The target temperature of this boiler or fusion reactor prototype. If `nil` on a fusion reactor, the target temperature is the default temperature of the output fluid.",           name="target_temperature",           optional=true,           order=96,           read_type="float",           subclasses={             "Boiler",             "FusionReactor"           }         },         {           description="The terrain friction modifier for this vehicle.",           name="terrain_friction_modifier",           optional=true,           order=192,           read_type="float",           subclasses={             "Vehicle"           }         },         {           description="",           name="tether_size",           optional=true,           order=282,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="",           name="ticks_to_keep_aiming_direction",           optional=true,           order=262,           read_type="uint",           subclasses={             "Character"           }         },         {           description="",           name="ticks_to_keep_gun",           optional=true,           order=261,           read_type="uint",           subclasses={             "Character"           }         },         {           description="",           name="ticks_to_stay_in_combat",           optional=true,           order=263,           read_type="uint",           subclasses={             "Character"           }         },         {           description="Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)",           name="tile_height",           optional=false,           order=217,           read_type="uint"         },         {           description="Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)",           name="tile_width",           optional=false,           order=216,           read_type="uint"         },         {           description="The time to live for this prototype or `0` if prototype doesn't have time_to_live or time_before_removed.",           name="time_to_live",           optional=false,           order=116,           read_type="uint"         },         {           description="The time it takes this land mine to arm.",           name="timeout",           optional=true,           order=148,           read_type="uint",           subclasses={             "LandMine"           }         },         {           description="The torso bob speed of this spider vehicle prototype.",           name="torso_bob_speed",           optional=true,           order=205,           read_type="double",           subclasses={             "SpiderUnit",             "SpiderVehicle"           }         },         {           description="The torso rotation speed of this spider vehicle prototype.",           name="torso_rotation_speed",           optional=true,           order=204,           read_type="double",           subclasses={             "SpiderUnit",             "SpiderVehicle"           }         },         {           description="If it is a tree, return the number of colors it supports.",           name="tree_color_count",           optional=true,           order=123,           read_type="uint8",           subclasses={             "Tree"           }         },         {           description="The collision mask entities must collide with to make this landmine blow up.",           name="trigger_collision_mask",           optional=true,           order=149,           read_type="CollisionMask",           subclasses={             "LandMine"           }         },         {           description="The trigger target mask for this entity prototype type.\n\nThe values in the dictionary are meaningless and exists just to allow the dictionary type for easy lookup.",           name="trigger_target_mask",           optional=false,           order=14,           read_type={             complex_type="dictionary",             key="string",             value="boolean"           }         },         {           description="The range of this turret.",           name="turret_range",           optional=true,           order=26,           read_type="uint",           subclasses={             "Turret"           }         },         {           description="The turret rotation speed of this car prototype.",           name="turret_rotation_speed",           optional=true,           order=72,           read_type="float",           subclasses={             "Car"           }         },         {           description="",           name="two_direction_only",           optional=true,           order=242,           read_type="boolean",           subclasses={             "FusionReactor"           }         },         {           description="",           name="unpowered_arm_speed_scale",           optional=true,           order=283,           read_type="float",           subclasses={             "AsteroidCollector"           }         },         {           description="Whether this logistic container prototype uses exact mode",           name="use_exact_mode",           optional=true,           order=215,           read_type="boolean",           subclasses={             "LogisticContainer"           }         },         {           description="If this drill uses force productivity bonus",           name="uses_force_mining_productivity_bonus",           optional=true,           order=38,           read_type="boolean",           subclasses={             "MiningDrill"           }         },         {           description="",           name="uses_inserter_stack_size_bonus",           optional=true,           order=103,           read_type="boolean",           subclasses={             "Inserter"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=289,           read_type="boolean"         },         {           description="The mode of operation of this valve.",           name="valve_mode",           optional=true,           order=100,           read_type="ValveMode",           subclasses={             "Valve"           }         },         {           description="The default threshold of this valve.",           name="valve_threshold",           optional=true,           order=101,           read_type="float",           subclasses={             "Valve"           }         },         {           description="",           name="vector_to_place_result",           optional=true,           order=229,           read_type="Vector",           subclasses={             "MiningDrill",             "CraftingMachine"           }         },         {           description="Vertical selection shift used by rolling stocks. It affects selection box vertical position but is also used to shift rolling stock graphics along the rails to fine tune train's look.",           name="vertical_selection_shift",           optional=true,           order=218,           read_type="double",           subclasses={             "RollingStock"           }         },         {           description="The vision distance of this unit prototype.",           name="vision_distance",           optional=true,           order=175,           read_type="double",           subclasses={             "SpiderUnit",             "Unit"           }         },         {           description="The void energy source prototype this entity uses, if any.",           name="void_energy_source_prototype",           optional=true,           order=87,           read_type="LuaVoidEnergySourcePrototype"         },         {           description="The weight of this vehicle prototype.",           name="weight",           optional=true,           order=20,           read_type="double",           subclasses={             "Vehicle"           }         }       },       description="Prototype of an entity.",       methods={         {           description="The crafting speed of this crafting-machine or character.",           format={             takes_table=false           },           name="get_crafting_speed",           order=2,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           },           subclasses={             "CraftingMachine",             "Character"           }         },         {           description="Gets the fluid capacity of this entity or 0 if this entity doesn't support fluids.\n\nCrafting machines will report 0 due to their fluid capacity being whatever a given recipe needs.",           format={             takes_table=false           },           name="get_fluid_capacity",           order=20,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The fluid usage of this generator, fusion generator or fusion reactor prototype.",           format={             takes_table=false           },           name="get_fluid_usage_per_tick",           order=15,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "Generator",             "FusionGenerator",             "FusionReactor"           }         },         {           description="The extension speed of this inserter.",           format={             takes_table=false           },           name="get_inserter_extension_speed",           order=9,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "Inserter"           }         },         {           description="The rotation speed of this inserter.",           format={             takes_table=false           },           name="get_inserter_rotation_speed",           order=10,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "Inserter"           }         },         {           description="Gets the base size of the given inventory on this entity or `nil` if the given inventory doesn't exist.",           format={             takes_table=false           },           name="get_inventory_size",           order=1,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="defines.inventory"             },             {               description="",               name="quality",               optional=true,               order=1,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           }         },         {           description="The maximum circuit wire distance for this entity. 0 if the entity doesn't support circuit wires.",           format={             takes_table=false           },           name="get_max_circuit_wire_distance",           order=5,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The radius of the area constantly revealed by this radar, or cargo landing pad, in chunks.",           format={             takes_table=false           },           name="get_max_distance_of_nearby_sector_revealed",           order=13,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           },           subclasses={             "Radar",             "CargoLandingPad"           }         },         {           description="The radius of the area this radar can chart, in chunks.",           format={             takes_table=false           },           name="get_max_distance_of_sector_revealed",           order=12,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           },           subclasses={             "Radar"           }         },         {           description="The max energy for this flying robot prototype.",           format={             takes_table=false           },           name="get_max_energy",           order=8,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "FlyingRobot"           }         },         {           description="The theoretical maximum energy production for this entity.",           format={             takes_table=false           },           name="get_max_energy_production",           order=7,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The theoretical maximum energy usage for this entity.",           format={             takes_table=false           },           name="get_max_energy_usage",           order=6,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Max health of this entity. Will be `0` if this is not an entity with health.",           format={             takes_table=false           },           name="get_max_health",           order=14,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="float"             }           }         },         {           description="The maximum power output of this burner generator or generator prototype.",           format={             takes_table=false           },           name="get_max_power_output",           order=16,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "BurnerGenerator",             "Generator"           }         },         {           description="The maximum wire distance for this entity. 0 if the entity doesn't support wires.",           format={             takes_table=false           },           name="get_max_wire_distance",           order=4,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The mining radius of this mining drill prototype.",           format={             takes_table=false           },           name="get_mining_drill_radius",           order=19,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "MiningDrill"           }         },         {           description="The pumping speed of this offshore or normal pump.",           format={             takes_table=false           },           name="get_pumping_speed",           order=17,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           },           subclasses={             "OffshorePump",             "Pump"           }         },         {           description="The base researching speed of this lab prototype.",           format={             takes_table=false           },           name="get_researching_speed",           order=11,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "Lab"           }         },         {           description="The supply area of this electric pole or beacon prototype.",           format={             takes_table=false           },           name="get_supply_area_distance",           order=3,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           },           subclasses={             "ElectricPole",             "Beacon"           }         },         {           description="The maximum flow rate through this valve.",           format={             takes_table=false           },           name="get_valve_flow_rate",           order=18,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           },           subclasses={             "Valve"           }         },         {           description="Test whether this entity prototype has a certain flag set.",           format={             takes_table=false           },           name="has_flag",           order=0,           parameters={             {               description="The flag to test.",               name="flag",               optional=false,               order=0,               type="EntityPrototypeFlag"             }           },           return_values={             {               description="`true` if this prototype has the given flag set.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaEntityPrototype",       operators={},       order=39,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The burner energy source for this equipment, if any.",           name="burner",           optional=true,           order=17,           read_type="LuaBurner"         },         {           description="Current available energy.",           name="energy",           optional=false,           order=13,           read_type="double",           write_type="double"         },         {           description="Energy generated per tick.",           name="generator_power",           optional=false,           order=12,           read_type="double"         },         {           description="Name of the equipment contained in this ghost",           name="ghost_name",           optional=false,           order=1,           read_type="string",           subclasses={             "Ghost"           }         },         {           description="The prototype of the equipment contained in this ghost.",           name="ghost_prototype",           optional=false,           order=16,           read_type="LuaEquipmentPrototype",           subclasses={             "Ghost"           }         },         {           description="Type of the equipment contained in this ghost.",           name="ghost_type",           optional=false,           order=3,           read_type="string",           subclasses={             "Ghost"           }         },         {           description="Inventory size bonus.",           name="inventory_bonus",           optional=false,           order=10,           read_type="uint"         },         {           description="Maximum amount of energy that can be stored in this equipment.",           name="max_energy",           optional=false,           order=14,           read_type="double"         },         {           description="Maximum shield value. `0` if this equipment doesn't have a shield.",           name="max_shield",           optional=false,           order=8,           read_type="double"         },         {           description="Maximum energy per tick crated by this equipment on the current surface. Actual generated energy varies depending on the daylight levels.",           name="max_solar_power",           optional=false,           order=9,           read_type="double"         },         {           description="Movement speed bonus.",           name="movement_bonus",           optional=false,           order=11,           read_type="double"         },         {           description="Name of this equipment.",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=20,           read_type="string"         },         {           description="Position of this equipment in the equipment grid.",           name="position",           optional=false,           order=5,           read_type="EquipmentPosition"         },         {           description="",           name="prototype",           optional=false,           order=15,           read_type="LuaEquipmentPrototype"         },         {           description="Quality of this equipment.",           name="quality",           optional=false,           order=4,           read_type="LuaQualityPrototype"         },         {           description="Shape of this equipment.",           name="shape",           optional=false,           order=6,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="height",                 optional=false,                 order=1,                 type="uint"               },               {                 description="",                 name="width",                 optional=false,                 order=0,                 type="uint"               }             }           }         },         {           description="Current shield value of the equipment. Can't be set higher than [LuaEquipment::max_shield](runtime:LuaEquipment::max_shield).\n\nTrying to write this value on non-shield equipment will throw an error.",           name="shield",           optional=false,           order=7,           read_type="double",           write_type="double"         },         {           description="If this equipment is marked to be removed.",           name="to_be_removed",           optional=false,           order=18,           read_type="boolean"         },         {           description="Type of this equipment.",           name="type",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=19,           read_type="boolean"         }       },       description="An item in a [LuaEquipmentGrid](runtime:LuaEquipmentGrid), for example a fusion reactor placed in one's power armor.\n\nAn equipment reference becomes invalid once the equipment is removed or the equipment grid it resides in is destroyed.",       methods={},       name="LuaEquipment",       operators={},       order=40     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of an equipment category.",       methods={},       name="LuaEquipmentCategoryPrototype",       operators={},       order=41,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The total energy stored in all batteries in the equipment grid.",           name="available_in_batteries",           optional=false,           order=5,           read_type="double"         },         {           description="Total energy storage capacity of all batteries in the equipment grid.",           name="battery_capacity",           optional=false,           order=6,           read_type="double"         },         {           description="The entity that this equipment grid is owned by (in some inventory or item stack.)\n\nIf the owning entity is a character owned by some player and the player is disconnected this will return `nil`.",           name="entity_owner",           optional=true,           order=13,           read_type="LuaEntity"         },         {           description="All the equipment in this grid.",           name="equipment",           optional=false,           order=3,           read_type={             complex_type="array",             value="LuaEquipment"           }         },         {           description="Height of the equipment grid.",           name="height",           optional=false,           order=2,           read_type="uint"         },         {           description="Whether this grid's equipment movement bonus is active.",           name="inhibit_movement_bonus",           optional=false,           order=11,           read_type="boolean",           write_type="boolean"         },         {           description="The total amount of inventory bonus this equipment grid gives.",           name="inventory_bonus",           optional=false,           order=9,           read_type="uint"         },         {           description="The item stack that this equipment grid is owned by.",           name="itemstack_owner",           optional=true,           order=15,           read_type="LuaItemStack"         },         {           description="The maximum amount of shields this equipment grid has.",           name="max_shield",           optional=false,           order=8,           read_type="float"         },         {           description="Maximum energy per tick that can be created by all solar panels in the equipment grid on the current surface. Actual generated energy varies depending on the daylight levels.",           name="max_solar_energy",           optional=false,           order=4,           read_type="double"         },         {           description="The total amount of movement bonus this equipment grid gives.\n\nReturns `0` if [LuaEquipmentGrid::inhibit_movement_bonus](runtime:LuaEquipmentGrid::inhibit_movement_bonus) is `false`.",           name="movement_bonus",           optional=false,           order=10,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=17,           read_type="string"         },         {           description="The player that this equipment grid is owned by (in some inventory or item stack.)",           name="player_owner",           optional=true,           order=14,           read_type="LuaPlayer"         },         {           description="",           name="prototype",           optional=false,           order=0,           read_type="LuaEquipmentGridPrototype"         },         {           description="The amount of shields this equipment grid has.",           name="shield",           optional=false,           order=7,           read_type="float"         },         {           description="Unique identifier of this equipment grid.",           name="unique_id",           optional=false,           order=12,           read_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=16,           read_type="boolean"         },         {           description="Width of the equipment grid.",           name="width",           optional=false,           order=1,           read_type="uint"         }       },       description="An equipment grid is for example the inside of a power armor.",       methods={         {           description="Check whether moving an equipment would succeed.",           format={             table_optional=false,             takes_table=true           },           name="can_move",           order=4,           parameters={             {               description="The equipment to move",               name="equipment",               optional=false,               order=0,               type="LuaEquipment"             },             {               description="Where to put it",               name="position",               optional=false,               order=1,               type="EquipmentPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancels removal for the given equipment.",           format={             takes_table=false           },           name="cancel_removal",           order=13,           parameters={             {               description="",               name="equipment",               optional=false,               order=0,               type="LuaEquipment"             }           },           return_values={             {               description="If the equipment removal was successfully cancelled.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Clear all equipment from the grid, removing it without actually returning it.",           format={             takes_table=false           },           name="clear",           order=2,           parameters={             {               description="If provided, the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.",               name="by_player",               optional=true,               order=0,               type="PlayerIdentification"             }           },           return_values={}         },         {           description="Get the number of all or some equipment in this grid.",           format={             takes_table=false           },           name="count",           order=10,           parameters={             {               description="The equipment to count. If not specified, count all equipment.",               name="equipment",               optional=true,               order=0,               type="EquipmentWithQualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Find equipment by name.",           format={             takes_table=false           },           name="find",           order=9,           parameters={             {               description="Prototype of the equipment to find.",               name="equipment",               optional=false,               order=0,               type="EquipmentWithQualityID"             },             {               description="If ghosts inner equipment should be searched. Defaults to `false`",               name="search_ghosts",               optional=true,               order=1,               type="boolean"             }           },           return_values={             {               description="The first found equipment, or `nil` if equipment could not be found.",               optional=true,               order=0,               type="LuaEquipment"             }           }         },         {           description="Find equipment in the Equipment Grid colliding with this position.",           format={             takes_table=false           },           name="get",           order=6,           parameters={             {               description="The position",               name="position",               optional=false,               order=0,               type="EquipmentPosition"             }           },           return_values={             {               description="The found equipment, or `nil` if equipment occupying the given position could not be found.",               optional=true,               order=0,               type="LuaEquipment"             }           }         },         {           description="Get counts of all equipment in this grid.",           format={             takes_table=false           },           name="get_contents",           order=7,           parameters={},           return_values={             {               description="List of all equipment in the grid.",               optional=false,               order=0,               type={                 complex_type="array",                 value="EquipmentWithQualityCounts"               }             }           }         },         {           description="Total energy per tick generated by the equipment inside this grid.",           format={             takes_table=false           },           name="get_generator_energy",           order=8,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Move an equipment within this grid.",           format={             table_optional=false,             takes_table=true           },           name="move",           order=5,           parameters={             {               description="The equipment to move",               name="equipment",               optional=false,               order=0,               type="LuaEquipment"             },             {               description="Where to put it",               name="position",               optional=false,               order=1,               type="EquipmentPosition"             }           },           return_values={             {               description="`true` if the equipment was successfully moved.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Marks the given equipment for removal. If the given equipment is a ghost it is removed.",           format={             takes_table=false           },           name="order_removal",           order=12,           parameters={             {               description="",               name="equipment",               optional=false,               order=0,               type="LuaEquipment"             }           },           return_values={             {               description="If the equipment was successfully marked for removal (or in the case of a ghost; removed.)",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Insert an equipment into the grid.",           format={             table_optional=false,             takes_table=true           },           name="put",           order=3,           parameters={             {               description="If provided the action is done 'as' this player and [on_player_placed_equipment](runtime:on_player_placed_equipment) is triggered.",               name="by_player",               optional=true,               order=3,               type="PlayerIdentification"             },             {               description="If true, place the equipment as a ghost.",               name="ghost",               optional=true,               order=4,               type="boolean"             },             {               description="Equipment prototype name",               name="name",               optional=false,               order=0,               type="EquipmentID"             },             {               description="Grid position to put the equipment in.",               name="position",               optional=true,               order=2,               type="EquipmentPosition"             },             {               description="The quality, `nil` for any or if not provided `normal` is used.",               name="quality",               optional=true,               order=1,               type="QualityID"             }           },           return_values={             {               description="The newly-added equipment, or `nil` if the equipment could not be added.",               optional=true,               order=0,               type="LuaEquipment"             }           }         },         {           description="Revives the given equipment ghost if possible.",           format={             takes_table=false           },           name="revive",           order=11,           parameters={             {               description="The equipment ghost to revive.",               name="equipment",               optional=false,               order=0,               type="LuaEquipment"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaEquipment"             }           }         },         {           description="Remove an equipment from the grid.",           format={             table_optional=false,             takes_table=true           },           name="take",           order=0,           parameters={             {               description="If provided the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.",               name="by_player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="Take this exact equipment.",               name="equipment",               optional=true,               order=1,               type="LuaEquipment"             },             {               description="Take the equipment that contains this position in the grid.",               name="position",               optional=true,               order=0,               type="EquipmentPosition"             }           },           return_values={             {               description="The removed equipment, or `nil` if no equipment was removed.",               optional=true,               order=0,               type="ItemWithCount"             }           }         },         {           description="Remove all equipment from the grid.",           format={             takes_table=false           },           name="take_all",           order=1,           parameters={             {               description="If provided, the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.",               name="by_player",               optional=true,               order=0,               type="PlayerIdentification"             }           },           return_values={             {               description="List of the equipment that has been removed.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         }       },       name="LuaEquipmentGrid",       operators={},       order=42     },     {       abstract=false,       attributes={         {           description="Equipment category names for the [categories](runtime:LuaEquipmentPrototype::equipment_categories) that may be inserted into this equipment grid. The grid will accept any equipment that has at least one category in this list.",           name="equipment_categories",           optional=false,           order=0,           read_type={             complex_type="array",             value="string"           }         },         {           description="",           name="height",           optional=false,           order=2,           read_type="uint"         },         {           description="If the player can move equipment into or out of this grid.",           name="locked",           optional=false,           order=3,           read_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=5,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=4,           read_type="boolean"         },         {           description="",           name="width",           optional=false,           order=1,           read_type="uint"         }       },       description="Prototype of an equipment grid.",       methods={},       name="LuaEquipmentGridPrototype",       operators={},       order=43,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The equipment attack parameters.",           name="attack_parameters",           optional=true,           order=10,           read_type="AttackParameters",           subclasses={             "ActiveDefenseEquipment"           }         },         {           description="Whether this active defense equipment is automatic. Returns false if not active defense equipment.",           name="automatic",           optional=false,           order=11,           read_type="boolean"         },         {           description="The background color of this equipment prototype.",           name="background_color",           optional=false,           order=9,           read_type="Color"         },         {           description="The burner energy source prototype this equipment uses, if any.",           name="burner_prototype",           optional=true,           order=7,           read_type="LuaBurnerPrototype"         },         {           description="The electric energy source prototype this equipment uses, if any.",           name="electric_energy_source_prototype",           optional=true,           order=8,           read_type="LuaElectricEnergySourcePrototype"         },         {           description="The energy per shield point restored. 0 for non-shield equipment.",           name="energy_per_shield",           optional=false,           order=3,           read_type="double"         },         {           description="The max power generated by this equipment.",           name="energy_production",           optional=false,           order=2,           read_type="double"         },         {           description="The energy source prototype for the equipment.",           name="energy_source",           optional=false,           order=5,           read_type="LuaElectricEnergySourcePrototype"         },         {           description="Category names for this equipment. These [categories](runtime:LuaEquipmentGridPrototype::equipment_categories) will be used to determine whether this equipment is allowed in a particular equipment grid.",           name="equipment_categories",           optional=false,           order=6,           read_type={             complex_type="array",             value="string"           }         },         {           description="The logistic parameters for this roboport equipment.",           name="logistic_parameters",           optional=true,           order=4,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="charge_approach_distance",                 optional=false,                 order=3,                 type="float"               },               {                 description="",                 name="charging_distance",                 optional=false,                 order=7,                 type="float"               },               {                 description="",                 name="charging_energy",                 optional=false,                 order=9,                 type="double"               },               {                 description="",                 name="charging_station_count",                 optional=false,                 order=6,                 type="uint"               },               {                 description="",                 name="charging_station_shift",                 optional=false,                 order=8,                 type="Vector"               },               {                 description="",                 name="charging_threshold_distance",                 optional=false,                 order=10,                 type="float"               },               {                 description="",                 name="construction_radius",                 optional=false,                 order=5,                 type="float"               },               {                 description="",                 name="logistic_radius",                 optional=false,                 order=4,                 type="float"               },               {                 description="",                 name="logistics_connection_distance",                 optional=false,                 order=14,                 type="float"               },               {                 description="",                 name="robot_limit",                 optional=false,                 order=13,                 type="uint"               },               {                 description="",                 name="robot_vertical_acceleration",                 optional=false,                 order=11,                 type="float"               },               {                 description="",                 name="robots_shrink_when_entering_and_exiting",                 optional=false,                 order=15,                 type="boolean"               },               {                 description="",                 name="spawn_and_station_height",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="spawn_and_station_shadow_height_offset",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="stationing_offset",                 optional=false,                 order=12,                 type="Vector"               },               {                 description="",                 name="stationing_render_layer_swap_height",                 optional=false,                 order=2,                 type="float"               }             }           },           subclasses={             "RoboportEquipment"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=16,           read_type="string"         },         {           description="Shape of this equipment prototype.",           name="shape",           optional=false,           order=0,           read_type={             complex_type="table",             parameters={               {                 description="",                 name="height",                 optional=false,                 order=1,                 type="uint"               },               {                 description="Only set when the shape is \"manual\"",                 name="points",                 optional=true,                 order=2,                 type={                   complex_type="array",                   value="EquipmentPoint"                 }               },               {                 description="",                 name="width",                 optional=false,                 order=0,                 type="uint"               }             }           }         },         {           description="",           name="solar_panel_performance_at_day",           optional=false,           order=12,           read_type="double",           subclasses={             "SolarPanelEquipment"           }         },         {           description="",           name="solar_panel_performance_at_night",           optional=false,           order=13,           read_type="double",           subclasses={             "SolarPanelEquipment"           }         },         {           description="",           name="solar_panel_solar_coefficient_property",           optional=false,           order=14,           read_type="LuaSurfacePropertyPrototype",           subclasses={             "SolarPanelEquipment"           }         },         {           description="The result item when taking this equipment out of an equipment grid, if any.",           name="take_result",           optional=true,           order=1,           read_type="LuaItemPrototype"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=15,           read_type="boolean"         }       },       description="Prototype of a modular equipment.",       methods={         {           description="",           format={             takes_table=false           },           name="get_energy_consumption",           order=1,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_inventory_bonus",           order=2,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           },           subclasses={             "InventoryBonusEquipment"           }         },         {           description="",           format={             takes_table=false           },           name="get_movement_bonus",           order=3,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="float"             }           },           subclasses={             "MovementBonusEquipment"           }         },         {           description="The shield value of this equipment. 0 for non-shield equipment.",           format={             takes_table=false           },           name="get_shield",           order=0,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="float"             }           }         }       },       name="LuaEquipmentPrototype",       operators={},       order=44,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The force these statistics belong to. `nil` for pollution statistics.",           name="force",           optional=true,           order=3,           read_type="LuaForce"         },         {           description="List of input counts indexed by prototype name. Represents the data that is shown on the left side of the GUI for the given statistics.",           name="input_counts",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="union",               full_format=false,               options={                 "uint64",                 "double"               }             }           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=5,           read_type="string"         },         {           description="List of output counts indexed by prototype name. Represents the data that is shown in the middle of the GUI for electric networks and on the right side for all other statistics types.",           name="output_counts",           optional=false,           order=1,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="union",               full_format=false,               options={                 "uint64",                 "double"               }             }           }         },         {           description="List of storage counts indexed by prototype name. Represents the data that is shown on the right side of the GUI for electric networks. For other statistics types these values are currently unused and hidden.",           name="storage_counts",           optional=false,           order=2,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="union",               full_format=false,               options={                 "uint64",                 "double"               }             }           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=4,           read_type="boolean"         }       },       description="Encapsulates statistic data for different parts of the game.\n\nIn the context of flow statistics, `input`, `output` and `storage` describe in which position of the associated GUI the values are shown. Input values are shown on the far left side, output values to the immediate right, and storage values (if present) to the far right.\n\n- The item production GUI shows \"consumption\" on the right, thus `output` describes the item consumption numbers. The same goes for fluid consumption.\n\n- The kills GUI shows \"losses\" on the right, so `output` describes how many of the force's entities were killed by enemies.\n\n- The electric network GUI shows \"power consumption\" on the left side, so in this case `input` describes the power consumption numbers. In addition, electric networks are currently the only ones that utilize the `storage` part of their statistics, showing accumulator charges to the far right of the GUI.",       methods={         {           description="Reset all the statistics data to 0.",           format={             takes_table=false           },           name="clear",           order=8,           parameters={},           return_values={}         },         {           description="Gets the flow count value for the given time frame. If `sample_index` is not provided, then the value returned is the average across the provided precision time period. These are the values shown in the bottom section of the statistics GUIs.\n\nUse `sample_index` to access the data used to generate the statistics graphs. Each precision level contains 300 samples of data so at a precision of 1 minute, each sample contains data averaged across 60s / 300 = 0.2s = 12 ticks.\n\nAll return values are normalized to be per-tick for electric networks and per-minute for all other types.",           format={             table_optional=false,             takes_table=true           },           name="get_flow_count",           order=6,           parameters={             {               description="The statistics category to read from. Valid choices are `\"input\"`, `\"output\"` and `\"storage\"`.",               name="category",               optional=false,               order=1,               type="string"             },             {               description="If true, the count of items/fluids/entities is returned instead of the per-time-frame value.",               name="count",               optional=true,               order=4,               type="boolean"             },             {               description="The prototype ID.",               name="name",               optional=false,               order=0,               type="FlowStatisticsID"             },             {               description="The precision to read.",               name="precision_index",               optional=false,               order=2,               type="defines.flow_precision_index"             },             {               description="The sample index to read from within the precision range. If not provided, the entire precision range is read. Must be between 1 and 300 where 1 is the most recent sample and 300 is the oldest.",               name="sample_index",               optional=true,               order=3,               type="uint16"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets the total input count for a given prototype.",           format={             takes_table=false           },           name="get_input_count",           order=0,           parameters={             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             }           }         },         {           description="Gets the total output count for a given prototype.",           format={             takes_table=false           },           name="get_output_count",           order=2,           parameters={             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             }           }         },         {           description="Gets the total storage count for a given prototype.",           format={             takes_table=false           },           name="get_storage_count",           order=4,           parameters={             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             }           }         },         {           description="Adds a value to this flow statistics.",           format={             takes_table=false           },           name="on_flow",           order=7,           parameters={             {               description="The count: positive or negative determines if the value goes in the input or output statistics.",               name="count",               optional=false,               order=1,               type="float"             },             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={}         },         {           description="Sets the total input count for a given prototype.",           format={             takes_table=false           },           name="set_input_count",           order=1,           parameters={             {               description="The new count. The type depends on the instance of the statistics.",               name="count",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             },             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={}         },         {           description="Sets the total output count for a given prototype.",           format={             takes_table=false           },           name="set_output_count",           order=3,           parameters={             {               description="The new count. The type depends on the instance of the statistics.",               name="count",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             },             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={}         },         {           description="Sets the total storage count for a given prototype.",           format={             takes_table=false           },           name="set_storage_count",           order=5,           parameters={             {               description="The new count. The type depends on the instance of the statistics.",               name="count",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint64",                   "double"                 }               }             },             {               description="The prototype ID.",               name="id",               optional=false,               order=0,               type="FlowStatisticsID"             }           },           return_values={}         }       },       name="LuaFlowStatistics",       operators={},       order=45     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="The entity that owns this fluidbox.",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending on its active recipe. See [Fluid](runtime:Fluid).\n\nDo note that reading from a [LuaFluidBox](runtime:LuaFluidBox) creates a new table and writing will copy the given fields from the table into the engine's own fluid box structure. Therefore, the correct way to update a fluidbox of an entity is to read it first, modify the table, then write the modified table back. Directly accessing the returned table's attributes won't have the desired effect.",       examples={         "```\n-- Double the temperature of the fluid in entity's first fluid box.\nfluid = entity.fluidbox[1]\nfluid.temperature = fluid.temperature * 2\nentity.fluidbox[1] = fluid\n```"       },       methods={         {           description="Registers a linked connection between this entity and other entity. Because entity may have multiple fluidboxes, each with multiple connections that could be linked, a unique value for this and other linked_connection_id may need to be given.\n\nIt may happen a linked connection is not established immediately due to crafting machines being possible to not have certain fluidboxes exposed at a given point in time, but once they appear (due to recipe changes that would use them) they will be linked. Linked connections are persisted as (this_entity, this_linked_connection_id, other_entity, other_linked_connection_id) so if a pipe connection definition's value of linked_connection_id changes existing connections may not restore correct connections.\n\nEvery fluidbox connection that was defined in prototypes as connection_type==\"linked\" may be linked to at most 1 other fluidbox. When trying to connect already used connection, previous connection will be removed.\n\nLinked connections cannot go to the same entity even if they would be part of other fluidbox.",           format={             takes_table=false           },           name="add_linked_connection",           order=10,           parameters={             {               description="",               name="other_entity",               optional=false,               order=1,               type="LuaEntity"             },             {               description="",               name="other_linked_connection_id",               optional=false,               order=2,               type="uint"             },             {               description="",               name="this_linked_connection_id",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Flushes all fluid from this fluidbox and its fluid system.",           format={             takes_table=false           },           name="flush",           order=9,           parameters={             {               description="If provided, only this fluid is flushed.",               name="fluid",               optional=true,               order=1,               type="FluidID"             },             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The removed fluid.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="float"               }             }           }         },         {           description="The capacity of the given fluidbox segment.",           format={             takes_table=false           },           name="get_capacity",           order=1,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The fluidboxes to which the fluidbox at the given index is connected.",           format={             takes_table=false           },           name="get_connections",           order=2,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaFluidBox"               }             }           }         },         {           description="Get a fluid box filter",           format={             takes_table=false           },           name="get_filter",           order=4,           parameters={             {               description="The index of the filter to get.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The filter at the requested index, or `nil` if there isn't one.",               optional=true,               order=0,               type="FluidBoxFilter"             }           }         },         {           description="Gets counts of all fluids in the fluid segment. May return `nil` for fluid wagon, fluid turret's internal buffer, or a fluidbox which does not belong to a fluid segment.\n\nNote that this method only ever returns one fluid, since fluids can't be mixed anymore.",           format={             takes_table=false           },           name="get_fluid_segment_contents",           order=8,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The counts, indexed by fluid name.",               optional=true,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="uint"               }             }           }         },         {           description="Gets the unique ID of the fluid segment this fluid box belongs to. May return `nil` for fluid wagon, fluid turret's internal buffer or a fluidbox which does not belong to a fluid segment.",           format={             takes_table=false           },           name="get_fluid_segment_id",           order=7,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           }         },         {           description="Returns other end of a linked connection.",           format={             takes_table=false           },           name="get_linked_connection",           order=12,           parameters={             {               description="",               name="this_linked_connection_id",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Other entity to which a linked connection was made",               optional=true,               order=0,               type="LuaEntity"             },             {               description="linked_connection_id on other entity",               optional=true,               order=1,               type="uint"             }           }         },         {           description="Returns list of all linked connections registered for this entity.",           format={             takes_table=false           },           name="get_linked_connections",           order=13,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="FluidBoxConnectionRecord"               }             }           }         },         {           description="Returns the fluid the fluidbox is locked onto",           format={             takes_table=false           },           name="get_locked_fluid",           order=6,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="`nil` if the fluidbox is not locked to any fluid.",               optional=true,               order=0,               type="string"             }           }         },         {           description="Get the fluid box's connections and associated data.",           format={             takes_table=false           },           name="get_pipe_connections",           order=3,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="PipeConnection"               }             }           }         },         {           description="The prototype of this fluidbox index. If this is used on a fluidbox of a crafting machine which due to recipe was created by merging multiple prototypes, a table of prototypes that were merged will be returned instead",           format={             takes_table=false           },           name="get_prototype",           order=0,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaFluidBoxPrototype",                   {                     complex_type="array",                     value="LuaFluidBoxPrototype"                   }                 }               }             }           }         },         {           description="Removes linked connection record. If connected, other end will be also removed.",           format={             takes_table=false           },           name="remove_linked_connection",           order=11,           parameters={             {               description="",               name="this_linked_connection_id",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Set a fluid box filter.\n\nSome entities cannot have their fluidbox filter set, notably fluid wagons and crafting machines.",           format={             takes_table=false           },           name="set_filter",           order=5,           parameters={             {               description="The filter to set. Setting `nil` clears the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "FluidBoxFilterSpec",                   "nil"                 }               }             },             {               description="The index of the filter to set.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether the filter was set successfully.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaFluidBox",       operators={         {           description="Access, set or clear a fluid box. The index must always be in bounds (see [LuaFluidBox::length_operator](runtime:LuaFluidBox::length_operator)). New fluidboxes may not be added or removed using this operator.\n\nIs `nil` if the given fluid box does not contain any fluid. Writing `nil` removes all fluid from the fluid box.",           name="index",           optional=true,           order=0,           read_type="Fluid"         },         {           description="Number of fluid boxes.",           name="length",           optional=false,           order=1,           read_type="uint"         }       },       order=46     },     {       abstract=false,       attributes={         {           description="The entity that this belongs to.",           name="entity",           optional=false,           order=0,           read_type="LuaEntityPrototype"         },         {           description="The filter, if any is set.",           name="filter",           optional=true,           order=5,           read_type="LuaFluidPrototype"         },         {           description="The index of this fluidbox prototype in the owning entity.",           name="index",           optional=false,           order=1,           read_type="uint"         },         {           description="The maximum temperature, if any is set.",           name="maximum_temperature",           optional=true,           order=7,           read_type="double"         },         {           description="The minimum temperature, if any is set.",           name="minimum_temperature",           optional=true,           order=6,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=11,           read_type="string"         },         {           description="The pipe connection points.",           name="pipe_connections",           optional=false,           order=2,           read_type={             complex_type="array",             value="PipeConnectionDefinition"           }         },         {           description="The production type.",           name="production_type",           optional=false,           order=3,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="input"               },               {                 complex_type="literal",                 value="input-output"               },               {                 complex_type="literal",                 value="output"               },               {                 complex_type="literal",                 value="none"               }             }           }         },         {           description="The render layer.",           name="render_layer",           optional=false,           order=9,           read_type="string"         },         {           description="The secondary draw orders for the 4 possible connection directions.",           name="secondary_draw_orders",           optional=false,           order=8,           read_type={             complex_type="array",             value="int"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=10,           read_type="boolean"         },         {           description="",           name="volume",           optional=false,           order=4,           read_type="double"         }       },       description="A prototype of a fluidbox owned by some [LuaEntityPrototype](runtime:LuaEntityPrototype).",       methods={},       name="LuaFluidBoxPrototype",       operators={},       order=47     },     {       abstract=false,       attributes={         {           description="",           name="burns_fluid",           optional=false,           order=4,           read_type="boolean"         },         {           description="",           name="destroy_non_fuel_fluid",           optional=false,           order=6,           read_type="boolean"         },         {           description="",           name="effectivity",           optional=false,           order=3,           read_type="double"         },         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",           name="emissions_per_joule",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="The fluid box for this energy source.",           name="fluid_box",           optional=false,           order=10,           read_type="LuaFluidBoxPrototype"         },         {           description="",           name="fluid_usage_per_tick",           optional=false,           order=7,           read_type="double"         },         {           description="",           name="maximum_temperature",           optional=false,           order=9,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=12,           read_type="string"         },         {           description="",           name="render_no_network_icon",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="render_no_power_icon",           optional=false,           order=2,           read_type="boolean"         },         {           description="",           name="scale_fluid_usage",           optional=false,           order=5,           read_type="boolean"         },         {           description="The smoke sources for this prototype, if any.",           name="smoke",           optional=false,           order=8,           read_type={             complex_type="array",             value="SmokeSource"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=11,           read_type="boolean"         }       },       description="Prototype of a fluid energy source.",       methods={},       name="LuaFluidEnergySourcePrototype",       operators={},       order=48     },     {       abstract=false,       attributes={         {           description="",           name="base_color",           optional=false,           order=3,           read_type="Color"         },         {           description="Default temperature of this fluid.",           name="default_temperature",           optional=false,           order=0,           read_type="double"         },         {           description="A multiplier on the amount of emissions produced when this fluid is burnt in a generator. A value above `1.0` increases emissions and vice versa. The multiplier can't be negative.",           name="emissions_multiplier",           optional=false,           order=6,           read_type="double"         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=8,           read_type="LuaFluidPrototype"         },         {           description="",           name="flow_color",           optional=false,           order=4,           read_type="Color"         },         {           description="The amount of energy in Joules one unit of this fluid will produce when burnt in a generator. A value of `0` means this fluid can't be used for energy generation. The value can't be negative.",           name="fuel_value",           optional=false,           order=7,           read_type="double"         },         {           description="The temperature above which this fluid will be shown as gaseous inside tanks and pipes.",           name="gas_temperature",           optional=false,           order=5,           read_type="double"         },         {           description="The amount of energy in Joules required to heat one unit of this fluid by 1°C.",           name="heat_capacity",           optional=false,           order=2,           read_type="double"         },         {           description="Maximum temperature this fluid can reach.",           name="max_temperature",           optional=false,           order=1,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=10,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=9,           read_type="boolean"         }       },       description="Prototype of a fluid.",       methods={},       name="LuaFluidPrototype",       operators={},       order=49,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="border",           optional=false,           order=4,           read_type="boolean"         },         {           description="The border color, if any.",           name="border_color",           optional=true,           order=6,           read_type="Color"         },         {           description="",           name="filtered",           optional=false,           order=5,           read_type="boolean"         },         {           description="",           name="from",           optional=false,           order=1,           read_type="string"         },         {           description="Name of this prototype.",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="",           name="size",           optional=false,           order=2,           read_type="int"         },         {           description="",           name="spacing",           optional=false,           order=3,           read_type="float"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Prototype of a font.",       methods={},       name="LuaFontPrototype",       operators={},       order=50     },     {       abstract=false,       attributes={         {           description="Enables some higher-level AI behaviour for this force. When set to `true`, biters belonging to this force will automatically expand into new territories, build new spawners, and form unit groups. By default, this value is `true` for the enemy force and `false` for all others.\n\nSetting this to `false` does not turn off biters' AI. They will still move around and attack players who come close.\n\nIt is necessary for a force to be AI controllable in order to be able to create unit groups or build bases from scripts.",           name="ai_controllable",           optional=false,           order=27,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="artillery_range_modifier",           optional=false,           order=30,           read_type="double",           write_type="double"         },         {           description="",           name="beacon_distribution_modifier",           optional=false,           order=31,           read_type="double",           write_type="double"         },         {           description="Belt stack size bonus.",           name="belt_stack_size_bonus",           optional=false,           order=15,           read_type="uint",           write_type="uint"         },         {           description="Number of items that can be transferred by bulk inserters. When writing to this value, it must be >= 0 and <= 254.",           name="bulk_inserter_capacity_bonus",           optional=false,           order=14,           read_type="uint",           write_type="uint"         },         {           description="",           name="character_build_distance_bonus",           optional=false,           order=32,           read_type="uint",           write_type="uint"         },         {           description="",           name="character_health_bonus",           optional=false,           order=40,           read_type="double",           write_type="double"         },         {           description="The number of additional inventory slots the character main inventory has.",           name="character_inventory_slots_bonus",           optional=false,           order=38,           read_type="uint",           write_type="uint"         },         {           description="",           name="character_item_drop_distance_bonus",           optional=false,           order=33,           read_type="uint",           write_type="uint"         },         {           description="",           name="character_item_pickup_distance_bonus",           optional=false,           order=36,           read_type="double",           write_type="double"         },         {           description="`true` if character requester logistics is enabled.",           name="character_logistic_requests",           optional=false,           order=43,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="character_loot_pickup_distance_bonus",           optional=false,           order=37,           read_type="double",           write_type="double"         },         {           description="",           name="character_reach_distance_bonus",           optional=false,           order=34,           read_type="uint",           write_type="uint"         },         {           description="",           name="character_resource_reach_distance_bonus",           optional=false,           order=35,           read_type="double",           write_type="double"         },         {           description="Modifies the running speed of all characters in this force by the given value as a percentage. Setting the running modifier to `0.5` makes the character run 50% faster. The minimum value of `-1` reduces the movement speed by 100%, resulting in a speed of `0`.",           name="character_running_speed_modifier",           optional=false,           order=29,           read_type="double",           write_type="double"         },         {           description="Number of character trash slots.",           name="character_trash_slot_count",           optional=false,           order=16,           read_type="double",           write_type="double"         },         {           description="",           name="circuit_network_enabled",           optional=false,           order=20,           read_type="boolean",           write_type="boolean"         },         {           description="When true, cliffs will be marked for deconstruction when trying to force-build things that collide.",           name="cliff_deconstruction_enabled",           optional=false,           order=21,           read_type="boolean",           write_type="boolean"         },         {           description="Effective color of this force.",           name="color",           optional=false,           order=56,           read_type="Color"         },         {           description="The connected players belonging to this force.\n\nThis is primarily useful when you want to do some action against all online players of this force.\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index.",           name="connected_players",           optional=false,           order=46,           read_type={             complex_type="array",             value="LuaPlayer"           }         },         {           description="When an entity dies, a ghost will be placed for automatic reconstruction.",           name="create_ghost_on_entity_death",           optional=false,           order=19,           read_type="boolean",           write_type="boolean"         },         {           description="The currently ongoing technology research, if any.",           name="current_research",           optional=true,           order=10,           read_type="LuaTechnology"         },         {           description="Custom color for this force. If specified, will take priority over other sources of the force color. Writing `nil` clears custom color. Will return `nil` if it was not specified or if was set to `{0,0,0,0}`.",           name="custom_color",           optional=true,           order=55,           read_type="Color",           write_type="Color"         },         {           description="The time, in ticks, before a deconstruction order is removed.",           name="deconstruction_time_to_live",           optional=false,           order=39,           read_type="uint",           write_type="uint"         },         {           description="Additional lifetime for following robots.",           name="following_robots_lifetime_modifier",           optional=false,           order=18,           read_type="double",           write_type="double"         },         {           description="If friendly fire is enabled for this force.",           name="friendly_fire",           optional=false,           order=49,           read_type="boolean",           write_type="boolean"         },         {           description="This force's index in [LuaGameScript::forces](runtime:LuaGameScript::forces) (unique ID). It is assigned when a force is created, and remains so until it is [merged](runtime:on_forces_merged) (ie. deleted). Indexes of merged forces can be reused.",           name="index",           optional=false,           order=51,           read_type="uint"         },         {           description="The inserter stack size bonus for non stack inserters",           name="inserter_stack_size_bonus",           optional=false,           order=13,           read_type="double",           write_type="double"         },         {           description="All of the items that have been launched in rockets.",           name="items_launched",           optional=false,           order=45,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           }         },         {           description="",           name="laboratory_productivity_bonus",           optional=false,           order=6,           read_type="double",           write_type="double"         },         {           description="",           name="laboratory_speed_modifier",           optional=false,           order=5,           read_type="double",           write_type="double"         },         {           description="List of logistic networks, grouped by surface.",           name="logistic_networks",           optional=false,           order=28,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="array",               value="LuaLogisticNetwork"             }           }         },         {           description="Multiplier of the manual crafting speed. Default value is `0`. The actual crafting speed will be multiplied by `1 + manual_crafting_speed_modifier`.",           examples={             "```\n-- Double the player's crafting speed\ngame.player.force.manual_crafting_speed_modifier = 1\n```"           },           name="manual_crafting_speed_modifier",           optional=false,           order=4,           read_type="double",           write_type="double"         },         {           description="Multiplier of the manual mining speed. Default value is `0`. The actual mining speed will be multiplied by `1 + manual_mining_speed_modifier`.",           examples={             "```\n-- Double the player's mining speed\ngame.player.force.manual_mining_speed_modifier = 1\n```"           },           name="manual_mining_speed_modifier",           optional=false,           order=3,           read_type="double",           write_type="double"         },         {           description="",           name="max_failed_attempts_per_tick_per_construction_queue",           optional=false,           order=42,           read_type="uint",           write_type="uint"         },         {           description="",           name="max_successful_attempts_per_tick_per_construction_queue",           optional=false,           order=41,           read_type="uint",           write_type="uint"         },         {           description="Maximum number of follower robots.",           name="maximum_following_robot_count",           optional=false,           order=17,           read_type="uint",           write_type="uint"         },         {           description="",           name="mining_drill_productivity_bonus",           optional=false,           order=47,           read_type="double",           write_type="double"         },         {           description="",           name="mining_with_fluid",           optional=false,           order=22,           read_type="boolean",           write_type="boolean"         },         {           description="Name of the force.",           examples={             "```\ngame.player.print(game.player.force.name) -- => \"player\"\n```"           },           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=58,           read_type="string"         },         {           description="The space platforms that belong to this force mapped by their index value.\n\nThis will include platforms that are pending deletion.",           name="platforms",           optional=false,           order=54,           read_type={             complex_type="dictionary",             key="uint",             value="LuaSpacePlatform"           }         },         {           description="Players belonging to this force.",           name="players",           optional=false,           order=26,           read_type={             complex_type="array",             value="LuaPlayer"           }         },         {           description="The previous research, if any.",           name="previous_research",           optional=true,           order=12,           read_type="LuaTechnology",           write_type="LuaTechnology"         },         {           description="",           name="rail_planner_allow_elevated_rails",           optional=false,           order=24,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="rail_support_on_deep_oil_ocean",           optional=false,           order=23,           read_type="boolean",           write_type="boolean"         },         {           description="Recipes available to this force, indexed by `name`.",           examples={             "```\n-- Prints the category of the given recipe\ngame.player.print(game.player.force.recipes[\"transport-belt\"].category)\n```"           },           name="recipes",           optional=false,           order=2,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaRecipe"           }         },         {           description="Whether research is enabled for this force, see [LuaForce::enable_research](runtime:LuaForce::enable_research) and [LuaForce::disable_research](runtime:LuaForce::disable_research).",           name="research_enabled",           optional=false,           order=53,           read_type="boolean"         },         {           description="Progress of current research, as a number in range `[0, 1]`.",           name="research_progress",           optional=false,           order=11,           read_type="double",           write_type="double"         },         {           description="The research queue of this force. The first technology in the array is the currently active one. Reading this attribute gives an array of [LuaTechnology](runtime:LuaTechnology).\n\nTo write to this, the entire table must be written. Providing an empty table or `nil` will empty the research queue and cancel the current research.  Writing to this when the research queue is disabled will simply set the last research in the table as the current research.\n\nThis only allows mods to queue research that this force is able to research in the first place. As an example, an already researched technology or one whose prerequisites are not fulfilled will not be queued, but dropped silently instead.",           name="research_queue",           optional=false,           order=52,           read_type={             complex_type="array",             value="TechnologyID"           },           write_type={             complex_type="array",             value="TechnologyID"           }         },         {           description="The number of rockets launched.",           name="rockets_launched",           optional=false,           order=44,           read_type="uint",           write_type="uint"         },         {           description="If sharing chart data is enabled for this force.",           name="share_chart",           optional=false,           order=50,           read_type="boolean",           write_type="boolean"         },         {           description="Technologies owned by this force, indexed by `name`.",           examples={             "```\n-- Researches the technology for the player's force\ngame.player.force.technologies[\"steel-processing\"].researched = true\n```"           },           name="technologies",           optional=false,           order=1,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaTechnology"           }         },         {           description="",           name="train_braking_force_bonus",           optional=false,           order=48,           read_type="double",           write_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=57,           read_type="boolean"         },         {           description="When true, cars/tanks that support logistics will be able to use them.",           name="vehicle_logistics",           optional=false,           order=25,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="worker_robots_battery_modifier",           optional=false,           order=8,           read_type="double",           write_type="double"         },         {           description="",           name="worker_robots_speed_modifier",           optional=false,           order=7,           read_type="double",           write_type="double"         },         {           description="",           name="worker_robots_storage_bonus",           optional=false,           order=9,           read_type="double",           write_type="double"         }       },       description="`LuaForce` encapsulates data local to each \"force\" or \"faction\" of the game. Default forces are player, enemy and neutral. Players and mods can create additional forces (up to 64 total).",       methods={         {           description="Adds a custom chart tag to the given surface and returns the new tag or `nil` if the given position isn't valid for a chart tag.\n\nThe chunk must be charted for a tag to be valid at that location.",           format={             takes_table=false           },           name="add_chart_tag",           order=43,           parameters={             {               description="Which surface to add the tag to.",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             },             {               description="The tag to add.",               name="tag",               optional=false,               order=1,               type="ChartTagSpec"             }           },           raises={             {               description="Raised if the chart tag was successfully added.",               name="on_chart_tag_added",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaCustomChartTag"             }           }         },         {           description="Add this technology to the back of the research queue if the queue is enabled. Otherwise, set this technology to be researched now.",           format={             takes_table=false           },           name="add_research",           order=49,           parameters={             {               description="",               name="technology",               optional=false,               order=0,               type="TechnologyID"             }           },           raises={             {               description="Raised if the technology was successfully added.",               name="on_research_started",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the technology was successfully added.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancels pending chart requests for the given surface or all surfaces.",           format={             takes_table=false           },           name="cancel_charting",           order=21,           parameters={             {               description="",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Stop the research currently in progress. This will remove any dependent technologies from the research queue.",           format={             takes_table=false           },           name="cancel_current_research",           order=50,           parameters={},           return_values={}         },         {           description="Chart a portion of the map. The chart for the given area is refreshed; it creates chart for any parts of the given area that haven't been charted yet.",           examples={             "```\n-- Charts a 2048x2048 rectangle centered around the origin.\ngame.player.force.chart(game.player.surface, {{x = -1024, y = -1024}, {x = 1024, y = 1024}})\n```"           },           format={             takes_table=false           },           name="chart",           order=12,           parameters={             {               description="The area on the given surface to chart.",               name="area",               optional=false,               order=1,               type="BoundingBox"             },             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Chart all generated chunks.",           format={             takes_table=false           },           name="chart_all",           order=15,           parameters={             {               description="Which surface to chart or all if not given.",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Erases chart data for this force.",           format={             takes_table=false           },           name="clear_chart",           order=13,           parameters={             {               description="Which surface to erase chart data for or if not provided all surfaces charts are erased.",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Copies the given surface's chart from the given force to this force.",           format={             takes_table=false           },           name="copy_chart",           order=17,           parameters={             {               description="The surface to copy to.",               name="destination_surface",               optional=false,               order=2,               type="SurfaceIdentification"             },             {               description="The force to copy from",               name="source_force",               optional=false,               order=0,               type="ForceID"             },             {               description="The surface to copy from.",               name="source_surface",               optional=false,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Copies all of the given changeable values (except charts) from the given force to this force.",           format={             takes_table=false           },           name="copy_from",           order=16,           parameters={             {               description="The force to copy from.",               name="force",               optional=false,               order=0,               type="ForceID"             }           },           return_values={}         },         {           description="Creates the given group if it doesn't already exist.",           format={             takes_table=false           },           name="create_logistic_group",           order=78,           parameters={             {               description="",               name="name",               optional=false,               order=0,               type="string"             },             {               description="",               name="type",               optional=true,               order=1,               type="defines.logistic_group_type"             }           },           return_values={}         },         {           description="Creates a new space platform on this force.",           format={             table_optional=true,             takes_table=true           },           name="create_space_platform",           order=63,           parameters={             {               description="The platform name. If not provided, a random name will be used.",               name="name",               optional=true,               order=0,               type="string"             },             {               description="The planet that the platform will orbit.",               name="planet",               optional=false,               order=1,               type="SpaceLocationID"             },             {               description="The starter pack required to build the platform.",               name="starter_pack",               optional=false,               order=2,               type="ItemWithQualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaSpacePlatform"             }           }         },         {           description="Deletes the given logistic group if it exists.",           format={             takes_table=false           },           name="delete_logistic_group",           order=79,           parameters={             {               description="",               name="name",               optional=false,               order=0,               type="string"             },             {               description="",               name="type",               optional=true,               order=1,               type="defines.logistic_group_type"             }           },           return_values={}         },         {           description="Disable all recipes and technologies. Only recipes and technologies enabled explicitly will be useable from this point.",           format={             takes_table=false           },           name="disable_all_prototypes",           order=3,           parameters={},           return_values={}         },         {           description="Disable research for this force.",           format={             takes_table=false           },           name="disable_research",           order=1,           parameters={},           return_values={}         },         {           description="Enables all recipes and technologies. The opposite of [LuaForce::disable_all_prototypes](runtime:LuaForce::disable_all_prototypes).",           format={             takes_table=false           },           name="enable_all_prototypes",           order=4,           parameters={},           return_values={}         },         {           description="Unlock all recipes.",           format={             takes_table=false           },           name="enable_all_recipes",           order=6,           parameters={},           return_values={}         },         {           description="Unlock all technologies.",           format={             takes_table=false           },           name="enable_all_technologies",           order=7,           parameters={},           return_values={}         },         {           description="Enable research for this force.",           format={             takes_table=false           },           name="enable_research",           order=2,           parameters={},           return_values={}         },         {           description="Finds all custom chart tags within the given bounding box on the given surface.",           format={             takes_table=false           },           name="find_chart_tags",           order=44,           parameters={             {               description="",               name="area",               optional=true,               order=1,               type="BoundingBox"             },             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaCustomChartTag"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="find_logistic_network_by_position",           order=34,           parameters={             {               description="Position to find a network for",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Surface to search on",               name="surface",               optional=false,               order=1,               type="SurfaceIdentification"             }           },           return_values={             {               description="The found network or `nil`.",               optional=true,               order=0,               type="LuaLogisticNetwork"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_ammo_damage_modifier",           order=22,           parameters={             {               description="Ammo category",               name="ammo",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Is `other` force in this force's cease fire list?",           format={             takes_table=false           },           name="get_cease_fire",           order=29,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="The entity build statistics for this force (built and mined) for the given surface.",           format={             takes_table=false           },           name="get_entity_build_count_statistics",           order=75,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaFlowStatistics"             }           }         },         {           description="Count entities of given type.\n\nThis function has O(1) time complexity as entity counts are kept and maintained in the game engine.",           format={             takes_table=false           },           name="get_entity_count",           order=0,           parameters={             {               description="Prototype name of the entity.",               name="name",               optional=false,               order=0,               type="EntityID"             }           },           return_values={             {               description="Number of entities of given prototype belonging to this force.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Fetches the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="get_evolution_factor",           order=64,           parameters={             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Fetches the spawner kill part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="get_evolution_factor_by_killing_spawners",           order=67,           parameters={             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Fetches the pollution part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="get_evolution_factor_by_pollution",           order=65,           parameters={             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Fetches the time part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="get_evolution_factor_by_time",           order=66,           parameters={             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="The fluid production statistics for this force for the given surface.",           format={             takes_table=false           },           name="get_fluid_production_statistics",           order=73,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaFlowStatistics"             }           }         },         {           description="Is `other` force in this force's friends list.",           format={             takes_table=false           },           name="get_friend",           order=31,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_gun_speed_modifier",           order=24,           parameters={             {               description="Ammo category",               name="ammo",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets if the given recipe is explicitly disabled from being hand crafted.",           format={             takes_table=false           },           name="get_hand_crafting_disabled_for_recipe",           order=47,           parameters={             {               description="",               name="recipe",               optional=false,               order=0,               type="RecipeID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Gets the count of a given item launched in rockets.",           format={             takes_table=false           },           name="get_item_launched",           order=40,           parameters={             {               description="The item to get",               name="item",               optional=false,               order=0,               type="ItemID"             }           },           return_values={             {               description="The count of the item that has been launched.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="The item production statistics for this force for the given surface.",           format={             takes_table=false           },           name="get_item_production_statistics",           order=72,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaFlowStatistics"             }           }         },         {           description="The kill counter statistics for this force for the given surface.",           format={             takes_table=false           },           name="get_kill_count_statistics",           order=74,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaFlowStatistics"             }           }         },         {           description="Gets the linked inventory for the given prototype and link ID if it exists or `nil`.",           format={             takes_table=false           },           name="get_linked_inventory",           order=51,           parameters={             {               description="",               name="link_id",               optional=false,               order=1,               type="uint"             },             {               description="",               name="prototype",               optional=false,               order=0,               type="EntityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Gets the information about the given logistic group.",           format={             takes_table=false           },           name="get_logistic_group",           order=77,           parameters={             {               description="",               name="name",               optional=false,               order=0,               type="string"             },             {               description="",               name="type",               optional=true,               order=1,               type="defines.logistic_group_type"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LogisticGroup"             }           }         },         {           description="Gets the names of the current logistic groups.",           format={             takes_table=false           },           name="get_logistic_groups",           order=76,           parameters={             {               description="",               name="type",               optional=true,               order=0,               type="defines.logistic_group_type"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="string"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="get_spawn_position",           order=36,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="MapPosition"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_surface_hidden",           order=38,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_turret_attack_modifier",           order=26,           parameters={             {               description="Turret prototype name",               name="turret",               optional=false,               order=0,               type="EntityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Has a chunk been charted?",           format={             takes_table=false           },           name="is_chunk_charted",           order=18,           parameters={             {               description="Position of the chunk.",               name="position",               optional=false,               order=1,               type="ChunkPosition"             },             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Has a chunk been requested for charting?",           format={             takes_table=false           },           name="is_chunk_requested_for_charting",           order=20,           parameters={             {               description="Position of the chunk.",               name="position",               optional=false,               order=1,               type="ChunkPosition"             },             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is the given chunk currently charted and visible (not covered by fog of war) on the map.",           format={             takes_table=false           },           name="is_chunk_visible",           order=19,           parameters={             {               description="",               name="position",               optional=false,               order=1,               type="ChunkPosition"             },             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this force an enemy? This differs from `get_cease_fire` in that it is always false for neutral force. This is equivalent to checking the `enemy` ForceCondition.",           format={             takes_table=false           },           name="is_enemy",           order=53,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is this force a friend? This differs from `get_friend` in that it is always true for neutral force. This is equivalent to checking the `friend` ForceCondition.",           format={             takes_table=false           },           name="is_friend",           order=52,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.",           format={             takes_table=false           },           name="is_pathfinder_busy",           order=32,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is the specified quality unlocked for this force?",           format={             takes_table=false           },           name="is_quality_unlocked",           order=59,           parameters={             {               description="Name of the quality.",               name="quality",               optional=false,               order=0,               type="QualityID"             }           },           return_values={}         },         {           description="Is the specified planet unlocked for this force?",           format={             takes_table=false           },           name="is_space_location_unlocked",           order=56,           parameters={             {               description="Name of the planet.",               name="name",               optional=false,               order=0,               type="SpaceLocationID"             }           },           return_values={}         },         {           description="Are the space platforms unlocked? This basically just controls the availability of the space platforms button.",           format={             takes_table=false           },           name="is_space_platforms_unlocked",           order=62,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Kill all units and flush the pathfinder.",           format={             takes_table=false           },           name="kill_all_units",           order=33,           parameters={},           return_values={}         },         {           description="Locks the quality to not be accessible to this force.",           format={             takes_table=false           },           name="lock_quality",           order=57,           parameters={             {               description="Name of the quality.",               name="quality",               optional=false,               order=0,               type="QualityID"             }           },           return_values={}         },         {           description="Locks the planet to not be accessible to this force.",           format={             takes_table=false           },           name="lock_space_location",           order=54,           parameters={             {               description="Name of the planet.",               name="name",               optional=false,               order=0,               type="SpaceLocationID"             }           },           return_values={}         },         {           description="Locks the space platforms, which disables the space platforms button",           format={             takes_table=false           },           name="lock_space_platforms",           order=60,           parameters={},           return_values={}         },         {           description="Play a sound for every player in this force.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for this force.",           format={             takes_table=false           },           name="play_sound",           order=46,           parameters={             {               description="The sound to play.",               name="sound_specification",               optional=false,               order=0,               type="PlaySoundSpecification"             }           },           return_values={}         },         {           description="Print text to the chat console of all players on this force.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.",           format={             takes_table=false           },           name="print",           order=42,           parameters={             {               description="",               name="message",               optional=false,               order=0,               type="LocalisedString"             },             {               description="",               name="print_settings",               optional=true,               order=1,               type="PrintSettings"             }           },           return_values={}         },         {           description="Force a rechart of the whole chart.",           format={             takes_table=false           },           name="rechart",           order=14,           parameters={             {               description="Which surface to rechart or all if not given.",               name="surface",               optional=true,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Research all technologies.",           format={             takes_table=false           },           name="research_all_technologies",           order=8,           parameters={             {               description="Whether technologies that are explicitly disabled in the prototype should also be researched. Defaults to `false`.",               name="include_disabled_prototypes",               optional=true,               order=0,               type="boolean"             }           },           raises={             {               description="",               name="on_research_finished",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Reset everything. All technologies are set to not researched, all modifiers are set to default values.",           format={             takes_table=false           },           name="reset",           order=10,           parameters={},           raises={             {               description="",               name="on_force_reset",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Resets evolution for this force to zero.",           format={             takes_table=false           },           name="reset_evolution",           order=45,           parameters={},           return_values={}         },         {           description="Load the original version of all recipes from the prototypes.",           format={             takes_table=false           },           name="reset_recipes",           order=5,           parameters={},           return_values={}         },         {           description="Load the original versions of technologies from prototypes. Preserves research state of technologies.",           format={             takes_table=false           },           name="reset_technologies",           order=9,           parameters={},           return_values={}         },         {           description="Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.",           format={             takes_table=false           },           name="reset_technology_effects",           order=11,           parameters={},           raises={             {               description="",               name="on_technology_effects_reset",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_ammo_damage_modifier",           order=23,           parameters={             {               description="Ammo category",               name="ammo",               optional=false,               order=0,               type="string"             },             {               description="",               name="modifier",               optional=false,               order=1,               type="double"             }           },           return_values={}         },         {           description="Add `other` force to this force's cease fire list. Forces on the cease fire list won't be targeted for attack.",           format={             takes_table=false           },           name="set_cease_fire",           order=28,           parameters={             {               description="",               name="cease_fire",               optional=false,               order=1,               type="boolean"             },             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           raises={             {               description="",               name="on_force_cease_fire_changed",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Sets the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="set_evolution_factor",           order=68,           parameters={             {               description="",               name="factor",               optional=false,               order=0,               type="double"             },             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Sets the spawner kill part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="set_evolution_factor_by_killing_spawners",           order=71,           parameters={             {               description="",               name="factor",               optional=false,               order=0,               type="double"             },             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Sets the pollution part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="set_evolution_factor_by_pollution",           order=69,           parameters={             {               description="",               name="factor",               optional=false,               order=0,               type="double"             },             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Sets the time part of the evolution factor of this force on the given surface.",           format={             takes_table=false           },           name="set_evolution_factor_by_time",           order=70,           parameters={             {               description="",               name="factor",               optional=false,               order=0,               type="double"             },             {               description="Defaults to \"nauvis\".",               name="surface",               optional=true,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Add `other` force to this force's friends list. Friends have unrestricted access to buildings and turrets won't fire at them.",           format={             takes_table=false           },           name="set_friend",           order=30,           parameters={             {               description="",               name="friend",               optional=false,               order=1,               type="boolean"             },             {               description="",               name="other",               optional=false,               order=0,               type="ForceID"             }           },           raises={             {               description="",               name="on_force_friends_changed",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_gun_speed_modifier",           order=25,           parameters={             {               description="Ammo category",               name="ammo",               optional=false,               order=0,               type="string"             },             {               description="",               name="modifier",               optional=false,               order=1,               type="double"             }           },           return_values={}         },         {           description="Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.",           format={             takes_table=false           },           name="set_hand_crafting_disabled_for_recipe",           order=48,           parameters={             {               description="",               name="hand_crafting_disabled",               optional=false,               order=1,               type="boolean"             },             {               description="",               name="recipe",               optional=false,               order=0,               type="RecipeID"             }           },           return_values={}         },         {           description="Sets the count of a given item launched in rockets.",           format={             takes_table=false           },           name="set_item_launched",           order=41,           parameters={             {               description="The count to set",               name="count",               optional=false,               order=1,               type="uint"             },             {               description="The item to set",               name="item",               optional=false,               order=0,               type="ItemID"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_spawn_position",           order=35,           parameters={             {               description="The new position on the given surface.",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Surface to set the spawn position for.",               name="surface",               optional=false,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_surface_hidden",           order=37,           parameters={             {               description="Whether to hide the surface or not.",               name="hidden",               optional=false,               order=1,               type="boolean"             },             {               description="Surface to set hidden for.",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_turret_attack_modifier",           order=27,           parameters={             {               description="",               name="modifier",               optional=false,               order=1,               type="double"             },             {               description="Turret prototype name",               name="turret",               optional=false,               order=0,               type="EntityID"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="unchart_chunk",           order=39,           parameters={             {               description="The chunk position to unchart.",               name="position",               optional=false,               order=0,               type="ChunkPosition"             },             {               description="Surface to unchart on.",               name="surface",               optional=false,               order=1,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Unlocks the quality to be accessible to this force.",           format={             takes_table=false           },           name="unlock_quality",           order=58,           parameters={             {               description="Name of the quality.",               name="quality",               optional=false,               order=0,               type="QualityID"             }           },           return_values={}         },         {           description="Unlocks the planet to be accessible to this force.",           format={             takes_table=false           },           name="unlock_space_location",           order=55,           parameters={             {               description="Name of the planet.",               name="name",               optional=false,               order=0,               type="SpaceLocationID"             }           },           return_values={}         },         {           description="Unlocks the space platforms, which enables the space platforms button",           format={             takes_table=false           },           name="unlock_space_platforms",           order=61,           parameters={},           return_values={}         }       },       name="LuaForce",       operators={},       order=51     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a fuel category.",       methods={},       name="LuaFuelCategoryPrototype",       operators={},       order=52,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="`true` if the furnace reads its ingredients contents, product contents and materials in crafting.",           name="circuit_read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the furnace outputs ingredients of current recipe as a signals to circuit network.",           name="circuit_read_ingredients",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the the furnace sends a signal when the recipe finishes.",           name="circuit_read_recipe_finished",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the the furnace sends a signal when it is working.",           name="circuit_read_working",           optional=false,           order=6,           read_type="boolean",           write_type="boolean"         },         {           description="The signal sent when the furnace finishes a recipe.",           name="circuit_recipe_finished_signal",           optional=true,           order=5,           read_type="SignalID",           write_type="SignalID"         },         {           description="The signal sent when the furnace is working.",           name="circuit_working_signal",           optional=true,           order=7,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if the read contents should include fuel (content of energy source)",           name="include_fuel",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the read contents should include items in crafting.",           name="include_in_crafting",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="Control behavior for furnaces.",       methods={},       name="LuaFurnaceControlBehavior",       operators={},       order=53,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="If the tips are allowed to be activated in this scenario, it is false by default.\n\nCan't be modified in a simulation (menu screen, tips and tricks simulation, factoriopedia simulation etc.)",           name="allow_tip_activation",           optional=false,           order=28,           read_type="boolean",           write_type="boolean"         },         {           description="True by default. Can be used to disable autosaving. Make sure to turn it back on soon after.",           name="autosave_enabled",           optional=false,           order=23,           read_type="boolean",           write_type="boolean"         },         {           description="Array of the names of all the backers that supported the game development early on. These are used as names for labs, locomotives, radars, roboports, and train stops.",           name="backer_names",           optional=false,           order=20,           read_type={             complex_type="LuaCustomTable",             key="uint",             value="string"           }         },         {           description="Records contained in the \"game blueprints\" tab of the blueprint library.",           name="blueprints",           optional=false,           order=26,           read_type={             complex_type="array",             value="LuaRecord"           }         },         {           description="The players that are currently online.\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index. This is primarily useful when you want to do some action against all online players.",           name="connected_players",           optional=false,           order=18,           read_type={             complex_type="array",             value="LuaPlayer"           }         },         {           description="Whether a console command has been used.",           name="console_command_used",           optional=false,           order=7,           read_type="boolean"         },         {           description="The default map gen settings for this save.",           name="default_map_gen_settings",           optional=false,           order=21,           read_type="MapGenSettings"         },         {           description="Current scenario difficulty.",           name="difficulty",           optional=false,           order=5,           read_type="defines.difficulty"         },         {           description="The currently active set of difficulty settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game.",           examples={             "```\n-- This will set the technology price multiplier to 12.\ngame.difficulty_settings.technology_price_multiplier = 12\n```"           },           name="difficulty_settings",           optional=false,           order=4,           read_type="DifficultySettings"         },         {           description="True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map.",           name="draw_resource_selection",           optional=false,           order=24,           read_type="boolean",           write_type="boolean"         },         {           description="Determines if enemy land mines are completely invisible or not.",           name="enemy_has_vision_on_land_mines",           optional=false,           order=22,           read_type="boolean",           write_type="boolean"         },         {           description="True while the victory screen is shown.",           name="finished",           optional=false,           order=13,           read_type="boolean"         },         {           description="True after players finished the game and clicked \"continue\".",           name="finished_but_continuing",           optional=false,           order=14,           read_type="boolean"         },         {           description="Get a table of all the forces that currently exist. This sparse table allows you to find forces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `name`s as the keys. Iterating with `ipairs()` will not work at all.",           name="forces",           optional=false,           order=6,           read_type={             complex_type="LuaCustomTable",             key={               complex_type="union",               full_format=false,               options={                 "uint",                 "string"               }             },             value="LuaForce"           }         },         {           description="The currently active set of map settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game.\n\nThis does not contain difficulty settings, use [LuaGameScript::difficulty_settings](runtime:LuaGameScript::difficulty_settings) instead.",           name="map_settings",           optional=false,           order=3,           read_type="MapSettings"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         },         {           description="",           name="permissions",           optional=false,           order=19,           read_type="LuaPermissionGroups"         },         {           description="",           name="planets",           optional=false,           order=17,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaPlanet"           }         },         {           description="This property is only populated inside [custom command](runtime:LuaCommandProcessor) handlers and when writing [Lua console commands](https://wiki.factorio.com/Console#Scripting_and_cheat_commands). Returns the player that is typing the command, `nil` in all other instances.\n\nSee [LuaGameScript::players](runtime:LuaGameScript::players) for accessing all players.",           name="player",           optional=true,           order=1,           read_type="LuaPlayer"         },         {           description="Get a table of all the players that currently exist. This sparse table allows you to find players by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `index`es as the keys. Iterating with `ipairs()` will not work at all.\n\nIf only a single player is required, [LuaGameScript::get_player](runtime:LuaGameScript::get_player) should be used instead, as it avoids the unnecessary overhead of passing the whole table to Lua.",           name="players",           optional=false,           order=2,           read_type={             complex_type="LuaCustomTable",             key={               complex_type="union",               full_format=false,               options={                 "uint",                 "string"               }             },             value="LuaPlayer"           }         },         {           description="Simulation-related functions, or `nil` if the current game is not a simulation.",           name="simulation",           optional=false,           order=8,           read_type="LuaSimulation"         },         {           description="Speed to update the map at. 1.0 is normal speed -- 60 UPS. Minimum value is 0.01.",           name="speed",           optional=false,           order=15,           read_type="float",           write_type="float"         },         {           description="Get a table of all the surfaces that currently exist. This sparse table allows you to find surfaces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `name`s as the keys. Iterating with `ipairs()` will not work at all.",           name="surfaces",           optional=false,           order=16,           read_type={             complex_type="LuaCustomTable",             key={               complex_type="union",               full_format=false,               options={                 "uint",                 "string"               }             },             value="LuaSurface"           }         },         {           description="True by default. Can be used to prevent the game engine from printing certain messages.",           lists={             "Prevented messages:\n\n- \"player-started-research\"\n- \"player-queued-research\"\n- \"player-cancelled-research\"\n- \"technology-researched\""           },           name="technology_notifications_enabled",           optional=false,           order=27,           read_type="boolean",           write_type="boolean"         },         {           description="Current map tick.",           name="tick",           optional=false,           order=9,           read_type="MapTick"         },         {           description="If the tick has been paused. This means that entity update has been paused.",           name="tick_paused",           optional=false,           order=11,           read_type="boolean",           write_type="boolean"         },         {           description="The number of ticks since this game was created using either \"new game\" or \"new game from scenario\". Notably, this number progresses even when the game is [tick_paused](runtime:LuaGameScript::tick_paused).\n\nThis differs from [LuaGameScript::tick](runtime:LuaGameScript::tick) in that creating a game from a scenario always starts with this value at `0`, even if the scenario has its own level data where the `tick` has progressed past `0`.",           name="ticks_played",           optional=false,           order=10,           read_type="MapTick"         },         {           description="The number of ticks to be run while the tick is paused.\n\nWhen [LuaGameScript::tick_paused](runtime:LuaGameScript::tick_paused) is true, ticks_to_run behaves the following way: While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again.",           name="ticks_to_run",           optional=false,           order=12,           read_type="uint",           write_type="uint"         },         {           description="",           name="train_manager",           optional=false,           order=25,           read_type="LuaTrainManager"         }       },       description="Main toplevel type, provides access to most of the API though its members. An instance of LuaGameScript is available as the global object named `game`.",       methods={         {           description="Instruct the game to perform an auto-save.\n\nOnly the server will save in multiplayer. In single player a standard auto-save is triggered.",           format={             takes_table=false           },           name="auto_save",           order=21,           parameters={             {               description="The autosave name if any. Saves will be named _autosave-*name* when provided.",               name="name",               optional=true,               order=0,               type="string"             }           },           return_values={}         },         {           description="Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",           format={             takes_table=false           },           name="ban_player",           order=28,           parameters={             {               description="The player to ban.",               name="player",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "PlayerIdentification",                   "string"                 }               }             },             {               description="The reason given if any.",               name="reason",               optional=true,               order=1,               type="string"             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_player_banned",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Run internal consistency checks. Allegedly prints any errors it finds.\n\nExists mainly for debugging reasons.",           format={             takes_table=false           },           name="check_consistency",           order=10,           parameters={},           return_values={}         },         {           description="Create a new force.\n\nThe game currently supports a maximum of 64 forces, including the three built-in forces. This means that a maximum of 61 new forces may be created. Force names must be unique.",           format={             takes_table=false           },           name="create_force",           order=17,           parameters={             {               description="Name of the new force",               name="force",               optional=false,               order=0,               type="string"             }           },           raises={             {               description="",               name="on_force_created",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The force that was just created",               optional=false,               order=0,               type="LuaForce"             }           }         },         {           description="Creates an inventory that is not owned by any game object.\n\nIt can be resized later with [LuaInventory::resize](runtime:LuaInventory::resize).\n\nMake sure to destroy it when you are done with it using [LuaInventory::destroy](runtime:LuaInventory::destroy).",           format={             takes_table=false           },           name="create_inventory",           order=38,           parameters={             {               description="The title of the GUI that is shown when this inventory is opened.",               name="gui_title",               optional=true,               order=1,               type="LocalisedString"             },             {               description="The number of slots the inventory initially has.",               name="size",               optional=false,               order=0,               type="uint16"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaInventory"             }           }         },         {           description="Creates a [LuaProfiler](runtime:LuaProfiler), which is used for measuring script performance.\n\nLuaProfiler cannot be serialized.",           format={             takes_table=false           },           name="create_profiler",           order=37,           parameters={             {               description="Create the timer stopped",               name="stopped",               optional=true,               order=0,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaProfiler"             }           }         },         {           description="Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.\n\n*Make sure* you actually want to use this over math.random(...) as this provides entirely different functionality over math.random(...).",           format={             takes_table=false           },           name="create_random_generator",           order=25,           parameters={             {               description="",               name="seed",               optional=true,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRandomGenerator"             }           }         },         {           description="Create a new surface.\n\nThe game currently supports a maximum of 4 294 967 295 surfaces, including the default surface. Surface names must be unique.",           format={             takes_table=false           },           name="create_surface",           order=19,           parameters={             {               description="Name of the new surface.",               name="name",               optional=false,               order=0,               type="string"             },             {               description="Map generation settings.",               name="settings",               optional=true,               order=1,               type="MapGenSettings"             }           },           raises={             {               description="",               name="on_surface_created",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The surface that was just created.",               optional=false,               order=0,               type="LuaSurface"             }           }         },         {           description="Deletes the given surface and all entities on it if possible.",           format={             takes_table=false           },           name="delete_surface",           order=22,           parameters={             {               description="The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           raises={             {               description="",               name="on_pre_surface_deleted",               optional=false,               order=0,               timeframe="future_tick"             },             {               description="",               name="on_surface_deleted",               optional=false,               order=1,               timeframe="future_tick"             }           },           return_values={             {               description="If the surface was queued to be deleted.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.",           format={             takes_table=false           },           name="disable_replay",           order=23,           parameters={},           return_values={}         },         {           description="Force a CRC check. Tells all peers to calculate their current CRC, which are then compared to each other. If a mismatch is detected, the game desyncs and some peers are forced to reconnect.",           format={             takes_table=false           },           name="force_crc",           order=16,           parameters={},           return_values={}         },         {           description="Gets an entity by its [name tag](runtime:LuaEntity::name_tag). Entity name tags can also be set in the entity \"extra settings\" GUI in the map editor.",           format={             takes_table=false           },           name="get_entity_by_tag",           order=4,           parameters={             {               description="",               name="tag",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Returns entity with a specified unit number or nil if entity with such number was not found or prototype does not have [EntityPrototypeFlags::get-by-unit-number](prototype:EntityPrototypeFlags::get_by_unit_number) flag set.",           format={             takes_table=false           },           name="get_entity_by_unit_number",           order=43,           parameters={             {               description="",               name="unit_number",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Gets the map exchange string for the map generation settings that were used to create this map.",           format={             takes_table=false           },           name="get_map_exchange_string",           order=34,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Gets the given player or returns `nil` if no player is found.",           format={             takes_table=false           },           name="get_player",           order=35,           parameters={             {               description="The player index or name.",               name="player",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint",                   "string"                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaPlayer"             }           }         },         {           description="The pollution statistics for this the given surface.",           format={             takes_table=false           },           name="get_pollution_statistics",           order=41,           parameters={             {               description="",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaFlowStatistics"             }           }         },         {           description="Gets the inventories created through [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory).\n\nInventories created through console commands will be owned by `\"core\"`.",           format={             takes_table=false           },           name="get_script_inventories",           order=39,           parameters={             {               description="The mod whose inventories to get. If not provided all inventories are returned.",               name="mod",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="A mapping of mod name to array of inventories owned by that mod.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value={                   complex_type="array",                   value="LuaInventory"                 }               }             }           }         },         {           description="Gets the given surface or returns `nil` if no surface is found.\n\nThis is a shortcut for [LuaGameScript::surfaces](runtime:LuaGameScript::surfaces).",           format={             takes_table=false           },           name="get_surface",           order=36,           parameters={             {               description="The surface index or name.",               name="surface",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "uint",                   "string"                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaSurface"             }           }         },         {           description="Returns vehicles in game",           format={             table_optional=false,             takes_table=true           },           name="get_vehicles",           order=42,           parameters={             {               description="",               name="force",               optional=true,               order=1,               type="ForceID"             },             {               description="",               name="has_passenger",               optional=true,               order=5,               type="boolean"             },             {               description="",               name="is_moving",               optional=true,               order=4,               type="boolean"             },             {               description=")",               name="surface",               optional=true,               order=2,               type="SurfaceIdentification"             },             {               description="",               name="type",               optional=true,               order=3,               type={                 complex_type="union",                 full_format=false,                 options={                   "EntityID",                   {                     complex_type="array",                     value="EntityID"                   }                 }               }             },             {               description="",               name="unit_number",               optional=true,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Is this the demo version of Factorio?",           format={             takes_table=false           },           name="is_demo",           order=6,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Whether the save is loaded as a multiplayer map.",           format={             takes_table=false           },           name="is_multiplayer",           order=33,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.",           format={             takes_table=false           },           name="kick_player",           order=27,           parameters={             {               description="The player to kick.",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             },             {               description="The reason given if any.",               name="reason",               optional=true,               order=1,               type="string"             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_player_kicked",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Marks two forces to be merged together. All players and entities in the source force will be reassigned to the target force. The source force will then be destroyed. Importantly, this does not merge technologies or bonuses, which are instead retained from the target force.\n\nThe three built-in forces (player, enemy and neutral) can't be destroyed, meaning they can't be used as the source argument to this function.\n\nThe source force is not removed until the end of the current tick, or if called during the [on_forces_merging](runtime:on_forces_merging) or [on_forces_merged](runtime:on_forces_merged) event, the end of the next tick.",           format={             takes_table=false           },           name="merge_forces",           order=18,           parameters={             {               description="The force to reassign all entities to.",               name="destination",               optional=false,               order=1,               type="ForceID"             },             {               description="The force to remove.",               name="source",               optional=false,               order=0,               type="ForceID"             }           },           raises={             {               description="",               name="on_forces_merged",               optional=false,               order=1,               timeframe="future_tick"             },             {               description="",               name="on_forces_merging",               optional=false,               order=0,               timeframe="future_tick"             }           },           return_values={}         },         {           description="Mutes the given player. Does nothing if the player running this isn't an admin.",           format={             takes_table=false           },           name="mute_player",           order=31,           parameters={             {               description="The player to mute.",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_player_muted",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Play a sound for every player in the game.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for that player.",           format={             takes_table=false           },           name="play_sound",           order=26,           parameters={             {               description="The sound to play.",               name="sound_specification",               optional=false,               order=0,               type="PlaySoundSpecification"             }           },           return_values={}         },         {           description="Print text to the chat console all players.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.",           format={             takes_table=false           },           name="print",           order=24,           parameters={             {               description="",               name="message",               optional=false,               order=0,               type="LocalisedString"             },             {               description="",               name="print_settings",               optional=true,               order=1,               type="PrintSettings"             }           },           return_values={}         },         {           description="Purges the given players messages from the game. Does nothing if the player running this isn't an admin.",           format={             takes_table=false           },           name="purge_player",           order=30,           parameters={             {               description="The player to purge.",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.\n\nAll specified entity prototypes must be autoplacable.",           format={             takes_table=false           },           name="regenerate_entity",           order=11,           parameters={             {               description="Prototype names of entity or entities to autoplace.",               name="entities",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   {                     complex_type="array",                     value="string"                   }                 }               }             }           },           return_values={}         },         {           description="Forces a reload of all mods.\n\nThis will act like saving and loading from the mod(s) perspective.\n\nThis will do nothing if run in multiplayer.\n\nThis disables the replay if replay is enabled.",           format={             takes_table=false           },           name="reload_mods",           order=8,           parameters={},           return_values={}         },         {           description="Forces a reload of the scenario script from the original scenario location.\n\nThis disables the replay if replay is enabled.",           format={             takes_table=false           },           name="reload_script",           order=7,           parameters={},           return_values={}         },         {           description="Remove players who are currently not connected from the map.",           format={             takes_table=false           },           name="remove_offline_players",           order=15,           parameters={             {               description="List of players to remove. If not specified, remove all offline players.",               name="players",               optional=true,               order=0,               type={                 complex_type="array",                 value="PlayerIdentification"               }             }           },           raises={             {               description="",               name="on_player_removed",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_pre_player_removed",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Reset scenario state (game_finished, player_won, etc.).",           format={             takes_table=false           },           name="reset_game_state",           order=1,           parameters={},           return_values={}         },         {           description="Resets the amount of time played for this map.",           format={             takes_table=false           },           name="reset_time_played",           order=40,           parameters={},           return_values={}         },         {           description="Saves the current configuration of Atlas to a file. This will result in huge file containing all of the game graphics moved to as small space as possible.\n\nExists mainly for debugging reasons.",           format={             takes_table=false           },           name="save_atlas",           order=9,           parameters={},           return_values={}         },         {           description="Instruct the server to save the map. Only actually saves when in multiplayer.",           format={             takes_table=false           },           name="server_save",           order=20,           parameters={             {               description="Save file name. If not specified, the currently running save is overwritten. If there is no current save, no save is made.",               name="name",               optional=true,               order=0,               type="string"             }           },           return_values={}         },         {           description="Set scenario state. Any parameters not provided do not change the current state.",           format={             table_optional=false,             takes_table=true           },           name="set_game_state",           order=0,           parameters={             {               description="",               name="can_continue",               optional=true,               order=3,               type="boolean"             },             {               description="",               name="game_finished",               optional=true,               order=0,               type="boolean"             },             {               description="",               name="next_level",               optional=true,               order=2,               type="string"             },             {               description="",               name="player_won",               optional=true,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="Set losing ending information for the current scenario.",           format={             table_optional=false,             takes_table=true           },           name="set_lose_ending_info",           order=3,           parameters={             {               description="",               name="bullet_points",               optional=true,               order=2,               type={                 complex_type="array",                 value="LocalisedString"               }             },             {               description="",               name="final_message",               optional=true,               order=3,               type="LocalisedString"             },             {               description="",               name="image_path",               optional=true,               order=4,               type="string"             },             {               description="",               name="message",               optional=true,               order=1,               type="LocalisedString"             },             {               description="",               name="title",               optional=false,               order=0,               type="LocalisedString"             }           },           return_values={}         },         {           description="Forces the screenshot saving system to wait until all queued screenshots have been written to disk.",           format={             takes_table=false           },           name="set_wait_for_screenshots_to_finish",           order=13,           parameters={},           return_values={}         },         {           description="Set winning ending information for the current scenario.",           format={             table_optional=false,             takes_table=true           },           name="set_win_ending_info",           order=2,           parameters={             {               description="",               name="bullet_points",               optional=true,               order=2,               type={                 complex_type="array",                 value="LocalisedString"               }             },             {               description="",               name="final_message",               optional=true,               order=3,               type="LocalisedString"             },             {               description="",               name="image_path",               optional=true,               order=4,               type="string"             },             {               description="",               name="message",               optional=true,               order=1,               type="LocalisedString"             },             {               description="",               name="title",               optional=false,               order=0,               type="LocalisedString"             }           },           return_values={}         },         {           description="Show an in-game message dialog.\n\nCan only be used when the map contains exactly one player.",           format={             table_optional=false,             takes_table=true           },           name="show_message_dialog",           order=5,           parameters={             {               description="Path to an image to show on the dialog",               name="image",               optional=true,               order=1,               type="string"             },             {               description="If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position. (Use `point_to={type=\"nowhere\"}` to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.",               name="point_to",               optional=true,               order=2,               type="GuiArrowSpecification"             },             {               description="The gui style to use for this speech bubble. Must be of type speech_bubble.",               name="style",               optional=true,               order=3,               type="string"             },             {               description="What the dialog should say",               name="text",               optional=false,               order=0,               type="LocalisedString"             },             {               description="Must be of type flow_style.",               name="wrapper_frame_style",               optional=true,               order=4,               type="string"             }           },           return_values={}         },         {           description="Take a screenshot of the game and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.\n\nIf Factorio is running headless, this function will do nothing.",           format={             table_optional=false,             takes_table=true           },           name="take_screenshot",           order=12,           parameters={             {               description="Whether to save the screenshot even during replay playback. Defaults to `false`.",               name="allow_in_replay",               optional=true,               order=14,               type="boolean"             },             {               description="Whether to render in double resolution and downscale the result (including GUI). Defaults to `false`.",               name="anti_alias",               optional=true,               order=10,               type="boolean"             },             {               description="If defined, the screenshot will only be taken for this player.",               name="by_player",               optional=true,               order=1,               type="PlayerIdentification"             },             {               description="Overrides the current surface daytime for the duration of screenshot rendering.",               name="daytime",               optional=true,               order=15,               type="double"             },             {               description="Screenshot requests are processed in between game update and render. The game may skip rendering (ie. drop frames) if the previous frame has not finished rendering or the game simulation starts to fall below 60 updates per second. If `force_render` is set to `true`, the game won't drop frames and process the screenshot request at the end of the update in which the request was created. This is not honored on multiplayer clients that are catching up to server. Defaults to `false`.",               name="force_render",               optional=true,               order=17,               type="boolean"             },             {               description="If `true` cloud shadows on ground won't be rendered. Defaults to `false`.",               name="hide_clouds",               optional=true,               order=11,               type="boolean"             },             {               description="If `true` fog effect and foreground space dust effect won't be rendered. Defaults to `false`.",               name="hide_fog",               optional=true,               order=12,               type="boolean"             },             {               description="The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `\"save/here/screenshot.png\"`) will create the necessary folder structure in `script-output`. Defaults to `\"screenshot.png\"`.",               name="path",               optional=true,               order=6,               type="string"             },             {               description="The player to focus on. Defaults to the local player.",               name="player",               optional=true,               order=0,               type="PlayerIdentification"             },             {               description="If defined, the screenshot will be centered on this position. Otherwise, the screenshot will center on `player`.",               name="position",               optional=true,               order=3,               type="MapPosition"             },             {               description="The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.",               name="quality",               optional=true,               order=13,               type="int"             },             {               description="The maximum allowed resolution is 16384x16384 (8192x8192 when `anti_alias` is `true`), but the maximum recommended resolution is 4096x4096 (resp. 2048x2048). The `x` value of the position is used as the width, the `y` value as the height.",               name="resolution",               optional=true,               order=4,               type="TilePosition"             },             {               description="When `true` and when `player` is specified, the building preview for the item in the player's cursor will also be rendered. Defaults to `false`.",               name="show_cursor_building_preview",               optional=true,               order=9,               type="boolean"             },             {               description="Whether to include entity info (\"Alt mode\") or not. Defaults to `false`.",               name="show_entity_info",               optional=true,               order=8,               type="boolean"             },             {               description="Whether to include GUIs in the screenshot or not. Defaults to `false`.",               name="show_gui",               optional=true,               order=7,               type="boolean"             },             {               description="If defined, the screenshot will be taken on this surface.",               name="surface",               optional=true,               order=2,               type="SurfaceIdentification"             },             {               description="Overrides the tick of water animation, if animated water is enabled.",               name="water_tick",               optional=true,               order=16,               type="uint"             },             {               description="The map zoom to take the screenshot at. Defaults to `1`.",               name="zoom",               optional=true,               order=5,               type="double"             }           },           return_values={}         },         {           description="Take a screenshot of the technology screen and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.",           format={             table_optional=false,             takes_table=true           },           name="take_technology_screenshot",           order=14,           parameters={             {               description="The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `\"save/here/screenshot.png\"`) will create the necessary folder structure in `script-output`. Defaults to `\"technology-screenshot.png\"`.",               name="path",               optional=true,               order=0,               type="string"             },             {               description="The screenshot will be taken for this player.",               name="player",               optional=false,               order=1,               type="PlayerIdentification"             },             {               description="The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.",               name="quality",               optional=true,               order=4,               type="int"             },             {               description="The technology to highlight.",               name="selected_technology",               optional=true,               order=2,               type="TechnologyID"             },             {               description="If `true`, disabled technologies will be skipped. Their successors will be attached to the disabled technology's parents. Defaults to `false`.",               name="skip_disabled",               optional=true,               order=3,               type="boolean"             }           },           return_values={}         },         {           description="Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",           format={             takes_table=false           },           name="unban_player",           order=29,           parameters={             {               description="The player to unban.",               name="player",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "PlayerIdentification",                   "string"                 }               }             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_player_unbanned",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Unmutes the given player. Does nothing if the player running this isn't an admin.",           format={             takes_table=false           },           name="unmute_player",           order=32,           parameters={             {               description="The player to unmute.",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           raises={             {               description="",               name="on_console_command",               optional=false,               order=1,               timeframe="instantly"             },             {               description="",               name="on_player_unmuted",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         }       },       name="LuaGameScript",       operators={},       order=54     },     {       abstract=true,       attributes={         {           description="The circuit condition. Writing `nil` clears the circuit condition.",           examples={             "```\n-- Tell an entity to be active (for example a lamp to be lit) when it receives a\n-- circuit signal of more than 4 chain signals.\na_behavior.circuit_condition = {\n  comparator=\">\",\n  first_signal={type=\"item\", name=\"rail-chain-signal\"},\n  constant=4\n}\n```"           },           name="circuit_condition",           optional=false,           order=2,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="`true` if this entity enable/disable state is controlled by circuit condition",           name="circuit_enable_disable",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if this should connect to the logistic network.",           name="connect_to_logistic_network",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="If the entity is currently disabled because of the control behavior.",           name="disabled",           optional=false,           order=0,           read_type="boolean"         },         {           description="The logistic condition. Writing `nil` clears the logistic condition.",           examples={             "```\n-- Tell an entity to be active (for example a lamp to be lit) when the logistics\n-- network it's connected to has more than four chain signals.\na_behavior.logistic_condition = {\n  comparator=\">\",\n  first_signal={type=\"item\", name=\"rail-chain-signal\"},\n  constant=4\n}\n```"           },           name="logistic_condition",           optional=false,           order=4,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         }       },       description="An abstract base class for behaviors that support switching the entity on or off based on some condition.",       methods={},       name="LuaGenericOnOffControlBehavior",       operators={},       order=55,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The parent group.",           name="group",           optional=false,           order=3,           read_type="LuaGroup",           subclasses={             "ItemSubGroup"           }         },         {           description="Localised name of the group.",           name="localised_name",           optional=false,           order=1,           read_type="LocalisedString"         },         {           description="",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.",           name="order",           optional=false,           order=6,           read_type="string"         },         {           description="The additional order value used in recipe ordering.",           name="order_in_recipe",           optional=false,           order=5,           read_type="string",           subclasses={             "ItemGroup"           }         },         {           description="Subgroups of this group.",           name="subgroups",           optional=false,           order=4,           read_type={             complex_type="array",             value="LuaGroup"           },           subclasses={             "ItemGroup"           }         },         {           description="",           name="type",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Item group or subgroup.",       methods={},       name="LuaGroup",       operators={},       order=56     },     {       abstract=false,       attributes={         {           description="The center part of the GUI. It is a flow element.",           name="center",           optional=false,           order=4,           read_type="LuaGuiElement"         },         {           description="The children GUI elements mapped by name <> element.",           name="children",           optional=false,           order=1,           read_type={             complex_type="dictionary",             key="string",             value="LuaGuiElement"           }         },         {           description="The flow used in the objectives window. It is a flow element. The objectives window is only visible when the flow is not empty or the objective text is set.",           name="goal",           optional=false,           order=5,           read_type="LuaGuiElement"         },         {           description="The left part of the GUI. It is a flow element inside a scroll pane element.",           name="left",           optional=false,           order=3,           read_type="LuaGuiElement"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="The player who owns this gui.",           name="player",           optional=false,           order=0,           read_type="LuaPlayer"         },         {           description="For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element.",           name="relative",           optional=false,           order=7,           read_type="LuaGuiElement"         },         {           description="For showing a GUI somewhere on the entire screen. It is an empty-widget element.",           name="screen",           optional=false,           order=6,           read_type="LuaGuiElement"         },         {           description="The top part of the GUI. It is a flow element inside a scroll pane element.",           name="top",           optional=false,           order=2,           read_type="LuaGuiElement"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="The root of the GUI. This type houses the root elements, `top`, `left`, `center`,  `goal`, and `screen`, to which other elements can be added to be displayed on screen.\n\nEvery player can have a different GUI state.",       methods={},       name="LuaGui",       operators={},       order=57     },     {       abstract=false,       attributes={         {           description="Whether this textfield (when in numeric mode) allows decimal numbers.",           name="allow_decimal",           optional=false,           order=56,           read_type="boolean",           subclasses={             "textfield"           },           write_type="boolean"         },         {           description="Whether this textfield (when in numeric mode) allows negative numbers.",           name="allow_negative",           optional=false,           order=57,           read_type="boolean",           subclasses={             "textfield"           },           write_type="boolean"         },         {           description="Whether the `\"none\"` state is allowed for this switch.\n\nThis can't be set to false if the current switch_state is 'none'.",           name="allow_none_state",           optional=false,           order=68,           read_type="boolean",           subclasses={             "switch"           },           write_type="boolean"         },         {           description="The anchor for this relative widget, if any. Setting `nil` clears the anchor.",           name="anchor",           optional=true,           order=64,           read_type="GuiAnchor",           write_type="GuiAnchor"         },         {           description="Whether this frame auto-centers on window resize when stored in [LuaGui::screen](runtime:LuaGui::screen).",           name="auto_center",           optional=false,           order=29,           read_type="boolean",           subclasses={             "frame"           },           write_type="boolean"         },         {           description="Whether this button will automatically toggle when clicked.",           name="auto_toggle",           optional=false,           order=31,           read_type="boolean",           subclasses={             "button",             "sprite-button"           },           write_type="boolean"         },         {           description="The text to display after the normal tab text (designed to work with numbers)",           name="badge_text",           optional=false,           order=30,           read_type="LocalisedString",           subclasses={             "tab"           },           write_type="LocalisedString"         },         {           description="The text displayed on this element. For frames, this is the \"heading\". For other elements, like buttons or labels, this is the content.\n\nWhilst this attribute may be used on all elements without producing an error, it doesn't make sense for tables and flows as they won't display it.",           name="caption",           optional=false,           order=4,           read_type="LocalisedString",           write_type="LocalisedString"         },         {           description="The child-elements of this GUI element.",           name="children",           optional=false,           order=22,           read_type={             complex_type="array",             value="LuaGuiElement"           }         },         {           description="Names of all the children of this element. These are the identifiers that can be used to access the child as an attribute of this element.",           name="children_names",           optional=false,           order=10,           read_type={             complex_type="array",             value="string"           }         },         {           description="The sprite to display on this sprite-button when it is clicked.",           name="clicked_sprite",           optional=false,           order=16,           read_type="SpritePath",           subclasses={             "sprite-button"           },           write_type="SpritePath"         },         {           description="The number of columns in this table.",           name="column_count",           optional=false,           order=51,           read_type="uint",           subclasses={             "table"           }         },         {           description="Direction of this element's layout.",           name="direction",           optional=false,           order=6,           read_type="GuiDirection",           subclasses={             "frame",             "flow",             "line"           }         },         {           description="The `frame` that is being moved when dragging this GUI element, if any. This element needs to be a child of the `drag_target` at some level.\n\nOnly top-level elements in [LuaGui::screen](runtime:LuaGui::screen) can be `drag_target`s.",           examples={             "```\n-- This creates a frame that contains a dragging handle which can move the frame.\nlocal frame = player.gui.screen.add{type=\"frame\", direction=\"vertical\"}\nlocal dragger = frame.add{type=\"empty-widget\", style=\"draggable_space\"}\ndragger.style.size = {128, 24}\ndragger.drag_target = frame\n```"           },           name="drag_target",           optional=true,           order=60,           read_type="LuaGuiElement",           subclasses={             "flow",             "frame",             "label",             "table",             "empty-widget"           },           write_type="LuaGuiElement"         },         {           description="Whether this table should draw a horizontal grid line below the first table row.",           name="draw_horizontal_line_after_headers",           optional=false,           order=50,           read_type="boolean",           subclasses={             "table"           },           write_type="boolean"         },         {           description="Whether this table should draw horizontal grid lines.",           name="draw_horizontal_lines",           optional=false,           order=49,           read_type="boolean",           subclasses={             "table"           },           write_type="boolean"         },         {           description="Whether this table should draw vertical grid lines.",           name="draw_vertical_lines",           optional=false,           order=48,           read_type="boolean",           subclasses={             "table"           },           write_type="boolean"         },         {           description="The elem filters of this choose-elem-button, if any. The compatible type of filter is determined by `elem_type`.\n\nWriting to this field does not change or clear the currently selected element.",           examples={             "```\n-- This will configure a choose-elem-button of type \"entity\" to only show items of type \"furnace\".\nbutton.elem_filters = {{filter = \"type\", type = \"furnace\"}}\n```",             "```\n-- Then, there are some types of filters that work on a specific kind of attribute. The following will configure a\n--   choose-elem-button of type \"entity\" to only show entities that have their \"hidden\" flags set.\nbutton.elem_filters = {{filter = \"hidden\"}}\n```",             "```\n-- Lastly, these filters can be combined at will, taking care to specify how they should be combined (either \"and\" or \"or\").\n--   The following will filter for any entities that are \"furnaces\" and that are not \"hidden\".\nbutton.elem_filters = {{filter = \"type\", type = \"furnace\"}, {filter = \"hidden\", invert = true, mode = \"and\"}}\n```"           },           name="elem_filters",           optional=true,           order=41,           read_type="PrototypeFilter",           subclasses={             "choose-elem-button"           },           write_type="PrototypeFilter"         },         {           description="The element tooltip to display when hovering over this element, or `nil`.",           name="elem_tooltip",           optional=true,           order=18,           read_type="ElemID",           write_type="ElemID"         },         {           description="The elem type of this choose-elem-button.",           name="elem_type",           optional=false,           order=39,           read_type="ElemType",           subclasses={             "choose-elem-button"           }         },         {           description="The elem value of this choose-elem-button, if any.\n\nThe `\"signal\"` type operates with [SignalID](runtime:SignalID).\n\nThe `\"with-quality\"` types operate with [PrototypeWithQuality](runtime:PrototypeWithQuality).\n\nThe remaining types use strings.",           name="elem_value",           optional=true,           order=40,           read_type={             complex_type="union",             full_format=false,             options={               "string",               "SignalID",               "PrototypeWithQuality"             }           },           subclasses={             "choose-elem-button"           },           write_type={             complex_type="union",             full_format=false,             options={               "string",               "SignalID",               "PrototypeWithQuality"             }           }         },         {           description="Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked.",           name="enabled",           optional=false,           order=45,           read_type="boolean",           write_type="boolean"         },         {           description="The entity associated with this entity-preview, camera, minimap, if any.",           name="entity",           optional=true,           order=63,           read_type="LuaEntity",           subclasses={             "entity-preview",             "camera",             "minimap"           },           write_type="LuaEntity"         },         {           description="The force this minimap is using, if any.",           name="force",           optional=true,           order=38,           read_type="string",           subclasses={             "minimap"           },           write_type="string"         },         {           description="How this element should interact with game controllers.",           name="game_controller_interaction",           optional=false,           order=33,           read_type="defines.game_controller_interaction",           write_type="defines.game_controller_interaction"         },         {           description="The GUI this element is a child of.",           name="gui",           optional=false,           order=1,           read_type="LuaGui"         },         {           description="Policy of the horizontal scroll bar.",           name="horizontal_scroll_policy",           optional=false,           order=19,           read_type="ScrollPolicy",           subclasses={             "scroll-pane"           },           write_type="ScrollPolicy"         },         {           description="The sprite to display on this sprite-button when it is hovered.",           name="hovered_sprite",           optional=false,           order=15,           read_type="SpritePath",           subclasses={             "sprite-button"           },           write_type="SpritePath"         },         {           description="Whether this GUI element is ignored by interaction. This makes clicks on this element 'go through' to the GUI element or even the game surface below it.",           name="ignored_by_interaction",           optional=false,           order=46,           read_type="boolean",           write_type="boolean"         },         {           description="The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).",           name="index",           optional=false,           order=0,           read_type="uint"         },         {           description="Whether this textfield displays as a password field, which renders all characters as `*`.",           name="is_password",           optional=false,           order=58,           read_type="boolean",           subclasses={             "textfield"           },           write_type="boolean"         },         {           description="The items in this dropdown or listbox.",           name="items",           optional=false,           order=23,           read_type={             complex_type="array",             value="LocalisedString"           },           subclasses={             "drop-down",             "list-box"           },           write_type={             complex_type="array",             value="LocalisedString"           }         },         {           description="The text shown for the left switch label.",           name="left_label_caption",           optional=false,           order=69,           read_type="LocalisedString",           subclasses={             "switch"           },           write_type="LocalisedString"         },         {           description="The tooltip shown on the left switch label.",           name="left_label_tooltip",           optional=false,           order=70,           read_type="LocalisedString",           subclasses={             "switch"           },           write_type="LocalisedString"         },         {           description="The location of this widget when stored in [LuaGui::screen](runtime:LuaGui::screen). `nil` if not set or not in [LuaGui::screen](runtime:LuaGui::screen).",           name="location",           optional=true,           order=28,           read_type="GuiLocation",           write_type="GuiLocation"         },         {           description="Whether this choose-elem-button can be changed by the player.",           name="locked",           optional=false,           order=47,           read_type="boolean",           subclasses={             "choose-elem-button"           },           write_type="boolean"         },         {           description="Whether this textfield loses focus after [defines.events.on_gui_confirmed](runtime:defines.events.on_gui_confirmed) is fired.",           name="lose_focus_on_confirm",           optional=false,           order=59,           read_type="boolean",           subclasses={             "textfield"           },           write_type="boolean"         },         {           description="The player index this minimap is using.",           name="minimap_player_index",           optional=false,           order=37,           read_type="uint",           subclasses={             "minimap"           },           write_type="uint"         },         {           description="The mouse button filters for this button or sprite-button.",           name="mouse_button_filter",           optional=false,           order=54,           read_type="MouseButtonFlags",           subclasses={             "button",             "sprite-button"           },           write_type="MouseButtonFlags"         },         {           description="The name of this element. `\"\"` if no name was set.",           examples={             "```\ngame.player.gui.top.greeting.name == \"greeting\"\n```"           },           name="name",           optional=false,           order=3,           read_type="string",           write_type="string"         },         {           description="The number to be shown in the bottom right corner of this sprite-button, or `nil` to show nothing.",           name="number",           optional=true,           order=26,           read_type="double",           subclasses={             "sprite-button"           },           write_type="double"         },         {           description="Whether this textfield is limited to only numeric characters.",           name="numeric",           optional=false,           order=55,           read_type="boolean",           subclasses={             "textfield"           },           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=74,           read_type="string"         },         {           description="The direct parent of this element. `nil` if this is a top-level element.",           name="parent",           optional=true,           order=2,           read_type="LuaGuiElement"         },         {           description="Index into [LuaGameScript::players](runtime:LuaGameScript::players) specifying the player who owns this element.",           name="player_index",           optional=false,           order=12,           read_type="uint"         },         {           description="The position this camera or minimap is focused on, if any.",           name="position",           optional=false,           order=34,           read_type="MapPosition",           subclasses={             "camera",             "minimap"           },           write_type="MapPosition"         },         {           description="The quality to be shown in the bottom left corner of this sprite-button, or `nil` to show nothing.",           name="quality",           optional=true,           order=25,           read_type="LuaQualityPrototype",           subclasses={             "sprite-button"           },           write_type="QualityID"         },         {           description="Whether this element will raise [on_gui_hover](runtime:on_gui_hover) and [on_gui_leave](runtime:on_gui_leave).",           name="raise_hover_events",           optional=false,           order=66,           read_type="boolean",           write_type="boolean"         },         {           description="Whether this text-box is read-only. Defaults to `false`.",           name="read_only",           optional=false,           order=44,           read_type="boolean",           subclasses={             "text-box"           },           write_type="boolean"         },         {           description="Whether the sprite widget should resize according to the sprite in it. Defaults to `true`.",           name="resize_to_sprite",           optional=false,           order=14,           read_type="boolean",           subclasses={             "sprite"           },           write_type="boolean"         },         {           description="The text shown for the right switch label.",           name="right_label_caption",           optional=false,           order=71,           read_type="LocalisedString",           subclasses={             "switch"           },           write_type="LocalisedString"         },         {           description="The tooltip shown on the right switch label.",           name="right_label_tooltip",           optional=false,           order=72,           read_type="LocalisedString",           subclasses={             "switch"           },           write_type="LocalisedString"         },         {           description="Whether the contents of this text-box are selectable. Defaults to `true`.",           name="selectable",           optional=false,           order=42,           read_type="boolean",           subclasses={             "text-box"           },           write_type="boolean"         },         {           description="The selected index for this dropdown or listbox. Returns `0` if none is selected.",           name="selected_index",           optional=false,           order=24,           read_type="uint",           subclasses={             "drop-down",             "list-box"           },           write_type="uint"         },         {           description="The selected tab index for this tabbed pane, if any.",           name="selected_tab_index",           optional=true,           order=61,           read_type="uint",           subclasses={             "tabbed-pane"           },           write_type="uint"         },         {           description="Related to the number to be shown in the bottom right corner of this sprite-button. When set to `true`, numbers that are non-zero and smaller than one are shown as a percentage rather than the value. For example, `0.5` will be shown as `50%` instead.",           name="show_percent_for_small_numbers",           optional=false,           order=27,           read_type="boolean",           subclasses={             "sprite-button"           },           write_type="boolean"         },         {           description="The value of this slider element.",           name="slider_value",           optional=false,           order=53,           read_type="double",           subclasses={             "slider"           },           write_type="double"         },         {           description="The sprite to display on this sprite-button or sprite in the default state.",           name="sprite",           optional=false,           order=13,           read_type="SpritePath",           subclasses={             "sprite-button",             "sprite"           },           write_type="SpritePath"         },         {           description="Is this checkbox or radiobutton checked?",           name="state",           optional=false,           order=11,           read_type="boolean",           subclasses={             "checkbox",             "radiobutton"           },           write_type="boolean"         },         {           description="The style of this element. When read, this evaluates to a [LuaStyle](runtime:LuaStyle). For writing, it only accepts a string that specifies the textual identifier (prototype name) of the desired style.",           name="style",           optional=false,           order=7,           read_type={             complex_type="union",             full_format=false,             options={               "LuaStyle",               "string"             }           },           write_type={             complex_type="union",             full_format=false,             options={               "LuaStyle",               "string"             }           }         },         {           description="The surface index this camera or minimap is using.",           name="surface_index",           optional=false,           order=35,           read_type="uint",           subclasses={             "camera",             "minimap"           },           write_type="uint"         },         {           description="The switch state for this switch.\n\nIf [LuaGuiElement::allow_none_state](runtime:LuaGuiElement::allow_none_state) is false this can't be set to `\"none\"`.",           name="switch_state",           optional=false,           order=67,           read_type="SwitchState",           subclasses={             "switch"           },           write_type="SwitchState"         },         {           description="The tabs and contents being shown in this tabbed-pane.",           name="tabs",           optional=false,           order=62,           read_type={             complex_type="array",             value="TabAndContent"           },           subclasses={             "tabbed-pane"           }         },         {           description="The tags associated with this LuaGuiElement.",           name="tags",           optional=false,           order=65,           read_type="Tags",           write_type="Tags"         },         {           description="The text contained in this textfield or text-box.",           name="text",           optional=false,           order=9,           read_type="string",           subclasses={             "textfield",             "text-box"           },           write_type="string"         },         {           description="Whether this button is currently toggled. When a button is toggled, it will use the `selected_graphical_set` and `selected_font_color` defined in its style.",           name="toggled",           optional=false,           order=32,           read_type="boolean",           subclasses={             "button",             "sprite-button"           },           write_type="boolean"         },         {           description="The text to display when hovering over this element. Writing `\"\"` or `nil` will disable the tooltip.",           name="tooltip",           optional=false,           order=17,           read_type="LocalisedString",           write_type="LocalisedString"         },         {           description="The type of this GUI element.",           name="type",           optional=false,           order=21,           read_type="GuiElementType"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=73,           read_type="boolean"         },         {           description="How much this progress bar is filled. It is a value in the range `[0, 1]`.",           name="value",           optional=false,           order=5,           read_type="double",           subclasses={             "progressbar"           },           write_type="double"         },         {           description="Whether the content of this table should be vertically centered. Overrides [LuaStyle::column_alignments](runtime:LuaStyle::column_alignments). Defaults to `true`.",           name="vertical_centering",           optional=false,           order=52,           read_type="boolean",           subclasses={             "table"           },           write_type="boolean"         },         {           description="Policy of the vertical scroll bar.",           name="vertical_scroll_policy",           optional=false,           order=20,           read_type="ScrollPolicy",           subclasses={             "scroll-pane"           },           write_type="ScrollPolicy"         },         {           description="Sets whether this GUI element is visible or completely hidden, taking no space in the layout.",           name="visible",           optional=false,           order=8,           read_type="boolean",           write_type="boolean"         },         {           description="Whether this text-box will word-wrap automatically. Defaults to `false`.",           name="word_wrap",           optional=false,           order=43,           read_type="boolean",           subclasses={             "text-box"           },           write_type="boolean"         },         {           description="The zoom this camera or minimap is using. This value must be positive.",           name="zoom",           optional=false,           order=36,           read_type="double",           subclasses={             "camera",             "minimap"           },           write_type="double"         }       },       description="An element of a custom GUI. This type is used to represent [any kind](runtime:GuiElementType) of a GUI element - labels, buttons and frames are all instances of this type. Just like [LuaEntity](runtime:LuaEntity), different kinds of elements support different attributes; attempting to access an attribute on an element that doesn't support it (for instance, trying to access the `column_count` of a `textfield`) will result in a runtime error.\n\nFor information on all supported GUI elements, see [GuiElementType](runtime:GuiElementType).\n\nEach GUI element allows access to its children by having them as attributes. Thus, one can use the `parent.child` syntax to refer to children. Lua also supports the `parent[\"child\"]` syntax to refer to the same element. This can be used in cases where the child has a name that isn't a valid Lua identifier.",       examples={         "```\n-- This will add a label called \"greeting\" to the top flow.\n-- Immediately after, it will change its text to illustrate accessing child elements.\ngame.player.gui.top.add{type=\"label\", name=\"greeting\", caption=\"Hi\"}\ngame.player.gui.top.greeting.caption = \"Hello there!\"\ngame.player.gui.top[\"greeting\"].caption = \"Actually, never mind, I don't like your face\"\n```",         "```\n-- This will add a tabbed-pane and 2 tabs with contents.\nlocal tabbed_pane = game.player.gui.top.add{type=\"tabbed-pane\"}\nlocal tab1 = tabbed_pane.add{type=\"tab\", caption=\"Tab 1\"}\nlocal tab2 = tabbed_pane.add{type=\"tab\", caption=\"Tab 2\"}\nlocal label1 = tabbed_pane.add{type=\"label\", caption=\"Label 1\"}\nlocal label2 = tabbed_pane.add{type=\"label\", caption=\"Label 2\"}\ntabbed_pane.add_tab(tab1, label1)\ntabbed_pane.add_tab(tab2, label2)\n```"       },       methods={         {           description="Add a new child element to this GuiElement.",           format={             table_optional=false,             takes_table=true           },           name="add",           order=0,           parameters={             {               description="Where to position the child element when in the `relative` element.",               name="anchor",               optional=true,               order=12,               type="GuiAnchor"             },             {               description="Text displayed on the child element. For frames, this is their title. For other elements, like buttons or labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.",               name="caption",               optional=true,               order=2,               type="LocalisedString"             },             {               description="Elem tooltip of the child element. Will be displayed above `tooltip`.",               name="elem_tooltip",               optional=true,               order=4,               type="ElemID"             },             {               description="Whether the child element is enabled. Defaults to `true`.",               name="enabled",               optional=true,               order=5,               type="boolean"             },             {               description="How the element should interact with game controllers. Defaults to [defines.game_controller_interaction.normal](runtime:defines.game_controller_interaction.normal).",               name="game_controller_interaction",               optional=true,               order=13,               type="defines.game_controller_interaction"             },             {               description="Whether the child element is ignored by interaction. Defaults to `false`.",               name="ignored_by_interaction",               optional=true,               order=8,               type="boolean"             },             {               description="Location in its parent that the child element should slot into. By default, the child will be appended onto the end.",               name="index",               optional=true,               order=11,               type="uint"             },             {               description="Whether the child element is locked. Defaults to `false`.",               name="locked",               optional=true,               order=7,               type="boolean"             },             {               description="Name of the child element. It must be unique within the parent element.",               name="name",               optional=true,               order=1,               type="string"             },             {               description="Whether this element will raise [on_gui_hover](runtime:on_gui_hover) and [on_gui_leave](runtime:on_gui_leave). Defaults to `false`.",               name="raise_hover_events",               optional=true,               order=14,               type="boolean"             },             {               description="The name of the style prototype to apply to the new element.",               name="style",               optional=true,               order=9,               type="string"             },             {               description="[Tags](runtime:Tags) associated with the child element.",               name="tags",               optional=true,               order=10,               type="Tags"             },             {               description="Tooltip of the child element.",               name="tooltip",               optional=true,               order=3,               type="LocalisedString"             },             {               description="The kind of element to add, which potentially has its own attributes as listed below.",               name="type",               optional=false,               order=0,               type="GuiElementType"             },             {               description="Whether the child element is visible. Defaults to `true`.",               name="visible",               optional=true,               order=6,               type="boolean"             }           },           return_values={             {               description="The GUI element that was added.",               optional=false,               order=0,               type="LuaGuiElement"             }           },           variant_parameter_description="Other attributes may be specified depending on `type`:",           variant_parameter_groups={             {               description="",               name="button",               order=0,               parameters={                 {                   description="Whether the button will automatically toggle when clicked. Defaults to `false`.",                   name="auto_toggle",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="Which mouse buttons the button responds to. Defaults to `\"left-and-right\"`.",                   name="mouse_button_filter",                   optional=true,                   order=0,                   type="MouseButtonFlags"                 },                 {                   description="The initial toggled state of the button. Defaults to `false`.",                   name="toggled",                   optional=true,                   order=2,                   type="boolean"                 }               }             },             {               description="",               name="camera",               order=14,               parameters={                 {                   description="The position the camera centers on.",                   name="position",                   optional=false,                   order=0,                   type="MapPosition"                 },                 {                   description="The surface that the camera will render. Defaults to the player's current surface.",                   name="surface_index",                   optional=true,                   order=1,                   type="uint"                 },                 {                   description="The initial camera zoom. Defaults to `0.75`.",                   name="zoom",                   optional=true,                   order=2,                   type="double"                 }               }             },             {               description="",               name="checkbox",               order=6,               parameters={                 {                   description="The initial checked-state of the checkbox.",                   name="state",                   optional=false,                   order=0,                   type="boolean"                 }               }             },             {               description="",               name="choose-elem-button",               order=15,               parameters={                 {                   description="If type is `\"achievement\"` - the default value for the button.",                   name="achievement",                   optional=true,                   order=9,                   type="string"                 },                 {                   description="If type is `\"asteroid-chunk\"` - the default value for the button.",                   name="asteroid-chunk",                   optional=true,                   order=12,                   type="string"                 },                 {                   description="If type is `\"decorative\"` - the default value for the button.",                   name="decorative",                   optional=true,                   order=7,                   type="string"                 },                 {                   description="Filters describing what to show in the selection window. The applicable filter depends on the `elem_type`.",                   name="elem_filters",                   optional=true,                   order=18,                   type="PrototypeFilter"                 },                 {                   description="The type of the button.",                   name="elem_type",                   optional=false,                   order=0,                   type="ElemType"                 },                 {                   description="If type is `\"entity\"` - the default value for the button.",                   name="entity",                   optional=true,                   order=3,                   type="string"                 },                 {                   description="If type is `\"entity-with-quality\"` - the default value for the button.",                   name="entity-with-quality",                   optional=true,                   order=15,                   type="PrototypeWithQuality"                 },                 {                   description="If type is `\"equipment\"` - the default value for the button.",                   name="equipment",                   optional=true,                   order=10,                   type="string"                 },                 {                   description="If type is `\"equipment-with-quality\"` - the default value for the button.",                   name="equipment-with-quality",                   optional=true,                   order=17,                   type="PrototypeWithQuality"                 },                 {                   description="If type is `\"fluid\"` - the default value for the button.",                   name="fluid",                   optional=true,                   order=5,                   type="string"                 },                 {                   description="If type is `\"item\"` - the default value for the button.",                   name="item",                   optional=true,                   order=1,                   type="string"                 },                 {                   description="If type is `\"item-group\"` - the default value for the button.",                   name="item-group",                   optional=true,                   order=8,                   type="string"                 },                 {                   description="If type is `\"item-with-quality\"` - the default value for the button.",                   name="item-with-quality",                   optional=true,                   order=14,                   type="PrototypeWithQuality"                 },                 {                   description="If type is `\"recipe\"` - the default value for the button.",                   name="recipe",                   optional=true,                   order=6,                   type="string"                 },                 {                   description="If type is `\"recipe-with-quality\"` - the default value for the button.",                   name="recipe-with-quality",                   optional=true,                   order=16,                   type="PrototypeWithQuality"                 },                 {                   description="If type is `\"signal\"` - the default value for the button.",                   name="signal",                   optional=true,                   order=4,                   type="SignalID"                 },                 {                   description="If type is `\"space-location\"` - the default value for the button.",                   name="space-location",                   optional=true,                   order=13,                   type="string"                 },                 {                   description="If type is `\"technology\"` - the default value for the button.",                   name="technology",                   optional=true,                   order=11,                   type="string"                 },                 {                   description="If type is `\"tile\"` - the default value for the button.",                   name="tile",                   optional=true,                   order=2,                   type="string"                 }               }             },             {               description="",               name="drop-down",               order=11,               parameters={                 {                   description="The initial items in the dropdown.",                   name="items",                   optional=true,                   order=0,                   type={                     complex_type="array",                     value="LocalisedString"                   }                 },                 {                   description="The index of the initially selected item. Defaults to 0.",                   name="selected_index",                   optional=true,                   order=1,                   type="uint"                 }               }             },             {               description="",               name="flow",               order=1,               parameters={                 {                   description="The initial direction of the flow's layout. Defaults to `\"horizontal\"`.",                   name="direction",                   optional=true,                   order=0,                   type="GuiDirection"                 }               }             },             {               description="",               name="frame",               order=2,               parameters={                 {                   description="The initial direction of the frame's layout. Defaults to `\"horizontal\"`.",                   name="direction",                   optional=true,                   order=0,                   type="GuiDirection"                 }               }             },             {               description="",               name="line",               order=12,               parameters={                 {                   description="The initial direction of the line. Defaults to `\"horizontal\"`.",                   name="direction",                   optional=true,                   order=0,                   type="GuiDirection"                 }               }             },             {               description="",               name="list-box",               order=13,               parameters={                 {                   description="The initial items in the listbox.",                   name="items",                   optional=true,                   order=0,                   type={                     complex_type="array",                     value="LocalisedString"                   }                 },                 {                   description="The index of the initially selected item. Defaults to 0.",                   name="selected_index",                   optional=true,                   order=1,                   type="uint"                 }               }             },             {               description="",               name="minimap",               order=18,               parameters={                 {                   description="The player index the map should use. Defaults to the current player.",                   name="chart_player_index",                   optional=true,                   order=2,                   type="uint"                 },                 {                   description="The force this minimap should use. Defaults to the player's current force.",                   name="force",                   optional=true,                   order=3,                   type="string"                 },                 {                   description="The position the minimap centers on. Defaults to the player's current position.",                   name="position",                   optional=true,                   order=0,                   type="MapPosition"                 },                 {                   description="The surface the camera will render. Defaults to the player's current surface.",                   name="surface_index",                   optional=true,                   order=1,                   type="uint"                 },                 {                   description="The initial camera zoom. Defaults to `0.75`.",                   name="zoom",                   optional=true,                   order=4,                   type="double"                 }               }             },             {               description="",               name="progressbar",               order=5,               parameters={                 {                   description="The initial value of the progressbar, in the range `[0, 1]`. Defaults to `0`.",                   name="value",                   optional=true,                   order=0,                   type="double"                 }               }             },             {               description="",               name="radiobutton",               order=7,               parameters={                 {                   description="The initial checked-state of the radiobutton.",                   name="state",                   optional=false,                   order=0,                   type="boolean"                 }               }             },             {               description="",               name="scroll-pane",               order=10,               parameters={                 {                   description="Policy of the horizontal scroll bar. Defaults to `\"auto\"`.",                   name="horizontal_scroll_policy",                   optional=true,                   order=0,                   type="ScrollPolicy"                 },                 {                   description="Policy of the vertical scroll bar. Defaults to `\"auto\"`.",                   name="vertical_scroll_policy",                   optional=true,                   order=1,                   type="ScrollPolicy"                 }               }             },             {               description="",               name="slider",               order=17,               parameters={                 {                   description="Defaults to `true`.",                   name="discrete_values",                   optional=true,                   order=4,                   type="boolean"                 },                 {                   description="The maximum value for the slider. Defaults to `30`.",                   name="maximum_value",                   optional=true,                   order=1,                   type="double"                 },                 {                   description="The minimum value for the slider. Defaults to `0`.",                   name="minimum_value",                   optional=true,                   order=0,                   type="double"                 },                 {                   description="The initial value for the slider. Defaults to `minimum_value`.",                   name="value",                   optional=true,                   order=2,                   type="double"                 },                 {                   description="The minimum value the slider can move. Defaults to `1`.",                   name="value_step",                   optional=true,                   order=3,                   type="double"                 }               }             },             {               description="",               name="sprite",               order=9,               parameters={                 {                   description="Whether the widget should resize according to the sprite in it. Defaults to `true`.",                   name="resize_to_sprite",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="Path to the image to display.",                   name="sprite",                   optional=true,                   order=0,                   type="SpritePath"                 }               }             },             {               description="",               name="sprite-button",               order=8,               parameters={                 {                   description="Whether the button will automatically toggle when clicked. Defaults to `false`.",                   name="auto_toggle",                   optional=true,                   order=7,                   type="boolean"                 },                 {                   description="Path to the image to display on the button when it is clicked.",                   name="clicked_sprite",                   optional=true,                   order=2,                   type="SpritePath"                 },                 {                   description="Path to the image to display on the button when it is hovered.",                   name="hovered_sprite",                   optional=true,                   order=1,                   type="SpritePath"                 },                 {                   description="The mouse buttons that the button responds to. Defaults to `\"left-and-right\"`.",                   name="mouse_button_filter",                   optional=true,                   order=6,                   type="MouseButtonFlags"                 },                 {                   description="The number shown on the button.",                   name="number",                   optional=true,                   order=4,                   type="double"                 },                 {                   description="The name of the quality shown on the button.",                   name="quality",                   optional=true,                   order=3,                   type="string"                 },                 {                   description="Formats small numbers as percentages. Defaults to `false`.",                   name="show_percent_for_small_numbers",                   optional=true,                   order=5,                   type="boolean"                 },                 {                   description="Path to the image to display on the button.",                   name="sprite",                   optional=true,                   order=0,                   type="SpritePath"                 },                 {                   description="The initial toggled state of the button. Defaults to `false`.",                   name="toggled",                   optional=true,                   order=8,                   type="boolean"                 }               }             },             {               description="",               name="switch",               order=20,               parameters={                 {                   description="Whether the switch can be set to a middle state. Defaults to `false`.",                   name="allow_none_state",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="",                   name="left_label_caption",                   optional=true,                   order=2,                   type="LocalisedString"                 },                 {                   description="",                   name="left_label_tooltip",                   optional=true,                   order=3,                   type="LocalisedString"                 },                 {                   description="",                   name="right_label_caption",                   optional=true,                   order=4,                   type="LocalisedString"                 },                 {                   description="",                   name="right_label_tooltip",                   optional=true,                   order=5,                   type="LocalisedString"                 },                 {                   description="If set to \"none\", `allow_none_state` must be `true`. Defaults to `\"left\"`.",                   name="switch_state",                   optional=true,                   order=0,                   type="SwitchState"                 }               }             },             {               description="",               name="tab",               order=19,               parameters={                 {                   description="The text to display after the normal tab text (designed to work with numbers).",                   name="badge_text",                   optional=true,                   order=0,                   type="LocalisedString"                 }               }             },             {               description="",               name="table",               order=3,               parameters={                 {                   description="Number of columns. This can't be changed after the table is created.",                   name="column_count",                   optional=false,                   order=0,                   type="uint"                 },                 {                   description="Whether the table should draw a single horizontal grid line after the headers. Defaults to `false`.",                   name="draw_horizontal_line_after_headers",                   optional=true,                   order=3,                   type="boolean"                 },                 {                   description="Whether the table should draw horizontal grid lines. Defaults to `false`.",                   name="draw_horizontal_lines",                   optional=true,                   order=2,                   type="boolean"                 },                 {                   description="Whether the table should draw vertical grid lines. Defaults to `false`.",                   name="draw_vertical_lines",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="Whether the content of the table should be vertically centered. Defaults to `true`.",                   name="vertical_centering",                   optional=true,                   order=4,                   type="boolean"                 }               }             },             {               description="",               name="text-box",               order=16,               parameters={                 {                   description="Whether to add the rich text icon selector to the text box. This attribute can't be changed after creating the widget. Defaults to `false`.",                   name="icon_selector",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="The initial text contained in the text-box.",                   name="text",                   optional=true,                   order=0,                   type="string"                 }               }             },             {               description="",               name="textfield",               order=4,               parameters={                 {                   description="Defaults to `false`.",                   name="allow_decimal",                   optional=true,                   order=2,                   type="boolean"                 },                 {                   description="Defaults to `false`.",                   name="allow_negative",                   optional=true,                   order=3,                   type="boolean"                 },                 {                   description="Whether to add the rich text icon selector to the text field. This attribute can't be changed after creating the widget. Defaults to `false`.",                   name="icon_selector",                   optional=true,                   order=6,                   type="boolean"                 },                 {                   description="Defaults to `false`.",                   name="is_password",                   optional=true,                   order=4,                   type="boolean"                 },                 {                   description="Defaults to `false`.",                   name="lose_focus_on_confirm",                   optional=true,                   order=5,                   type="boolean"                 },                 {                   description="Defaults to `false`.",                   name="numeric",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="The initial text contained in the textfield.",                   name="text",                   optional=true,                   order=0,                   type="string"                 }               }             }           }         },         {           description="Inserts a string at the end or at the given index of this dropdown or listbox.",           format={             takes_table=false           },           name="add_item",           order=9,           parameters={             {               description="The index at which to insert the item.",               name="index",               optional=true,               order=1,               type="uint"             },             {               description="The text to insert.",               name="string",               optional=false,               order=0,               type="LocalisedString"             }           },           return_values={},           subclasses={             "drop-down",             "list-box"           }         },         {           description="Adds the given tab and content widgets to this tabbed pane as a new tab.",           format={             takes_table=false           },           name="add_tab",           order=26,           parameters={             {               description="The content to show when this tab is selected. Can be any type of GUI element.",               name="content",               optional=false,               order=1,               type="LuaGuiElement"             },             {               description="The tab to add, must be a GUI element of type \"tab\".",               name="tab",               optional=false,               order=0,               type="LuaGuiElement"             }           },           return_values={},           subclasses={             "tabbed-pane"           }         },         {           description="Moves this GUI element to the \"front\" so it will draw over other elements.\n\nOnly works for elements in [LuaGui::screen](runtime:LuaGui::screen).",           format={             takes_table=false           },           name="bring_to_front",           order=30,           parameters={},           return_values={}         },         {           description="Remove children of this element. Any [LuaGuiElement](runtime:LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.",           examples={             "```\ngame.player.gui.top.clear()\n```"           },           format={             takes_table=false           },           name="clear",           order=1,           parameters={},           return_values={}         },         {           description="Removes the items in this dropdown or listbox.",           format={             takes_table=false           },           name="clear_items",           order=6,           parameters={},           return_values={},           subclasses={             "drop-down",             "list-box"           }         },         {           description="Closes the dropdown list if this is a dropdown and it is open.",           format={             takes_table=false           },           name="close_dropdown",           order=31,           parameters={},           return_values={}         },         {           description="Remove this element, along with its children. Any [LuaGuiElement](runtime:LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.\n\nThe top-level GUI elements - [LuaGui::top](runtime:LuaGui::top), [LuaGui::left](runtime:LuaGui::left), [LuaGui::center](runtime:LuaGui::center) and [LuaGui::screen](runtime:LuaGui::screen) - can't be destroyed.",           examples={             "```\ngame.player.gui.top.greeting.destroy()\n```"           },           format={             takes_table=false           },           name="destroy",           order=2,           parameters={},           return_values={}         },         {           description="Focuses this GUI element if possible.",           format={             takes_table=false           },           name="focus",           order=18,           parameters={},           return_values={}         },         {           description="Forces this frame to re-auto-center. Only works on frames stored directly in [LuaGui::screen](runtime:LuaGui::screen).",           format={             takes_table=false           },           name="force_auto_center",           order=28,           parameters={},           raises={             {               description="",               name="on_gui_location_changed",               optional=false,               order=0,               timeframe="future_tick"             }           },           return_values={},           subclasses={             "frame"           }         },         {           description="Gets the index that this element has in its parent element.\n\nThis iterates through the children of the parent of this element, meaning this has a non-free cost to get, but is faster than doing the equivalent in Lua.",           format={             takes_table=false           },           name="get_index_in_parent",           order=4,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Gets the item at the given index from this dropdown or listbox.",           format={             takes_table=false           },           name="get_item",           order=7,           parameters={             {               description="The index to get",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LocalisedString"             }           },           subclasses={             "drop-down",             "list-box"           }         },         {           description="The mod that owns this Gui element or `nil` if it's owned by the scenario script.\n\nThis has a not-super-expensive, but non-free cost to get.",           format={             takes_table=false           },           name="get_mod",           order=3,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type="string"             }           }         },         {           description="Returns whether this slider only allows discrete values.",           format={             takes_table=false           },           name="get_slider_discrete_values",           order=15,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Gets this sliders maximum value.",           format={             takes_table=false           },           name="get_slider_maximum",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets this sliders minimum value.",           format={             takes_table=false           },           name="get_slider_minimum",           order=11,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets the minimum distance this slider can move.",           format={             takes_table=false           },           name="get_slider_value_step",           order=14,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Removes the item at the given index from this dropdown or listbox.",           format={             takes_table=false           },           name="remove_item",           order=10,           parameters={             {               description="The index",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={},           subclasses={             "drop-down",             "list-box"           }         },         {           description="Removes the given tab and its associated content from this tabbed pane.\n\nRemoving a tab does not destroy the tab or the tab contents. It just removes them from the view.",           format={             takes_table=false           },           name="remove_tab",           order=27,           parameters={             {               description="The tab to remove or `nil` to remove all tabs.",               name="tab",               optional=true,               order=0,               type="LuaGuiElement"             }           },           return_values={},           subclasses={             "tabbed-pane"           }         },         {           description="Scrolls this scroll bar to the bottom.",           format={             takes_table=false           },           name="scroll_to_bottom",           order=20,           parameters={},           return_values={},           subclasses={             "scroll-pane",             "text-box"           }         },         {           description="Scrolls this scroll bar such that the specified GUI element is visible to the player.",           format={             takes_table=false           },           name="scroll_to_element",           order=23,           parameters={             {               description="The element to scroll to.",               name="element",               optional=false,               order=0,               type="LuaGuiElement"             },             {               description="Where the element should be positioned in the scroll-pane. Defaults to `\"in-view\"`.",               name="scroll_mode",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="in-view"                   },                   {                     complex_type="literal",                     value="top-third"                   }                 }               }             }           },           return_values={},           subclasses={             "scroll-pane"           }         },         {           description="Scrolls the scroll bar such that the specified listbox item is visible to the player.",           format={             takes_table=false           },           name="scroll_to_item",           order=29,           parameters={             {               description="The item index to scroll to.",               name="index",               optional=false,               order=0,               type="int"             },             {               description="Where the item should be positioned in the list-box. Defaults to `\"in-view\"`.",               name="scroll_mode",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="in-view"                   },                   {                     complex_type="literal",                     value="top-third"                   }                 }               }             }           },           return_values={},           subclasses={             "list-box"           }         },         {           description="Scrolls this scroll bar to the left.",           format={             takes_table=false           },           name="scroll_to_left",           order=21,           parameters={},           return_values={},           subclasses={             "scroll-pane",             "text-box"           }         },         {           description="Scrolls this scroll bar to the right.",           format={             takes_table=false           },           name="scroll_to_right",           order=22,           parameters={},           return_values={},           subclasses={             "scroll-pane",             "text-box"           }         },         {           description="Scrolls this scroll bar to the top.",           format={             takes_table=false           },           name="scroll_to_top",           order=19,           parameters={},           return_values={},           subclasses={             "scroll-pane",             "text-box"           }         },         {           description="Selects a range of text in this textbox.",           examples={             "```\n-- Select the characters \"amp\" from \"example\":\ntextbox.select(3, 5)\n```",             "```\n-- Move the cursor to the start of the text box:\ntextbox.select(1, 0)\n```"           },           format={             takes_table=false           },           name="select",           order=25,           parameters={             {               description="The index of the last character to select",               name="end_index",               optional=false,               order=1,               type="int"             },             {               description="The index of the first character to select",               name="start_index",               optional=false,               order=0,               type="int"             }           },           return_values={},           subclasses={             "textfield",             "text-box"           }         },         {           description="Selects all the text in this textbox.",           format={             takes_table=false           },           name="select_all",           order=24,           parameters={},           return_values={},           subclasses={             "textfield",             "text-box"           }         },         {           description="Sets the given string at the given index in this dropdown or listbox.",           format={             takes_table=false           },           name="set_item",           order=8,           parameters={             {               description="The index whose text to replace.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The text to set at the given index.",               name="string",               optional=false,               order=1,               type="LocalisedString"             }           },           return_values={},           subclasses={             "drop-down",             "list-box"           }         },         {           description="Sets whether this slider only allows discrete values.",           format={             takes_table=false           },           name="set_slider_discrete_values",           order=17,           parameters={             {               description="",               name="value",               optional=false,               order=0,               type="boolean"             }           },           return_values={}         },         {           description="Sets this sliders minimum and maximum values. The minimum can't be >= the maximum.",           format={             takes_table=false           },           name="set_slider_minimum_maximum",           order=13,           parameters={             {               description="",               name="maximum",               optional=false,               order=1,               type="double"             },             {               description="",               name="minimum",               optional=false,               order=0,               type="double"             }           },           return_values={}         },         {           description="Sets the minimum distance this slider can move. The minimum distance can't be > (max - min).",           format={             takes_table=false           },           name="set_slider_value_step",           order=16,           parameters={             {               description="",               name="value",               optional=false,               order=0,               type="double"             }           },           return_values={}         },         {           description="Swaps the children at the given indices in this element.",           format={             takes_table=false           },           name="swap_children",           order=5,           parameters={             {               description="The index of the first child.",               name="index_1",               optional=false,               order=0,               type="uint"             },             {               description="The index of the second child.",               name="index_2",               optional=false,               order=1,               type="uint"             }           },           return_values={}         }       },       name="LuaGuiElement",       operators={         {           description="The indexing operator. Gets children by name.",           name="index",           optional=true,           order=0,           read_type="LuaGuiElement"         }       },       order=58     },     {       abstract=false,       attributes={         {           description="",           name="connections",           optional=false,           order=7,           read_type={             complex_type="array",             value="HeatConnection"           }         },         {           description="",           name="default_temperature",           optional=false,           order=1,           read_type="double"         },         {           description="",           name="max_temperature",           optional=false,           order=0,           read_type="double"         },         {           description="",           name="max_transfer",           optional=false,           order=3,           read_type="double"         },         {           description="",           name="min_temperature_gradient",           optional=false,           order=4,           read_type="double"         },         {           description="",           name="min_working_temperature",           optional=false,           order=5,           read_type="double"         },         {           description="",           name="minimum_glow_temperature",           optional=false,           order=6,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="",           name="specific_heat",           optional=false,           order=2,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="Prototype of a heat buffer.",       methods={},       name="LuaHeatBufferPrototype",       operators={},       order=59     },     {       abstract=false,       attributes={         {           description="",           name="connections",           optional=false,           order=10,           read_type={             complex_type="array",             value="HeatConnection"           }         },         {           description="",           name="default_temperature",           optional=false,           order=4,           read_type="double"         },         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",           name="emissions_per_joule",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="",           name="heat_buffer_prototype",           optional=false,           order=11,           read_type="LuaHeatBufferPrototype"         },         {           description="",           name="max_temperature",           optional=false,           order=3,           read_type="double"         },         {           description="",           name="max_transfer",           optional=false,           order=6,           read_type="double"         },         {           description="",           name="min_temperature_gradient",           optional=false,           order=7,           read_type="double"         },         {           description="",           name="min_working_temperature",           optional=false,           order=8,           read_type="double"         },         {           description="",           name="minimum_glow_temperature",           optional=false,           order=9,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=13,           read_type="string"         },         {           description="",           name="render_no_network_icon",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="render_no_power_icon",           optional=false,           order=2,           read_type="boolean"         },         {           description="",           name="specific_heat",           optional=false,           order=5,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=12,           read_type="boolean"         }       },       description="Prototype of a heat energy source.",       methods={},       name="LuaHeatEnergySourcePrototype",       operators={},       order=60     },     {       abstract=false,       attributes={         {           description="Current version of game",           name="game_version",           optional=false,           order=1,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         }       },       description="Provides various helper and utility functions. It is accessible through the global object named `helpers` in all stages (settings, prototype and runtime).",       methods={         {           description="Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.\n\nAlso prints true/false if called from the console.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="check_prototype_translations",           order=11,           parameters={},           return_values={}         },         {           description="Compares 2 version strings.",           format={             takes_table=false           },           name="compare_versions",           order=15,           parameters={             {               description="First version string to compare.",               name="first",               optional=false,               order=0,               type="string"             },             {               description="Second version string to compare.",               name="second",               optional=false,               order=1,               type="string"             }           },           return_values={             {               description="-1 if first is smaller than second, 0 if first equal second, 1 if first is greater than second.",               optional=false,               order=0,               type="int"             }           }         },         {           description="Creates a [LuaProfiler](runtime:LuaProfiler), which is used for measuring script performance.\n\nLuaProfiler cannot be serialized.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="create_profiler",           order=14,           parameters={             {               description="Create the timer stopped",               name="stopped",               optional=true,               order=0,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaProfiler"             }           }         },         {           description="Base64 decodes and inflates the given string.",           format={             takes_table=false           },           name="decode_string",           order=9,           parameters={             {               description="The string to decode.",               name="string",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="The decoded string or `nil` if the decode failed.",               optional=true,               order=0,               type="string"             }           }         },         {           description="Converts the given direction into the string version of the direction.",           format={             takes_table=false           },           name="direction_to_string",           order=6,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.direction"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Deflates and base64 encodes the given string.",           format={             takes_table=false           },           name="encode_string",           order=8,           parameters={             {               description="The string to encode.",               name="string",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="The encoded string or `nil` if the encode failed.",               optional=true,               order=0,               type="string"             }           }         },         {           description="Evaluate an expression, substituting variables as provided.",           examples={             "```\n-- Calculate the number of research units required to unlock mining productivity level 10\nlocal formula = game.forces[\"player\"].technologies[\"mining-productivity-4\"].research_unit_count_formula\nlocal units = helpers.evaluate_expression(formula, { L = 10, l = 10 })\n```"           },           format={             takes_table=false           },           name="evaluate_expression",           order=7,           parameters={             {               description="The expression to evaluate.",               name="expression",               optional=false,               order=0,               type="MathExpression"             },             {               description="Variables to be substituted.",               name="variables",               optional=true,               order=1,               type={                 complex_type="dictionary",                 key="string",                 value="double"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Checks if the given SoundPath is valid.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="is_valid_sound_path",           order=12,           parameters={             {               description="Path to the sound.",               name="sound_path",               optional=false,               order=0,               type="SoundPath"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Checks if the given SpritePath is valid and contains a loaded sprite. The existence of the image is not checked for paths of type `file`.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="is_valid_sprite_path",           order=13,           parameters={             {               description="Path to the image.",               name="sprite_path",               optional=false,               order=0,               type="SpritePath"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Convert a JSON string to a table.",           format={             takes_table=false           },           name="json_to_table",           order=1,           parameters={             {               description="The string to convert.",               name="json",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="The returned object, or `nil` if the JSON string was invalid.",               optional=true,               order=0,               type="AnyBasic"             }           }         },         {           description="Convert a map exchange string to map gen settings and map settings.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="parse_map_exchange_string",           order=10,           parameters={             {               description="",               name="map_exchange_string",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="MapExchangeStringData"             }           }         },         {           description="Dispatch [defines.events.on_udp_packet_received](runtime:defines.events.on_udp_packet_received) events for any new packets received by the specified player or the server.\n\nThis must be enabled per-instance with `--enable-lua-udp`.\n\nUdp socket when enabled requests 256KB of receive buffer from the operating system. If there is more data than this between two subsequent calls of this method, data will be lost. That also applies to periods when the game is paused or is being saved as in those case the game update is not happening.\n\nNote: lua event is not raised immediately as the udp packet needs to be introduced into game state by means of input actions. Please keep incoming traffic as small as possible as in case of multiplayer game with many players, all this data will have to go through the multiplayer server and be distributed to all clients.\n\nNot available in settings and prototype stages.",           format={             takes_table=false           },           name="recv_udp",           order=4,           parameters={             {               description="If given, packets will only be read from this `player_index`. Providing `0` will only read from the server if present.",               name="for_player",               optional=true,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Remove a file or directory in the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). Can be used to remove files created by [LuaHelpers::write_file](runtime:LuaHelpers::write_file).",           format={             takes_table=false           },           name="remove_path",           order=5,           parameters={             {               description="The path to the file or directory to remove, relative to `script-output`.",               name="path",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Send data to a UDP port on localhost for a specified player, if enabled.\n\nThis must be enabled per-instance with `--enable-lua-udp`.",           format={             takes_table=false           },           name="send_udp",           order=3,           parameters={             {               description="The content to send.",               name="data",               optional=false,               order=1,               type="LocalisedString"             },             {               description="If given, the packet will only be sent from this `player_index`. Providing `0` will only send from the server if present. `for_player` cannot be used in settings and prototype stages.",               name="for_player",               optional=true,               order=2,               type="uint"             },             {               description="Destination port number (localhost only)",               name="port",               optional=false,               order=0,               type="uint16"             }           },           return_values={}         },         {           description="Convert a table to a JSON string",           format={             takes_table=false           },           name="table_to_json",           order=0,           parameters={             {               description="",               name="data",               optional=false,               order=0,               type="table"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Write a file to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name and file extension of the file can be specified via the `filename` parameter.",           format={             takes_table=false           },           name="write_file",           order=2,           parameters={             {               description="If `true`, `data` will be appended to the end of the file. Defaults to `false`, which will overwrite any pre-existing file with the new `data`.",               name="append",               optional=true,               order=2,               type="boolean"             },             {               description="The content to write to the file.",               name="data",               optional=false,               order=1,               type="LocalisedString"             },             {               description="The name of the file. Providing a directory path (ex. `\"save/here/example.txt\"`) will create the necessary folder structure in `script-output`.",               name="filename",               optional=false,               order=0,               type="string"             },             {               description="If given, the file will only be written for this `player_index`. Providing `0` will only write to the server's output if present. `for_player` cannot be used in settings and prototype stages.",               name="for_player",               optional=true,               order=3,               type="uint"             }           },           return_values={}         }       },       name="LuaHelpers",       operators={},       order=61     },     {       abstract=false,       attributes={         {           description="The hand read mode for the inserter.",           name="circuit_hand_read_mode",           optional=false,           order=2,           read_type="defines.control_behavior.inserter.hand_read_mode",           write_type="defines.control_behavior.inserter.hand_read_mode"         },         {           description="`true` if the contents of the inserter hand should be sent to the circuit network",           name="circuit_read_hand_contents",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if filters are set from circuit network",           name="circuit_set_filters",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="If the stack size of the inserter is set through the circuit network or not.",           name="circuit_set_stack_size",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="The signal used to set the stack size of the inserter.",           name="circuit_stack_control_signal",           optional=true,           order=4,           read_type="SignalID",           write_type="SignalID"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="Control behavior for inserters.",       methods={},       name="LuaInserterControlBehavior",       operators={},       order=62,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="The entity that owns this inventory, if any.",           name="entity_owner",           optional=true,           order=2,           read_type="LuaEntity"         },         {           description="The equipment that owns this inventory, if any.",           name="equipment_owner",           optional=true,           order=4,           read_type="LuaEquipment"         },         {           description="The inventory index this inventory uses, if any.",           name="index",           optional=true,           order=0,           read_type="defines.inventory"         },         {           description="Gives a maximum weight of items that can be inserted into this inventory.",           name="max_weight",           optional=true,           order=7,           read_type="Weight",           subclasses={             "InventoryWithWeightLimit"           }         },         {           description="The mod that owns this inventory, if any.",           name="mod_owner",           optional=true,           order=5,           read_type="string"         },         {           description="Name of this inventory, if any. Names match keys of [defines.inventory](runtime:defines.inventory).",           name="name",           optional=true,           order=1,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="The player that owns this inventory, if any.",           name="player_owner",           optional=true,           order=3,           read_type="LuaPlayer"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         },         {           description="Gives a total weight of all items currently in this inventory.",           name="weight",           optional=false,           order=6,           read_type="Weight"         }       },       description="A storage of item stacks.",       methods={         {           description="Can at least some items be inserted?",           format={             takes_table=false           },           name="can_insert",           order=1,           parameters={             {               description="Items that would be inserted.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="`true` if at least a part of the given items could be inserted into this inventory.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="If the given inventory slot filter can be set to the given filter.",           format={             takes_table=false           },           name="can_set_filter",           order=13,           parameters={             {               description="The item filter",               name="filter",               optional=false,               order=1,               type="ItemFilter"             },             {               description="The item stack index",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Make this inventory empty.",           format={             takes_table=false           },           name="clear",           order=0,           parameters={},           return_values={}         },         {           description="Counts the number of empty stacks.",           format={             takes_table=false           },           name="count_empty_stacks",           order=18,           parameters={             {               description="If true, slots blocked by the current bar will be included. Defaults to true.",               name="include_bar",               optional=true,               order=1,               type="boolean"             },             {               description="If true, filtered slots will be included. Defaults to false.",               name="include_filtered",               optional=true,               order=0,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Destroys this inventory.\n\nOnly inventories created by [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) can be destroyed this way.",           format={             takes_table=false           },           name="destroy",           order=22,           parameters={},           return_values={}         },         {           description="Finds the first empty stack. Filtered slots are excluded unless a filter item is given.",           format={             takes_table=false           },           name="find_empty_stack",           order=17,           parameters={             {               description="If given, empty stacks that are filtered for this item will be included.",               name="item",               optional=true,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="The first empty stack, or `nil` if there aren't any empty stacks.",               optional=true,               order=0,               type="LuaItemStack"             },             {               description="The stack index of the matching stack, if any is found.",               optional=true,               order=1,               type="uint"             }           }         },         {           description="Finds the first LuaItemStack in the inventory that matches the given item name.",           format={             takes_table=false           },           name="find_item_stack",           order=16,           parameters={             {               description="The item to find",               name="item",               optional=false,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="The first matching stack, or `nil` if none match.",               optional=true,               order=0,               type="LuaItemStack"             },             {               description="The stack index of the matching stack, if any is found.",               optional=true,               order=1,               type="uint"             }           }         },         {           description="Get the current bar. This is the index at which the red area starts.\n\nOnly useable if this inventory supports having a bar.",           format={             takes_table=false           },           name="get_bar",           order=9,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Get counts of all items in this inventory.",           format={             takes_table=false           },           name="get_contents",           order=7,           parameters={},           return_values={             {               description="List of all items in the inventory.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         },         {           description="Gets the filter for the given item stack index.",           format={             takes_table=false           },           name="get_filter",           order=14,           parameters={             {               description="The item stack index",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="The current filter or `nil` if none.",               optional=true,               order=0,               type="ItemFilter"             }           }         },         {           description="Gets the number of the given item that can be inserted into this inventory.\n\nThis is a \"best guess\" number; things like assembling machine filtered slots, module slots, items with durability, and items with mixed health will cause the result to be inaccurate. The main use for this is in checking how many of a basic item can fit into a basic inventory.\n\nThis accounts for the 'bar' on the inventory.",           format={             takes_table=false           },           name="get_insertable_count",           order=19,           parameters={             {               description="The item to check.",               name="item",               optional=false,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Get the number of all or some items in this inventory.",           format={             takes_table=false           },           name="get_item_count",           order=4,           parameters={             {               description="The item to count. If not specified, count all items.",               name="item",               optional=true,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Insert items into this inventory.",           format={             takes_table=false           },           name="insert",           order=2,           parameters={             {               description="Items to insert.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Number of items actually inserted.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Does this inventory contain nothing?",           format={             takes_table=false           },           name="is_empty",           order=5,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="If this inventory supports filters and has at least 1 filter set.",           format={             takes_table=false           },           name="is_filtered",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is every stack in this inventory full? Ignores stacks blocked by the current bar.",           format={             takes_table=false           },           name="is_full",           order=6,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Remove items from this inventory.",           format={             takes_table=false           },           name="remove",           order=3,           parameters={             {               description="Items to remove.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Number of items actually removed.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Resizes the inventory.\n\nItems in slots beyond the new capacity are deleted.\n\nOnly inventories created by [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) can be resized.",           format={             takes_table=false           },           name="resize",           order=21,           parameters={             {               description="New size of a inventory",               name="size",               optional=false,               order=0,               type="uint16"             }           },           raises={             {               description="",               name="on_pre_script_inventory_resized",               optional=false,               order=0,               timeframe="instantly"             },             {               description="",               name="on_script_inventory_resized",               optional=false,               order=1,               timeframe="instantly"             }           },           return_values={}         },         {           description="Set the current bar.\n\nOnly useable if this inventory supports having a bar.",           format={             takes_table=false           },           name="set_bar",           order=10,           parameters={             {               description="The new limit. Omitting this parameter or passing `nil` will clear the limit.",               name="bar",               optional=true,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the filter for the given item stack index.\n\nSome inventory slots don't allow some filters (gun ammo can't be filtered for non-ammo).",           format={             takes_table=false           },           name="set_filter",           order=15,           parameters={             {               description="The new filter. `nil` erases any existing filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "nil"                 }               }             },             {               description="The item stack index.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="If the filter was allowed to be set.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sorts and merges the items in this inventory.",           format={             takes_table=false           },           name="sort_and_merge",           order=20,           parameters={},           return_values={}         },         {           description="Does this inventory support a bar? Bar is the draggable red thing, found for example on chests, that limits the portion of the inventory that may be manipulated by machines.\n\n\"Supporting a bar\" doesn't mean that the bar is set to some nontrivial value. Supporting a bar means the inventory supports having this limit at all. The character's inventory is an example of an inventory without a bar; the wooden chest's inventory is an example of one with a bar.",           format={             takes_table=false           },           name="supports_bar",           order=8,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="If this inventory supports filters.",           format={             takes_table=false           },           name="supports_filters",           order=11,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaInventory",       operators={         {           description="The indexing operator.",           examples={             "```\n-- Will get the first item in the player's inventory.\ngame.player.get_main_inventory()[1]\n```"           },           name="index",           optional=false,           order=0,           read_type="LuaItemStack"         },         {           description="Get the number of slots in this inventory.",           examples={             "```\n-- Will print the number of slots in the player's main inventory.\ngame.player.print(#game.player.get_main_inventory())\n```"           },           name="length",           optional=false,           order=1,           read_type="uint"         }       },       order=63     },     {       abstract=false,       attributes={         {           description="Object representing the item stack this item is located in right now. If its not possible to locate the item stack holding this item, a nil will be returned",           name="item_stack",           optional=true,           order=4,           read_type="LuaItemStack"         },         {           description="Name of the item prototype",           name="name",           optional=false,           order=1,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="Item prototype of this item",           name="prototype",           optional=false,           order=2,           read_type="LuaItemPrototype"         },         {           description="The quality of this item.",           name="quality",           optional=false,           order=3,           read_type="LuaQualityPrototype"         },         {           description="Type of the item prototype",           name="type",           optional=false,           order=0,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="A reference to an item with data. In contrast to LuaItemStack, this is binding to a specific item data even if it would move between entities or inventories.",       methods={},       name="LuaItem",       operators={},       order=64,       parent="LuaItemCommon"     },     {       abstract=true,       attributes={         {           description="The active blueprint index for this blueprint book. `nil` if this blueprint book is empty.",           name="active_index",           optional=true,           order=22,           read_type="uint",           subclasses={             "BlueprintBookItem"           },           write_type="uint"         },         {           description="Whether the label for this item can be manually changed. When false the label can only be changed through the API.",           name="allow_manual_label_change",           optional=false,           order=25,           read_type="boolean",           subclasses={             "ItemWithLabel"           },           write_type="boolean"         },         {           description="Number of bullets left in the magazine.",           name="ammo",           optional=false,           order=40,           read_type="uint",           subclasses={             "AmmoItem"           },           write_type="uint"         },         {           description="If absolute snapping is enabled on this blueprint item.",           name="blueprint_absolute_snapping",           optional=false,           order=19,           read_type="boolean",           subclasses={             "BlueprintItem"           },           write_type="boolean"         },         {           description="The offset from the absolute grid. `nil` if absolute snapping is not enabled.",           name="blueprint_position_relative_to_grid",           optional=true,           order=18,           read_type="TilePosition",           subclasses={             "BlueprintItem"           },           write_type="TilePosition"         },         {           description="The snapping grid size in this blueprint item. `nil` if snapping is not enabled.",           name="blueprint_snap_to_grid",           optional=true,           order=17,           read_type="TilePosition",           subclasses={             "BlueprintItem"           },           write_type="TilePosition"         },         {           description="List of raw materials required to build this blueprint.",           name="cost_to_build",           optional=false,           order=20,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           },           subclasses={             "BlueprintItem"           }         },         {           description="The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value.",           name="custom_description",           optional=false,           order=29,           read_type="LocalisedString",           subclasses={             "ItemWithTags"           },           write_type="LocalisedString"         },         {           description="The default icons for a blueprint item.",           name="default_icons",           optional=false,           order=21,           read_type={             complex_type="array",             value="BlueprintSignalIcon"           },           subclasses={             "BlueprintItem"           }         },         {           description="Durability of the contained item. Automatically capped at the item's maximum durability.",           name="durability",           optional=false,           order=39,           read_type="double",           subclasses={             "Tool"           },           write_type="double"         },         {           description="If this is an item with entity data, get the stored entity color.",           name="entity_color",           optional=true,           order=27,           read_type="Color",           subclasses={             "ItemWithEntityData"           },           write_type="Color"         },         {           description="The number of entity filters this deconstruction item supports.",           name="entity_filter_count",           optional=false,           order=30,           read_type="uint",           subclasses={             "DeconstructionItem"           }         },         {           description="The blacklist/whitelist entity filter mode for this deconstruction item.",           name="entity_filter_mode",           optional=false,           order=34,           read_type="defines.deconstruction_item.entity_filter_mode",           subclasses={             "DeconstructionItem"           },           write_type="defines.deconstruction_item.entity_filter_mode"         },         {           description="The entity filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. All prototypes in this array must not have the `\"not-deconstructable\"` flag set and are either a `cliff` or marked as `minable`.",           name="entity_filters",           optional=false,           order=31,           read_type={             complex_type="array",             value="ItemFilter"           },           subclasses={             "DeconstructionItem"           },           write_type={             complex_type="array",             value="ItemFilter"           }         },         {           description="If this is an item with entity data, get the stored entity label.",           name="entity_label",           optional=true,           order=26,           read_type="string",           subclasses={             "ItemWithEntityData"           },           write_type="string"         },         {           description="The equipment grid of this item, if any.",           name="grid",           optional=true,           order=15,           read_type="LuaEquipmentGrid"         },         {           description="If this is an ammo item.",           name="is_ammo",           optional=false,           order=10,           read_type="boolean"         },         {           description="If this is an armor item.",           name="is_armor",           optional=false,           order=11,           read_type="boolean"         },         {           description="If this is a blueprint item.",           name="is_blueprint",           optional=false,           order=0,           read_type="boolean"         },         {           description="If this is a blueprint book item.",           name="is_blueprint_book",           optional=false,           order=1,           read_type="boolean"         },         {           description="If this is a deconstruction tool item.",           name="is_deconstruction_item",           optional=false,           order=7,           read_type="boolean"         },         {           description="If this is an item with entity data item.",           name="is_item_with_entity_data",           optional=false,           order=4,           read_type="boolean"         },         {           description="If this is an item with inventory item.",           name="is_item_with_inventory",           optional=false,           order=3,           read_type="boolean"         },         {           description="If this is an item with label item.",           name="is_item_with_label",           optional=false,           order=2,           read_type="boolean"         },         {           description="If this is an item with tags item.",           name="is_item_with_tags",           optional=false,           order=6,           read_type="boolean"         },         {           description="If this is a repair tool item.",           name="is_repair_tool",           optional=false,           order=12,           read_type="boolean"         },         {           description="If this is a selection tool item.",           name="is_selection_tool",           optional=false,           order=5,           read_type="boolean"         },         {           description="If this is a tool item.",           name="is_tool",           optional=false,           order=9,           read_type="boolean"         },         {           description="If this is a upgrade item.",           name="is_upgrade_item",           optional=false,           order=8,           read_type="boolean"         },         {           description="The unique identifier for this item, if any. Note that this ID stays the same no matter where the item is moved to.",           name="item_number",           optional=true,           order=13,           read_type="uint64"         },         {           description="The current label for this item, if any.",           name="label",           optional=true,           order=23,           read_type="string",           subclasses={             "ItemWithLabel"           },           write_type="string"         },         {           description="The current label color for this item, if any.",           name="label_color",           optional=true,           order=24,           read_type="Color",           subclasses={             "ItemWithLabel"           },           write_type="Color"         },         {           description="The current count of mappers in the upgrade item.",           name="mapper_count",           optional=false,           order=38,           read_type="uint",           subclasses={             "UpgradeItem"           }         },         {           description="The location of this item if it can be found.",           name="owner_location",           optional=false,           order=16,           read_type="ItemLocationData"         },         {           description="Icons of this blueprint item, blueprint book, deconstruction item or upgrade planner. An item that doesn't have icons returns `nil` on read and throws error on write.",           name="preview_icons",           optional=true,           order=14,           read_type={             complex_type="array",             value="BlueprintSignalIcon"           },           write_type={             complex_type="array",             value="BlueprintSignalIcon"           }         },         {           description="",           name="tags",           optional=false,           order=28,           read_type="Tags",           subclasses={             "ItemWithTags"           },           write_type="Tags"         },         {           description="The number of tile filters this deconstruction item supports.",           name="tile_filter_count",           optional=false,           order=32,           read_type="uint",           subclasses={             "DeconstructionItem"           }         },         {           description="The blacklist/whitelist tile filter mode for this deconstruction item.",           name="tile_filter_mode",           optional=false,           order=35,           read_type="defines.deconstruction_item.tile_filter_mode",           subclasses={             "DeconstructionItem"           },           write_type="defines.deconstruction_item.tile_filter_mode"         },         {           description="The tile filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. Reading filters always returns an array of strings which are the tile prototype names.",           name="tile_filters",           optional=false,           order=33,           read_type={             complex_type="array",             value="TileID"           },           subclasses={             "DeconstructionItem"           },           write_type={             complex_type="array",             value="TileID"           }         },         {           description="The tile selection mode for this deconstruction item.",           name="tile_selection_mode",           optional=false,           order=36,           read_type="defines.deconstruction_item.tile_selection_mode",           subclasses={             "DeconstructionItem"           },           write_type="defines.deconstruction_item.tile_selection_mode"         },         {           description="If this deconstruction item is set to allow trees and rocks only.",           name="trees_and_rocks_only",           optional=false,           order=37,           read_type="boolean",           subclasses={             "DeconstructionItem"           },           write_type="boolean"         }       },       description="Common methods related to usage of item with data. It is useful when LuaItemStack contains item with data or in general with LuaItem as it can only point at an item with data.",       methods={         {           description="Build this blueprint at the given location.\n\nBuilt entities can be come invalid between the building of the blueprint and the function returning if by_player or raise_built is used and one of those events invalidates the entity.",           format={             table_optional=false,             takes_table=true           },           name="build_blueprint",           order=3,           parameters={             {               description="If `normal`, blueprint will not be built if any one thing can't be built. If `forced`, anything that can be built is built and obstructing nature entities will be deconstructed. If `superforced`, all obstructions will be deconstructed and the blueprint will be built.",               name="build_mode",               optional=true,               order=4,               type="defines.build_mode"             },             {               description="The player to use if any. If provided [defines.events.on_built_entity](runtime:defines.events.on_built_entity) will also be fired on successful entity creation.",               name="by_player",               optional=true,               order=6,               type="PlayerIdentification"             },             {               description="The direction to use when building",               name="direction",               optional=true,               order=3,               type="defines.direction"             },             {               description="Force to use for the building",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The position to build at",               name="position",               optional=false,               order=2,               type="MapPosition"             },             {               description="If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.",               name="raise_built",               optional=true,               order=7,               type="boolean"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to build on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="Array of created ghosts",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Cancel deconstruct the given area with this deconstruction item.",           format={             table_optional=false,             takes_table=true           },           name="cancel_deconstruct_area",           order=22,           parameters={             {               description="The area to deconstruct",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="The player to use if any.",               name="by_player",               optional=true,               order=4,               type="PlayerIdentification"             },             {               description="Force to use for canceling deconstruction",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the cancel deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to cancel deconstruct on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={},           subclasses={             "DeconstructionItem"           }         },         {           description="Clears this blueprint item.",           format={             takes_table=false           },           name="clear_blueprint",           order=1,           parameters={},           return_values={},           subclasses={             "BlueprintItem"           }         },         {           description="Clears all settings/filters on this deconstruction item resetting it to default values.",           format={             takes_table=false           },           name="clear_deconstruction_item",           order=23,           parameters={},           return_values={},           subclasses={             "DeconstructionItem"           }         },         {           description="Clears all settings/filters on this upgrade item resetting it to default values.",           format={             takes_table=false           },           name="clear_upgrade_item",           order=24,           parameters={},           return_values={},           subclasses={             "UpgradeItem"           }         },         {           description="Sets up this blueprint using the found blueprintable entities/tiles on the surface.",           format={             table_optional=false,             takes_table=true           },           name="create_blueprint",           order=4,           parameters={             {               description="When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area. Defaults to false.",               name="always_include_tiles",               optional=true,               order=3,               type="boolean"             },             {               description="The bounding box",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="Force to use for the creation",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="When true, entities are included in the blueprint. Defaults to true.",               name="include_entities",               optional=true,               order=4,               type="boolean"             },             {               description="When true, train fuel is included in the blueprint, Defaults to true.",               name="include_fuel",               optional=true,               order=8,               type="boolean"             },             {               description="When true, modules are included in the blueprint. Defaults to true.",               name="include_modules",               optional=true,               order=5,               type="boolean"             },             {               description="When true, station names are included in the blueprint. Defaults to false.",               name="include_station_names",               optional=true,               order=6,               type="boolean"             },             {               description="When true, trains are included in the blueprint. Defaults to false.",               name="include_trains",               optional=true,               order=7,               type="boolean"             },             {               description="Surface to create from",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="The blueprint entity index to source entity mapping.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="uint",                 value="LuaEntity"               }             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Deconstruct the given area with this deconstruction item.",           format={             table_optional=false,             takes_table=true           },           name="deconstruct_area",           order=21,           parameters={             {               description="The area to deconstruct",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="The player to use if any.",               name="by_player",               optional=true,               order=4,               type="PlayerIdentification"             },             {               description="Force to use for the deconstruction",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to deconstruct on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={},           subclasses={             "DeconstructionItem"           }         },         {           description="The entities in this blueprint.",           format={             takes_table=false           },           name="get_blueprint_entities",           order=9,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="BlueprintEntity"               }             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Gets the number of entities in this blueprint item.",           format={             takes_table=false           },           name="get_blueprint_entity_count",           order=13,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Gets the given tag on the given blueprint entity index in this blueprint item.",           format={             takes_table=false           },           name="get_blueprint_entity_tag",           order=7,           parameters={             {               description="The entity index.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The tag to get.",               name="tag",               optional=false,               order=1,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="AnyBasic"             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Gets the tags for the given blueprint entity index in this blueprint item.",           format={             takes_table=false           },           name="get_blueprint_entity_tags",           order=5,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="Tags"             }           },           subclasses={             "BlueprintItem"           }         },         {           description="A list of the tiles in this blueprint.",           format={             takes_table=false           },           name="get_blueprint_tiles",           order=11,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="Tile"               }             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Gets the entity filter at the given index for this deconstruction item.",           format={             takes_table=false           },           name="get_entity_filter",           order=17,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ItemFilter"             }           },           subclasses={             "DeconstructionItem"           }         },         {           description="Access the inner inventory of an item.",           format={             takes_table=false           },           name="get_inventory",           order=0,           parameters={             {               description="Index of the inventory to access, which can only be [defines.inventory.item_main](runtime:defines.inventory.item_main).",               name="inventory",               optional=false,               order=0,               type="defines.inventory"             }           },           return_values={             {               description="`nil` if there is no inventory with the given index.",               optional=true,               order=0,               type="LuaInventory"             }           }         },         {           description="Gets the filter at the given index for this upgrade item. Note that sources (`\"from\"` type) that are undefined will read as `{type = \"item\"}`, while destinations (`\"to\"` type) that are undefined will read as `nil`.\n\nIn contrast to [LuaItemCommon::set_mapper](runtime:LuaItemCommon::set_mapper), indices past the upgrade item's current size are considered to be out of bounds.",           format={             takes_table=false           },           name="get_mapper",           order=25,           parameters={             {               description="The index of the mapper to read.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="type",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="from"                   },                   {                     complex_type="literal",                     value="to"                   }                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "UpgradeMapperSource",                   "UpgradeMapperDestination"                 }               }             }           },           subclasses={             "UpgradeItem"           }         },         {           description="Gets the tag with the given name or returns `nil` if it doesn't exist.",           format={             takes_table=false           },           name="get_tag",           order=14,           parameters={             {               description="",               name="tag_name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="AnyBasic"             }           },           subclasses={             "ItemWithTags"           }         },         {           description="Gets the tile filter at the given index for this deconstruction item.",           format={             takes_table=false           },           name="get_tile_filter",           order=19,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="string"             }           },           subclasses={             "DeconstructionItem"           }         },         {           description="Is this blueprint item setup? I.e. is it a non-empty blueprint?",           format={             takes_table=false           },           name="is_blueprint_setup",           order=2,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "BlueprintItem"           }         },         {           description="Removes a tag with the given name.",           format={             takes_table=false           },           name="remove_tag",           order=16,           parameters={             {               description="",               name="tag",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="If the tag existed and was removed.",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "ItemWithTags"           }         },         {           description="Set new entities to be a part of this blueprint.",           format={             takes_table=false           },           name="set_blueprint_entities",           order=10,           parameters={             {               description="The new blueprint entities.",               name="entities",               optional=false,               order=0,               type={                 complex_type="array",                 value="BlueprintEntity"               }             }           },           return_values={},           subclasses={             "BlueprintItem"           }         },         {           description="Sets the given tag on the given blueprint entity index in this blueprint item.",           format={             takes_table=false           },           name="set_blueprint_entity_tag",           order=8,           parameters={             {               description="The entity index.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The tag to set.",               name="tag",               optional=false,               order=1,               type="string"             },             {               description="The tag value to set or `nil` to clear the tag.",               name="value",               optional=false,               order=2,               type="AnyBasic"             }           },           return_values={},           subclasses={             "BlueprintItem"           }         },         {           description="Sets the tags on the given blueprint entity index in this blueprint item.",           format={             takes_table=false           },           name="set_blueprint_entity_tags",           order=6,           parameters={             {               description="The entity index",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="tags",               optional=false,               order=1,               type="Tags"             }           },           return_values={},           subclasses={             "BlueprintItem"           }         },         {           description="Set specific tiles in this blueprint.",           format={             takes_table=false           },           name="set_blueprint_tiles",           order=12,           parameters={             {               description="Tiles to be a part of the blueprint.",               name="tiles",               optional=false,               order=0,               type={                 complex_type="array",                 value="Tile"               }             }           },           return_values={},           subclasses={             "BlueprintItem"           }         },         {           description="Sets the entity filter at the given index for this deconstruction item.",           format={             takes_table=false           },           name="set_entity_filter",           order=18,           parameters={             {               description="Writing `nil` removes the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "nil"                 }               }             },             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether the new filter was successfully set (meaning it was valid).",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "DeconstructionItem"           }         },         {           description="Sets the module filter at the given index for this upgrade item.\n\nIn contrast to [LuaItemCommon::get_mapper](runtime:LuaItemCommon::get_mapper), indices past the upgrade item's current size are valid and expand the list of mappings accordingly, if within reasonable bounds.",           format={             takes_table=false           },           name="set_mapper",           order=26,           parameters={             {               description="The index of the mapper to set.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The mapper to set. Set `nil` to clear the mapper.",               name="mapper",               optional=false,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "UpgradeMapperSource",                   "UpgradeMapperDestination",                   "nil"                 }               }             },             {               description="",               name="type",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="from"                   },                   {                     complex_type="literal",                     value="to"                   }                 }               }             }           },           return_values={},           subclasses={             "UpgradeItem"           }         },         {           description="Sets the tag with the given name and value.",           format={             takes_table=false           },           name="set_tag",           order=15,           parameters={             {               description="",               name="tag",               optional=false,               order=1,               type="AnyBasic"             },             {               description="",               name="tag_name",               optional=false,               order=0,               type="string"             }           },           return_values={},           subclasses={             "ItemWithTags"           }         },         {           description="Sets the tile filter at the given index for this deconstruction item.",           format={             takes_table=false           },           name="set_tile_filter",           order=20,           parameters={             {               description="Writing `nil` removes the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   "LuaTilePrototype",                   "LuaTile",                   "nil"                 }               }             },             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether the new filter was successfully set (meaning it was valid).",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "DeconstructionItem"           }         }       },       name="LuaItemCommon",       operators={},       order=65     },     {       abstract=false,       attributes={         {           description="If tiles area always included when doing selection with this selection tool prototype.",           name="always_include_tiles",           optional=true,           order=55,           read_type="boolean",           subclasses={             "SelectionTool"           }         },         {           description="",           name="ammo_category",           optional=true,           order=27,           read_type="LuaAmmoCategoryPrototype",           subclasses={             "AmmoItem"           }         },         {           description="The gun attack parameters.",           name="attack_parameters",           optional=true,           order=37,           read_type="AttackParameters",           subclasses={             "Gun"           }         },         {           description="",           name="beacon_tint",           optional=true,           order=51,           read_type={             complex_type="array",             value="Color"           },           subclasses={             "ModuleItem"           }         },         {           description="The result of burning this item as fuel, if any.",           name="burnt_result",           optional=true,           order=6,           read_type="LuaItemPrototype"         },         {           description="If this item can be mod-opened.",           name="can_be_mod_opened",           optional=false,           order=16,           read_type="boolean"         },         {           description="The capsule action for this capsule item prototype.",           name="capsule_action",           optional=true,           order=35,           read_type="CapsuleAction",           subclasses={             "Capsule"           }         },         {           description="The name of a [LuaModuleCategoryPrototype](runtime:LuaModuleCategoryPrototype). Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules.",           name="category",           optional=true,           order=48,           read_type="string",           subclasses={             "ModuleItem"           }         },         {           description="The collision box used by character entities when wearing this armor.",           name="collision_box",           optional=true,           order=32,           read_type="BoundingBox",           subclasses={             "ArmorPrototype"           }         },         {           description="",           name="create_electric_network",           optional=true,           order=65,           read_type="boolean",           subclasses={             "SpacePlatformStarterPack"           }         },         {           description="",           name="default_import_location",           optional=false,           order=24,           read_type="LuaSpaceLocationPrototype"         },         {           description="The default label color used for this item with label, if any.",           name="default_label_color",           optional=true,           order=44,           read_type="Color",           subclasses={             "ItemWithLabel"           }         },         {           description="",           name="destroyed_by_dropping_trigger",           optional=true,           order=20,           read_type={             complex_type="array",             value="TriggerItem"           }         },         {           description="If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.",           name="draw_label_for_cursor_render",           optional=true,           order=45,           read_type="boolean",           subclasses={             "ItemWithLabel"           }         },         {           description="The drawing box used by character entities when wearing this armor.",           name="drawing_box",           optional=true,           order=33,           read_type="BoundingBox",           subclasses={             "ArmorPrototype"           }         },         {           description="The durability message key used when displaying the durability of this tool.",           name="durability_description_key",           optional=true,           order=59,           read_type="string",           subclasses={             "ToolItem"           }         },         {           description="The durability message value used when displaying the durability of this tool.",           name="durability_description_value",           optional=true,           order=61,           read_type="string",           subclasses={             "ToolItem"           }         },         {           description="The number of entity filters this deconstruction item has.",           name="entity_filter_slots",           optional=true,           order=57,           read_type="uint",           subclasses={             "DeconstructionItem"           }         },         {           description="The prototype of this armor's equipment grid, if any.",           name="equipment_grid",           optional=true,           order=30,           read_type="LuaEquipmentGridPrototype",           subclasses={             "Armor"           }         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=25,           read_type="LuaItemPrototype"         },         {           description="The durability message key used when displaying the durability of this tool in Factoriopedia.",           name="factoriopedia_durability_description_key",           optional=true,           order=60,           read_type="string",           subclasses={             "ToolItem"           }         },         {           description="The filter mode used by this item with inventory.",           name="filter_mode",           optional=true,           order=42,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="none"               },               {                 complex_type="literal",                 value="whitelist"               },               {                 complex_type="literal",                 value="blacklist"               }             }           },           subclasses={             "ItemWithInventory"           }         },         {           description="The flags for this item prototype.",           name="flags",           optional=false,           order=13,           read_type="ItemPrototypeFlags"         },         {           description="The acceleration multiplier when this item is used as fuel in a vehicle.",           name="fuel_acceleration_multiplier",           optional=false,           order=8,           read_type="double"         },         {           description="Additional fuel acceleration multiplier per quality level.",           name="fuel_acceleration_multiplier_quality_bonus",           optional=false,           order=11,           read_type="double"         },         {           description="The fuel category, if any.",           name="fuel_category",           optional=true,           order=5,           read_type="string"         },         {           description="The emissions multiplier if this is used as fuel.",           name="fuel_emissions_multiplier",           optional=false,           order=10,           read_type="double"         },         {           description="",           name="fuel_glow_color",           optional=true,           order=23,           read_type="Color"         },         {           description="The fuel top speed multiplier when this item is used as fuel in a vehicle.",           name="fuel_top_speed_multiplier",           optional=false,           order=9,           read_type="double"         },         {           description="Additional fuel top speed multiplier per quality level.",           name="fuel_top_speed_multiplier_quality_bonus",           optional=false,           order=12,           read_type="double"         },         {           description="Fuel value when burned.",           name="fuel_value",           optional=false,           order=7,           read_type="float"         },         {           description="If this tool item has infinite durability.",           name="infinite",           optional=true,           order=62,           read_type="boolean",           subclasses={             "ToolItem"           }         },         {           description="",           name="ingredient_to_weight_coefficient",           optional=false,           order=22,           read_type="double"         },         {           description="",           name="initial_items",           optional=true,           order=67,           read_type={             complex_type="array",             value="ItemProduct"           },           subclasses={             "SpacePlatformStarterPack"           }         },         {           description="The main inventory size for item-with-inventory-prototype.",           name="inventory_size",           optional=true,           order=38,           read_type="uint",           subclasses={             "ItemWithInventoryPrototype"           }         },         {           description="",           name="item_filters",           optional=true,           order=39,           read_type={             complex_type="array",             value="LuaItemPrototype"           },           subclasses={             "ItemWithInventory"           }         },         {           description="",           name="item_group_filters",           optional=true,           order=40,           read_type={             complex_type="array",             value="LuaGroup"           },           subclasses={             "ItemWithInventory"           }         },         {           description="",           name="item_subgroup_filters",           optional=true,           order=41,           read_type={             complex_type="array",             value="LuaGroup"           },           subclasses={             "ItemWithInventory"           }         },         {           description="The localised string used when the player attempts to put items into this item with inventory that aren't allowed.",           name="localised_filter_message",           optional=true,           order=43,           read_type="LocalisedString",           subclasses={             "ItemWithInventory"           }         },         {           description="Size of full magazine.",           name="magazine_size",           optional=true,           order=28,           read_type="float",           subclasses={             "AmmoItem"           }         },         {           description="",           name="manual_length_limit",           optional=true,           order=54,           read_type="double",           subclasses={             "RailPlanner"           }         },         {           description="Effects of this module.",           name="module_effects",           optional=true,           order=47,           read_type="ModuleEffects",           subclasses={             "ModuleItem"           }         },         {           description="",           name="moved_to_hub_when_building",           optional=false,           order=26,           read_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=69,           read_type="string"         },         {           description="Prototype of the equipment that will be created by placing this item in an equipment grid, if any.",           name="place_as_equipment_result",           optional=true,           order=1,           read_type="LuaEquipmentPrototype"         },         {           description="The place-as-tile result if one is defined, if any.",           name="place_as_tile_result",           optional=true,           order=2,           read_type="PlaceAsTileResult"         },         {           description="Prototype of the entity that will be created by placing this item, if any.",           name="place_result",           optional=true,           order=0,           read_type="LuaEntityPrototype"         },         {           description="The result entity when planting this item as a seed.",           name="plant_result",           optional=true,           order=18,           read_type="LuaEntityPrototype"         },         {           description="If this armor provides flight to character entities when worm.",           name="provides_flight",           optional=true,           order=34,           read_type="boolean",           subclasses={             "ArmorPrototype"           }         },         {           description="",           name="radius_color",           optional=true,           order=36,           read_type="Color",           subclasses={             "Capsule"           }         },         {           description="Prototypes of all rails possible to be used by this rail planner prototype.",           name="rails",           optional=true,           order=52,           read_type={             complex_type="array",             value="LuaEntityPrototype"           },           subclasses={             "RailPlanner"           }         },         {           description="Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine.",           name="reload_time",           optional=true,           order=29,           read_type="float",           subclasses={             "AmmoItem"           }         },         {           description="",           name="requires_beacon_alt_mode",           optional=true,           order=50,           read_type="boolean",           subclasses={             "ModuleItem"           }         },         {           description="Resistances of this armor item, if any, indexed by damage type name.",           name="resistances",           optional=true,           order=31,           read_type={             complex_type="dictionary",             key="string",             value="Resistance"           },           subclasses={             "Armor"           }         },         {           description="The results of launching this item in a rocket.",           name="rocket_launch_products",           optional=false,           order=14,           read_type={             complex_type="array",             value="Product"           }         },         {           description="How this item interacts when being sent to orbit.",           name="send_to_orbit_mode",           optional=false,           order=15,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="not-sendable"               },               {                 complex_type="literal",                 value="manual"               },               {                 complex_type="literal",                 value="automated"               }             }           }         },         {           description="If this selection tool skips things covered by fog of war.",           name="skip_fog_of_war",           optional=true,           order=56,           read_type="boolean",           subclasses={             "SelectionTool"           }         },         {           description="The repairing speed if this is a repairing tool.",           name="speed",           optional=true,           order=46,           read_type="float",           subclasses={             "RepairTool"           }         },         {           description="The spoil result of this item, if any",           name="spoil_result",           optional=true,           order=17,           read_type="LuaItemPrototype"         },         {           description="",           name="spoil_to_trigger_result",           optional=true,           order=19,           read_type="SpoilToTriggerResult"         },         {           description="Maximum stack size of the item specified by this prototype.",           name="stack_size",           optional=false,           order=4,           read_type="uint"         },         {           description="Is this item allowed to stack at all?",           name="stackable",           optional=false,           order=3,           read_type="boolean"         },         {           description="The rail support used by this rail planner.",           name="support",           optional=true,           order=53,           read_type="LuaEntityPrototype",           subclasses={             "RailPlanner"           }         },         {           description="",           name="surface",           optional=true,           order=64,           read_type="LuaSurfacePrototype",           subclasses={             "SpacePlatformStarterPack"           }         },         {           description="Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category.",           name="tier",           optional=true,           order=49,           read_type="uint",           subclasses={             "ModuleItem"           }         },         {           description="The number of tile filters this deconstruction item has.",           name="tile_filter_slots",           optional=true,           order=58,           read_type="uint",           subclasses={             "DeconstructionItem"           }         },         {           description="",           name="tiles",           optional=true,           order=66,           read_type={             complex_type="array",             value="SpacePlatformTileDefinition"           },           subclasses={             "SpacePlatformStarterPack"           }         },         {           description="",           name="trigger",           optional=true,           order=63,           read_type="TriggerItem",           subclasses={             "SpacePlatformStarterPack"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=68,           read_type="boolean"         },         {           description="Weight of this item. More information on how item weight is determined can be found on its [auxiliary page](runtime:item-weight).",           name="weight",           optional=false,           order=21,           read_type="Weight"         }       },       description="Prototype of an item. For example, an item prototype can be obtained from [LuaPrototypes::item](runtime:LuaPrototypes::item) by its name: `prototypes.item[\"iron-plate\"]`.",       methods={         {           description="The type of this ammo prototype.",           format={             takes_table=false           },           name="get_ammo_type",           order=2,           parameters={             {               description="Defaults to `\"default\"`.",               name="ammo_source_type",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="default"                   },                   {                     complex_type="literal",                     value="player"                   },                   {                     complex_type="literal",                     value="turret"                   },                   {                     complex_type="literal",                     value="vehicle"                   }                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type="AmmoType"             }           },           subclasses={             "AmmoItem"           }         },         {           description="",           format={             takes_table=false           },           name="get_cursor_box_type",           order=6,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="CursorBoxRenderType"             }           },           subclasses={             "SelectionTool"           }         },         {           description="The durability of this tool item prototype.",           format={             takes_table=false           },           name="get_durability",           order=12,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="double"             }           },           subclasses={             "ToolItem"           }         },         {           description="The entity filter mode used by this selection tool.",           format={             takes_table=false           },           name="get_entity_filter_mode",           order=7,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="PrototypeFilterMode"             }           },           subclasses={             "SelectionTool"           }         },         {           description="The entity filters used by this selection tool.",           format={             takes_table=false           },           name="get_entity_filters",           order=9,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="LuaEntityPrototype"               }             }           },           subclasses={             "SelectionTool"           }         },         {           description="The entity type filters used by this selection tool indexed by entity type.\n\nThe boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.",           format={             takes_table=false           },           name="get_entity_type_filters",           order=10,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value={                   complex_type="literal",                   value=true                 }               }             }           },           subclasses={             "SelectionTool"           }         },         {           description="The inventory size bonus for this armor prototype.",           format={             takes_table=false           },           name="get_inventory_size_bonus",           order=3,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           },           subclasses={             "ArmorPrototype"           }         },         {           description="The color used when doing normal selection with this selection tool prototype.",           format={             takes_table=false           },           name="get_selection_border_color",           order=4,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="Color"             }           },           subclasses={             "SelectionTool"           }         },         {           description="Flags that affect which entities will be selected.",           format={             takes_table=false           },           name="get_selection_mode_flags",           order=5,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="SelectionModeFlags"             }           },           subclasses={             "SelectionTool"           }         },         {           description="The number of ticks before this item spoils, or `0` if it does not spoil.",           format={             takes_table=false           },           name="get_spoil_ticks",           order=1,           parameters={             {               description="",               name="quality",               optional=true,               order=0,               type="QualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="The tile filter mode used by this selection tool.",           format={             takes_table=false           },           name="get_tile_filter_mode",           order=8,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="PrototypeFilterMode"             }           },           subclasses={             "SelectionTool"           }         },         {           description="The tile filters used by this selection tool.",           format={             takes_table=false           },           name="get_tile_filters",           order=11,           parameters={             {               description="",               name="selection_mode",               optional=false,               order=0,               type="defines.selection_mode"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="LuaTilePrototype"               }             }           },           subclasses={             "SelectionTool"           }         },         {           description="Test whether this item prototype has a certain flag set.",           format={             takes_table=false           },           name="has_flag",           order=0,           parameters={             {               description="The flag to test.",               name="flag",               optional=false,               order=0,               type="ItemPrototypeFlag"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaItemPrototype",       operators={},       order=66,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="Number of items in this stack.",           name="count",           optional=false,           order=4,           read_type="uint",           write_type="uint"         },         {           description="How much health the item has, as a number in range `[0, 1]`.",           name="health",           optional=false,           order=5,           read_type="float",           write_type="float"         },         {           description="If this is a module",           name="is_module",           optional=false,           order=10,           read_type="boolean"         },         {           description="If the item has additional data, returns LuaItem pointing at the extra data, otherwise returns nil.",           name="item",           optional=true,           order=9,           read_type="LuaItem"         },         {           description="Prototype name of the item held in this stack.",           name="name",           optional=false,           order=2,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=12,           read_type="string"         },         {           description="Prototype of the item held in this stack.",           name="prototype",           optional=false,           order=1,           read_type="LuaItemPrototype"         },         {           description="The quality of this item.",           name="quality",           optional=false,           order=6,           read_type="LuaQualityPrototype"         },         {           description="The percent spoiled this item is if it spoils. `0` in the case of the item not spoiling.",           name="spoil_percent",           optional=false,           order=8,           read_type="double",           write_type="double"         },         {           description="The tick this item spoils, or `0` if it does not spoil. When writing, setting to anything < the current game tick will spoil the item instantly.",           name="spoil_tick",           optional=false,           order=7,           read_type="MapTick",           write_type="MapTick"         },         {           description="Type of the item prototype.",           name="type",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=11,           read_type="boolean"         },         {           description="Is this valid for reading? Differs from the usual `valid` in that `valid` will be `true` even if the item stack is blank but the entity that holds it is still valid.",           name="valid_for_read",           optional=false,           order=0,           read_type="boolean"         }       },       description="A reference to an item and count owned by some external entity.\n\nIn most instances this is a simple reference as in: it points at a specific slot in an inventory and not the item in the slot.\n\nIn the instance this references an item on a [LuaTransportLine](runtime:LuaTransportLine) the reference is only guaranteed to stay valid (and refer to the same item) as long as nothing changes the transport line.",       methods={         {           description="Add ammo to this ammo item.",           format={             takes_table=false           },           name="add_ammo",           order=0,           parameters={             {               description="Amount of ammo to add.",               name="amount",               optional=false,               order=0,               type="float"             }           },           return_values={},           subclasses={             "AmmoItem"           }         },         {           description="Add durability to this tool item.",           format={             takes_table=false           },           name="add_durability",           order=2,           parameters={             {               description="Amount of durability to add.",               name="amount",               optional=false,               order=0,               type="double"             }           },           return_values={},           subclasses={             "ToolItem"           }         },         {           description="Would a call to [LuaItemStack::set_stack](runtime:LuaItemStack::set_stack) succeed?",           format={             takes_table=false           },           name="can_set_stack",           order=5,           parameters={             {               description="Stack that would be set, possibly `nil`.",               name="stack",               optional=true,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Clear this item stack.",           format={             takes_table=false           },           name="clear",           order=11,           parameters={},           return_values={}         },         {           description="Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grids.",           format={             takes_table=false           },           name="create_grid",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaEquipmentGrid"             }           },           subclasses={             "ItemWithEntityData"           }         },         {           description="Remove ammo from this ammo item.",           format={             takes_table=false           },           name="drain_ammo",           order=1,           parameters={             {               description="Amount of ammo to remove.",               name="amount",               optional=false,               order=0,               type="float"             }           },           return_values={},           subclasses={             "AmmoItem"           }         },         {           description="Remove durability from this tool item.",           format={             takes_table=false           },           name="drain_durability",           order=3,           parameters={             {               description="Amount of durability to remove.",               name="amount",               optional=false,               order=0,               type="double"             }           },           return_values={},           subclasses={             "ToolItem"           }         },         {           description="Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string.",           format={             takes_table=false           },           name="export_stack",           order=8,           parameters={},           return_values={             {               description="The exported string",               optional=false,               order=0,               type="string"             }           }         },         {           description="Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string.",           format={             takes_table=false           },           name="import_stack",           order=9,           parameters={             {               description="The string to import",               name="data",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed.",               optional=false,               order=0,               type="int"             }           }         },         {           description="Set this item stack to another item stack.",           format={             takes_table=false           },           name="set_stack",           order=6,           parameters={             {               description="Item stack to set it to. Omitting this parameter or passing `nil` will clear this item stack, as if [LuaItemStack::clear](runtime:LuaItemStack::clear) was called.",               name="stack",               optional=true,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Whether the stack was set successfully. Returns `false` if this stack was not [valid for write](runtime:LuaItemStack::can_set_stack).",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Spoils this item if the item can spoil.",           format={             takes_table=false           },           name="spoil",           order=13,           parameters={},           return_values={}         },         {           description="Swaps this item stack with the given item stack if allowed.",           format={             takes_table=false           },           name="swap_stack",           order=10,           parameters={             {               description="",               name="stack",               optional=false,               order=0,               type="LuaItemStack"             }           },           return_values={             {               description="Whether the 2 stacks were swapped successfully.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Transfers the given item stack into this item stack.",           format={             takes_table=false           },           name="transfer_stack",           order=7,           parameters={             {               description="",               name="amount",               optional=true,               order=1,               type="uint"             },             {               description="",               name="stack",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="`true` if the full stack (or requested amount) was transferred.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Use the capsule item with the entity as the source, targeting the given position.",           format={             takes_table=false           },           name="use_capsule",           order=4,           parameters={             {               description="The entity to use the capsule item with.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="The position to use the capsule item with.",               name="target_position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={             {               description="Array of the entities that were created by the capsule action.",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         }       },       name="LuaItemStack",       operators={},       order=67,       parent="LuaItemCommon"     },     {       abstract=false,       attributes={         {           description="",           name="blue_signal",           optional=true,           order=4,           read_type="SignalID",           write_type="SignalID"         },         {           description="The color the lamp is showing, if any.",           name="color",           optional=true,           order=6,           read_type="Color"         },         {           description="",           name="color_mode",           optional=false,           order=1,           read_type="defines.control_behavior.lamp.color_mode",           write_type="defines.control_behavior.lamp.color_mode"         },         {           description="",           name="green_signal",           optional=true,           order=3,           read_type="SignalID",           write_type="SignalID"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="",           name="red_signal",           optional=true,           order=2,           read_type="SignalID",           write_type="SignalID"         },         {           description="",           name="rgb_signal",           optional=true,           order=5,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if the lamp should set the color from the circuit network signals.",           name="use_colors",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Control behavior for lamps.",       methods={},       name="LuaLampControlBehavior",       operators={},       order=68,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="A lazily loaded value. For performance reasons, we sometimes return a custom lazily-loaded value type instead of the native Lua value. This custom type lazily constructs the necessary value when [LuaLazyLoadedValue::get](runtime:LuaLazyLoadedValue::get) is called, therefore preventing its unnecessary construction in some cases.\n\nAn instance of LuaLazyLoadedValue is only valid during the event it was created from and cannot be saved.",       methods={         {           description="Gets the value of this lazy loaded value.",           format={             takes_table=false           },           name="get",           order=0,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="Any"             }           }         }       },       name="LuaLazyLoadedValue",       operators={},       order=69     },     {       abstract=false,       attributes={         {           description="`true` if the transfers between loader's belt and container should be pulsed to the circuit network",           name="circuit_read_transfers",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if filters are set from circuit network",           name="circuit_set_filters",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Control behavior for loaders.",       methods={},       name="LuaLoaderControlBehavior",       operators={},       order=70,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="Radius at which the robots hover when waiting to be charged.",           name="charge_approach_distance",           optional=false,           order=7,           read_type="float"         },         {           description="Number of robots currently charging.",           name="charging_robot_count",           optional=false,           order=8,           read_type="uint"         },         {           description="Robots currently being charged.",           name="charging_robots",           optional=false,           order=13,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="Construction radius of this cell.",           name="construction_radius",           optional=false,           order=2,           read_type="float"         },         {           description="The network that owns this cell, if any.",           name="logistic_network",           optional=true,           order=11,           read_type="LuaLogisticNetwork"         },         {           description="Logistic radius of this cell.",           name="logistic_radius",           optional=false,           order=0,           read_type="float"         },         {           description="Logistic connection distance of this cell.",           name="logistics_connection_distance",           optional=false,           order=1,           read_type="float"         },         {           description="`true` if this is a mobile cell. In vanilla, only the logistic cell created by a character's personal roboport is mobile.",           name="mobile",           optional=false,           order=5,           read_type="boolean"         },         {           description="Neighbouring cells.",           name="neighbours",           optional=false,           order=12,           read_type={             complex_type="array",             value="LuaLogisticCell"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=16,           read_type="string"         },         {           description="This cell's owner.",           name="owner",           optional=false,           order=10,           read_type="LuaEntity"         },         {           description="Number of stationed construction robots in this cell.",           name="stationed_construction_robot_count",           optional=false,           order=4,           read_type="uint"         },         {           description="Number of stationed logistic robots in this cell.",           name="stationed_logistic_robot_count",           optional=false,           order=3,           read_type="uint"         },         {           description="Number of robots waiting to charge.",           name="to_charge_robot_count",           optional=false,           order=9,           read_type="uint"         },         {           description="Robots waiting to charge.",           name="to_charge_robots",           optional=false,           order=14,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="`true` if this cell is active.",           name="transmitting",           optional=false,           order=6,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=15,           read_type="boolean"         }       },       description="Logistic cell of a particular [LuaEntity](runtime:LuaEntity). A \"Logistic Cell\" is the given name for settings and properties used by what would normally be seen as a \"Roboport\". A logistic cell however doesn't have to be attached to the roboport entity (the character has one for the personal roboport).",       methods={         {           description="Is a given position within the construction range of this cell?",           format={             takes_table=false           },           name="is_in_construction_range",           order=1,           parameters={             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is a given position within the logistic range of this cell?",           format={             takes_table=false           },           name="is_in_logistic_range",           order=0,           parameters={             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Are two cells neighbours?",           format={             takes_table=false           },           name="is_neighbour_with",           order=2,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="LuaLogisticCell"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaLogisticCell",       operators={},       order=71     },     {       abstract=false,       attributes={         {           description="The circuit condition for the logistic container.",           name="circuit_condition",           optional=false,           order=2,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="Whether the circuit condition is in effect",           name="circuit_condition_enabled",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="The circuit mode of operations for the logistic container. Can only be set on containers whose [logistic_mode](runtime:LuaEntityPrototype::logistic_mode) is set to `\"requester\"` or `\"buffer\"`.",           name="circuit_exclusive_mode_of_operation",           optional=false,           order=0,           read_type="defines.control_behavior.logistic_container.exclusive_mode",           write_type="defines.control_behavior.logistic_container.exclusive_mode"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Control behavior for logistic chests.",       methods={},       name="LuaLogisticContainerControlBehavior",       operators={},       order=72,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="All active provider points in this network.",           name="active_provider_points",           optional=false,           order=15,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="The total number of construction robots in the network (idle and active + in roboports).",           name="all_construction_robots",           optional=false,           order=5,           read_type="uint"         },         {           description="The total number of logistic robots in the network (idle and active + in roboports).",           name="all_logistic_robots",           optional=false,           order=3,           read_type="uint"         },         {           description="Number of construction robots available for a job.",           name="available_construction_robots",           optional=false,           order=4,           read_type="uint"         },         {           description="Number of logistic robots available for a job.",           name="available_logistic_robots",           optional=false,           order=2,           read_type="uint"         },         {           description="All cells in this network.",           name="cells",           optional=false,           order=7,           read_type={             complex_type="array",             value="LuaLogisticCell"           }         },         {           description="All construction robots in this logistic network.",           name="construction_robots",           optional=false,           order=20,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="All things that have empty provider points in this network.",           name="empty_provider_points",           optional=false,           order=16,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="All entities that have empty logistic provider points in this network.",           name="empty_providers",           optional=false,           order=9,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The force this logistic network belongs to.",           name="force",           optional=false,           order=1,           read_type="LuaForce"         },         {           description="All other entities that have logistic points in this network (inserters mostly).",           name="logistic_members",           optional=false,           order=12,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="All logistic robots in this logistic network.",           name="logistic_robots",           optional=false,           order=21,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The unique logistic network ID.",           name="network_id",           optional=false,           order=0,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=23,           read_type="string"         },         {           description="All passive provider points in this network.",           name="passive_provider_points",           optional=false,           order=14,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="All things that have provider points in this network.",           name="provider_points",           optional=false,           order=13,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="All entities that have logistic provider points in this network.",           name="providers",           optional=false,           order=8,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="All things that have requester points in this network.",           name="requester_points",           optional=false,           order=17,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="All entities that have logistic requester points in this network.",           name="requesters",           optional=false,           order=10,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="Maximum number of robots the network can work with. Currently only used for the personal roboport.",           name="robot_limit",           optional=false,           order=6,           read_type="uint"         },         {           description="All robots in this logistic network.",           name="robots",           optional=false,           order=19,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="All things that have storage points in this network.",           name="storage_points",           optional=false,           order=18,           read_type={             complex_type="array",             value="LuaLogisticPoint"           }         },         {           description="All entities that have logistic storage points in this network.",           name="storages",           optional=false,           order=11,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=22,           read_type="boolean"         }       },       description="A single logistic network of a given force on a given surface.",       methods={         {           description="Can the network satisfy a request for a given item and count.",           format={             takes_table=false           },           name="can_satisfy_request",           order=7,           parameters={             {               description="Count to check. Defaults to 1.",               name="count",               optional=true,               order=1,               type="uint"             },             {               description="Should buffers be considered? Defaults to false.",               name="include_buffers",               optional=true,               order=2,               type="boolean"             },             {               description="Item name to check.",               name="item",               optional=false,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="Whether the network can satisfy the request.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Find logistic cell closest to a given position.",           format={             takes_table=false           },           name="find_cell_closest_to",           order=4,           parameters={             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="`nil` if no cell was found.",               optional=true,               order=0,               type="LuaLogisticCell"             }           }         },         {           description="Get item counts for the entire network, similar to how [LuaInventory::get_contents](runtime:LuaInventory::get_contents) does.",           format={             takes_table=false           },           name="get_contents",           order=1,           parameters={},           return_values={             {               description="List of all items in the network.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         },         {           description="Count given or all items in the network or given members.",           format={             takes_table=false           },           name="get_item_count",           order=0,           parameters={             {               description="Item name to count. If not given, gives counts of all items in the network.",               name="item",               optional=true,               order=0,               type="ItemWithQualityID"             },             {               description="Logistic members to check. If not given, gives count in the entire network.",               name="member",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="storage"                   },                   {                     complex_type="literal",                     value="providers"                   }                 }               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type="int"             }           }         },         {           description="Get the amount of items of the given type indexed by the storage member.",           format={             takes_table=false           },           name="get_supply_counts",           order=8,           parameters={             {               description="Item name to check.",               name="item",               optional=false,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LogisticsNetworkSupplyCounts"             }           }         },         {           description="Gets the logistic points with of the given type indexed by the storage member.",           format={             takes_table=false           },           name="get_supply_points",           order=9,           parameters={             {               description="Item name to check.",               name="item",               optional=false,               order=0,               type="ItemWithQualityID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LogisticsNetworkSupplyPoints"             }           }         },         {           description="Insert items into the logistic network. This will actually insert the items into some logistic chests.",           format={             takes_table=false           },           name="insert",           order=3,           parameters={             {               description="What to insert.",               name="item",               optional=false,               order=0,               type="ItemStackIdentification"             },             {               description="Which logistic members to insert the items to. `\"storage-empty\"` inserts into storage chests that are completely empty, `\"storage-empty-slot\"` inserts into storage chests that have an empty slot. If not specified, inserts items into the logistic network in the usual order.",               name="members",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="storage"                   },                   {                     complex_type="literal",                     value="storage-empty"                   },                   {                     complex_type="literal",                     value="storage-empty-slot"                   },                   {                     complex_type="literal",                     value="requester"                   }                 }               }             }           },           return_values={             {               description="Number of items actually inserted.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Remove items from the logistic network. This will actually remove the items from some logistic chests.",           format={             takes_table=false           },           name="remove_item",           order=2,           parameters={             {               description="What to remove.",               name="item",               optional=false,               order=0,               type="ItemStackIdentification"             },             {               description="Which logistic members to remove from. If not specified, removes from the network in the usual order.",               name="members",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="active-provider"                   },                   {                     complex_type="literal",                     value="passive-provider"                   },                   {                     complex_type="literal",                     value="buffer"                   },                   {                     complex_type="literal",                     value="storage"                   }                 }               }             }           },           return_values={             {               description="Number of items removed.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Find a logistic point to drop the specific item stack.",           format={             table_optional=false,             takes_table=true           },           name="select_drop_point",           order=6,           parameters={             {               description="When given, it will find from only the specific type of member. If not specified, selects with normal priorities.",               name="members",               optional=true,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="storage"                   },                   {                     complex_type="literal",                     value="storage-empty"                   },                   {                     complex_type="literal",                     value="storage-empty-slot"                   },                   {                     complex_type="literal",                     value="requester"                   }                 }               }             },             {               description="Name of the item to drop off.",               name="stack",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="`nil` if no point was found.",               optional=true,               order=0,               type="LuaLogisticPoint"             }           }         },         {           description="Find the 'best' logistic point with this item ID and from the given position or from given chest type.",           format={             table_optional=false,             takes_table=true           },           name="select_pickup_point",           order=5,           parameters={             {               description="Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.",               name="include_buffers",               optional=true,               order=2,               type="boolean"             },             {               description="When given, it will find from only the specific type of member. If not specified, selects with normal priorities. Not considered if position is specified.",               name="members",               optional=true,               order=3,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="active-provider"                   },                   {                     complex_type="literal",                     value="passive-provider"                   },                   {                     complex_type="literal",                     value="buffer"                   },                   {                     complex_type="literal",                     value="storage"                   }                 }               }             },             {               description="Name of the item to pick up.",               name="name",               optional=false,               order=0,               type="ItemWithQualityID"             },             {               description="When given, it will find the storage 'best' storage point from this position.",               name="position",               optional=true,               order=1,               type="MapPosition"             }           },           return_values={             {               description="`nil` if no point was found.",               optional=true,               order=0,               type="LuaLogisticPoint"             }           }         }       },       name="LuaLogisticNetwork",       operators={},       order=73     },     {       abstract=false,       attributes={         {           description="Whether this logistic point is active, related to disabling logistics on player/spidertron.\n\nWhen the logistic point is disabled it won't request and auto trash will do nothing.",           name="enabled",           optional=false,           order=10,           read_type="boolean",           write_type="boolean"         },         {           description="If this logistic point is using the exact mode. In exact mode robots never over-deliver requests.",           name="exact",           optional=false,           order=8,           read_type="boolean"         },         {           description="The logistic filters for this logistic point, if this uses any.\n\nThe returned array will always have an entry for each filter and will be indexed in sequence when not `nil`.",           name="filters",           optional=true,           order=3,           read_type={             complex_type="array",             value="CompiledLogisticFilter"           }         },         {           description="The force of this logistic point.\n\nThis will always be the same as the [LuaLogisticPoint::owner](runtime:LuaLogisticPoint::owner) force.",           name="force",           optional=false,           order=5,           read_type="LuaForce"         },         {           description="The Logistic member index of this logistic point.",           name="logistic_member_index",           optional=false,           order=2,           read_type="uint"         },         {           description="",           name="logistic_network",           optional=false,           order=1,           read_type="LuaLogisticNetwork"         },         {           description="The logistic mode.",           name="mode",           optional=false,           order=4,           read_type="defines.logistic_mode"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=14,           read_type="string"         },         {           description="The [LuaEntity](runtime:LuaEntity) owner of this LuaLogisticPoint.",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="All logistic sections of this logistic point.",           name="sections",           optional=false,           order=11,           read_type={             complex_type="array",             value="LuaLogisticSection"           }         },         {           description="Amount of logistic sections this logistic point has.",           name="sections_count",           optional=false,           order=12,           read_type="uint"         },         {           description="Items targeted to be dropped off into this logistic point by robots.",           name="targeted_items_deliver",           optional=false,           order=7,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           }         },         {           description="Items targeted to be picked up from this logistic point by robots.",           name="targeted_items_pickup",           optional=false,           order=6,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           }         },         {           description="Whether this logistic point is set to trash unrequested items.",           name="trash_not_requested",           optional=false,           order=9,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=13,           read_type="boolean"         }       },       description="Logistic point of a particular [LuaEntity](runtime:LuaEntity). A \"Logistic point\" is the name given for settings and properties used by requester, provider, and storage points in a given logistic network. These \"points\" don't have to be a logistic container but often are. One other entity that can own several points is the \"character\" character type entity.",       methods={         {           description="Adds a new logistic section to this logistic point if possible.",           format={             takes_table=false           },           name="add_section",           order=0,           parameters={             {               description="The group to assign this section to.",               name="group",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="The added logistic section.",               optional=true,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Gets section on the selected index, if it exists",           format={             takes_table=false           },           name="get_section",           order=2,           parameters={             {               description="Index of the section",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).",           format={             takes_table=false           },           name="remove_section",           order=1,           parameters={             {               description="Index of the section",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether section was removed.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaLogisticPoint",       operators={},       order=74     },     {       abstract=false,       attributes={         {           description="Whether this section is active. This can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).",           name="active",           optional=false,           order=7,           read_type="boolean",           write_type="boolean"         },         {           description="The logistic filters for this section.\n\nThis can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).",           name="filters",           optional=false,           order=2,           read_type={             complex_type="array",             value="LogisticFilter"           },           write_type={             complex_type="array",             value="LogisticFilter"           }         },         {           description="Amount of filters this section has",           name="filters_count",           optional=false,           order=3,           read_type="uint"         },         {           description="The group this section belongs to.\n\nAn empty string when in no group.\n\nThis can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).",           name="group",           optional=false,           order=4,           read_type="string",           write_type="string"         },         {           description="The section index of this section.",           name="index",           optional=false,           order=1,           read_type="uint"         },         {           description="Shortcut to check whether [LuaLogisticSection::type](runtime:LuaLogisticSection::type) is equal to [manual](runtime:defines.logistic_section_type.manual).",           name="is_manual",           optional=false,           order=6,           read_type="boolean"         },         {           description="Multiplier applied to all filters before they are used by game. This can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).",           name="multiplier",           optional=false,           order=8,           read_type="float",           write_type="float"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=10,           read_type="string"         },         {           description="The [LuaEntity](runtime:LuaEntity) owner of this LuaLogisticSection.",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="The type of this logistic section. Sections that are not manual are controlled by game itself and may not be allowed to be changed by script.",           name="type",           optional=false,           order=5,           read_type="defines.logistic_section_type"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=9,           read_type="boolean"         }       },       description="Logistic section of a particular [LuaLogisticPoint](runtime:LuaLogisticPoint) or [LuaConstantCombinatorControlBehavior](runtime:LuaConstantCombinatorControlBehavior).",       methods={         {           description="Clears the logistic request and auto-trash from the given slot.\n\nThis can only be called when the section [is manual](runtime:LuaLogisticSection::is_manual).",           format={             takes_table=false           },           name="clear_slot",           order=2,           parameters={             {               description="Index of a slot to clear.",               name="slot_index",               optional=false,               order=0,               type="LogisticFilterIndex"             }           },           return_values={}         },         {           description="Gets current settings of logistic request and auto-trash from the given slot.",           format={             takes_table=false           },           name="get_slot",           order=1,           parameters={             {               description="Index of a slot to read.",               name="slot_index",               optional=false,               order=0,               type="LogisticFilterIndex"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LogisticFilter"             }           }         },         {           description="Sets logistic request and auto-trash slot to the given value.\n\nThis will silently fail if personal logistics are not researched yet.\n\nThis can only be called when the section [is manual](runtime:LuaLogisticSection::is_manual).",           format={             takes_table=false           },           name="set_slot",           order=0,           parameters={             {               description="The details of the filter to set.",               name="filter",               optional=false,               order=1,               type="LogisticFilter"             },             {               description="Index of a slot to set.",               name="slot_index",               optional=false,               order=0,               type="LogisticFilterIndex"             }           },           raises={             {               description="Raised if setting of logistic slot was successful.",               name="on_entity_logistic_slot_changed",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The existing index for the given filter or nil if the filter was successfully set.",               optional=true,               order=0,               type="LogisticFilterIndex"             }           }         }       },       name="LuaLogisticSection",       operators={},       order=75     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="All logistic sections of this entity.",           name="sections",           optional=false,           order=0,           read_type={             complex_type="array",             value="LuaLogisticSection"           }         },         {           description="Amount of logistic sections this entity has.",           name="sections_count",           optional=false,           order=1,           read_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Logistic sections of an entity.",       methods={         {           description="Adds a new logistic section if possible.",           format={             takes_table=false           },           name="add_section",           order=0,           parameters={             {               description="The group to assign this section to.",               name="group",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="Logistic section if added.",               optional=true,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Gets section on the selected index, if it exists.",           format={             takes_table=false           },           name="get_section",           order=2,           parameters={             {               description="Index of the section.",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaLogisticSection"             }           }         },         {           description="Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).",           format={             takes_table=false           },           name="remove_section",           order=1,           parameters={             {               description="Index of the section.",               name="section_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether section was removed.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaLogisticSections",       operators={},       order=76     },     {       abstract=false,       attributes={         {           description="`true` if this drill should send the resources in the field to the circuit network.\n\nWhich resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](runtime:LuaMiningDrillControlBehavior::resource_read_mode)",           name="circuit_read_resources",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="If the mining drill should send just the resources in its area or the entire field it's on to the circuit network.",           name="resource_read_mode",           optional=false,           order=1,           read_type="defines.control_behavior.mining_drill.resource_read_mode",           write_type="defines.control_behavior.mining_drill.resource_read_mode"         },         {           description="The resource entities that the mining drill will send information about to the circuit network or an empty array.",           name="resource_read_targets",           optional=false,           order=2,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Control behavior for mining drills.",       methods={},       name="LuaMiningDrillControlBehavior",       operators={},       order=77,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="Provides full data of this prototype.",           name="data",           optional=false,           order=1,           read_type={             complex_type="dictionary",             key="string",             value="AnyBasic"           }         },         {           description="",           name="data_type",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Arbitrary data provided by mods.",       methods={         {           description="Provides partial access to the data.",           format={             takes_table=false           },           name="get",           order=0,           parameters={             {               description="",               name="key",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="AnyBasic"             }           }         }       },       name="LuaModData",       operators={},       order=78,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="Whether this string setting allows blank values. `nil` if not a string setting.",           name="allow_blank",           optional=true,           order=6,           read_type="boolean"         },         {           description="The allowed values for this setting. `nil` if this setting doesn't use the a fixed set of values.",           name="allowed_values",           optional=true,           order=5,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="array",                 value="string"               },               {                 complex_type="array",                 value="int"               },               {                 complex_type="array",                 value="double"               }             }           }         },         {           description="Whether this string setting auto-trims values. `nil` if not a string setting",           name="auto_trim",           optional=true,           order=7,           read_type="boolean"         },         {           description="The default value of this setting.",           name="default_value",           optional=false,           order=2,           read_type={             complex_type="union",             full_format=false,             options={               "boolean",               "double",               "int",               "string",               "Color"             }           }         },         {           description="The maximum value for this setting. `nil` if this setting type doesn't support a maximum.",           name="maximum_value",           optional=true,           order=4,           read_type={             complex_type="union",             full_format=false,             options={               "double",               "int"             }           }         },         {           description="The minimum value for this setting. `nil` if this setting type doesn't support a minimum.",           name="minimum_value",           optional=true,           order=3,           read_type={             complex_type="union",             full_format=false,             options={               "double",               "int"             }           }         },         {           description="The mod that owns this setting.",           name="mod",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="",           name="setting_type",           optional=false,           order=1,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="startup"               },               {                 complex_type="literal",                 value="runtime-global"               },               {                 complex_type="literal",                 value="runtime-per-user"               }             }           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="Prototype of a mod setting.",       methods={},       name="LuaModSettingPrototype",       operators={},       order=79,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a module category.",       methods={},       name="LuaModuleCategoryPrototype",       operators={},       order=80,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The expression itself.",           name="expression",           optional=false,           order=1,           read_type="string"         },         {           description="Name of the property that this expression is intended to provide a value for, if any.",           name="intended_property",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Prototype of a named noise expression.",       methods={},       name="LuaNamedNoiseExpression",       operators={},       order=81,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="expression",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Prototype of a named noise function.",       methods={},       name="LuaNamedNoiseFunction",       operators={},       order=82,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="ended_in_water_trigger_effect",           optional=false,           order=1,           read_type="TriggerEffectItem"         },         {           description="",           name="ended_on_ground_trigger_effect",           optional=false,           order=2,           read_type="TriggerEffectItem"         },         {           description="",           name="fade_out_time",           optional=false,           order=5,           read_type="uint"         },         {           description="",           name="life_time",           optional=false,           order=6,           read_type="uint"         },         {           description="",           name="mining_particle_frame_speed",           optional=false,           order=11,           read_type="float"         },         {           description="",           name="movement_modifier",           optional=false,           order=9,           read_type="float"         },         {           description="",           name="movement_modifier_when_on_ground",           optional=false,           order=8,           read_type="float"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=13,           read_type="string"         },         {           description="",           name="regular_trigger_effect",           optional=false,           order=0,           read_type="TriggerEffectItem"         },         {           description="",           name="regular_trigger_effect_frequency",           optional=false,           order=7,           read_type="uint"         },         {           description="",           name="render_layer",           optional=false,           order=3,           read_type="RenderLayer"         },         {           description="",           name="render_layer_when_on_ground",           optional=false,           order=4,           read_type="RenderLayer"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=12,           read_type="boolean"         },         {           description="",           name="vertical_acceleration",           optional=false,           order=10,           read_type="float"         }       },       description="Prototype of an optimized particle.",       methods={},       name="LuaParticlePrototype",       operators={},       order=83,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The group ID",           name="group_id",           optional=false,           order=2,           read_type="uint"         },         {           description="The name of this group. Setting the name to `nil` or an empty string sets the name to the default value.",           name="name",           optional=false,           order=0,           read_type="string",           write_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="The players in this group.",           name="players",           optional=false,           order=1,           read_type={             complex_type="array",             value="LuaPlayer"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="A permission group that defines what players in this group are allowed to do.",       methods={         {           description="Adds the given player to this group.",           format={             takes_table=false           },           name="add_player",           order=0,           parameters={             {               description="",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           return_values={             {               description="Whether the player was added.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Whether this group allows the given action.",           format={             takes_table=false           },           name="allows_action",           order=2,           parameters={             {               description="The action in question.",               name="action",               optional=false,               order=0,               type="defines.input_action"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Destroys this group.",           format={             takes_table=false           },           name="destroy",           order=4,           parameters={},           return_values={             {               description="Whether the group was successfully destroyed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Removes the given player from this group.",           format={             takes_table=false           },           name="remove_player",           order=1,           parameters={             {               description="",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           return_values={             {               description="Whether the player was removed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sets whether this group allows the performance the given action.",           format={             takes_table=false           },           name="set_allows_action",           order=3,           parameters={             {               description="The action in question.",               name="action",               optional=false,               order=0,               type="defines.input_action"             },             {               description="Whether to allow the specified action.",               name="allow_action",               optional=false,               order=1,               type="boolean"             }           },           return_values={             {               description="Whether the value was successfully applied.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaPermissionGroup",       operators={},       order=84     },     {       abstract=false,       attributes={         {           description="All of the permission groups.",           name="groups",           optional=false,           order=0,           read_type={             complex_type="array",             value="LuaPermissionGroup"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="All permission groups.",       methods={         {           description="Creates a new permission group.",           format={             takes_table=false           },           name="create_group",           order=0,           parameters={             {               description="",               name="name",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="`nil` if the calling player doesn't have permission to make groups.",               optional=true,               order=0,               type="LuaPermissionGroup"             }           }         },         {           description="Gets the permission group with the given name or group ID.",           format={             takes_table=false           },           name="get_group",           order=1,           parameters={             {               description="",               name="group",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   "uint"                 }               }             }           },           return_values={             {               description="`nil` if there is no matching group.",               optional=true,               order=0,               type="LuaPermissionGroup"             }           }         }       },       name="LuaPermissionGroups",       operators={},       order=85     },     {       abstract=false,       attributes={         {           description="The planets name.",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="",           name="prototype",           optional=false,           order=1,           read_type="LuaSpaceLocationPrototype"         },         {           description="The surface for this planet if one currently exists.\n\nPlanets do not default generate their surface. [LuaPlanet::create_surface](runtime:LuaPlanet::create_surface) can be used to force the surface to exist.\n\n[LuaPlanet::associate_surface](runtime:LuaPlanet::associate_surface) can be used to create an association with an existing surface.",           name="surface",           optional=true,           order=2,           read_type="LuaSurface"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="The runtime values of a planet",       methods={         {           description="Associates the given surface with this planet. Surface must not already be associated with a planet and the planet must not already have an associated surface.\n\nPlanet must not be using [entities_require_heating](runtime:LuaSpaceLocationPrototype::entities_require_heating).",           format={             takes_table=false           },           name="associate_surface",           order=1,           parameters={             {               description="The surface to be associated.",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Creates the associated surface if one doesn't already exist.",           format={             takes_table=false           },           name="create_surface",           order=0,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaSurface"             }           }         },         {           description="Resets the map gen settings on this planet to the default from-prototype state.",           format={             takes_table=false           },           name="reset_map_gen_settings",           order=2,           parameters={},           return_values={}         }       },       name="LuaPlanet",       operators={},       order=86     },     {       abstract=false,       attributes={         {           description="`true` if the player is an admin.\n\nTrying to change player admin status from the console when you aren't an admin does nothing.",           name="admin",           optional=false,           order=23,           read_type="boolean",           write_type="boolean"         },         {           description="How many ticks since the last action of this player.",           name="afk_time",           optional=false,           order=25,           read_type="uint"         },         {           description="If the main inventory will be auto sorted.",           name="auto_sort_main_inventory",           optional=false,           order=43,           read_type="boolean"         },         {           description="The item stack containing a blueprint to be setup.",           name="blueprint_to_setup",           optional=false,           order=35,           read_type="LuaItemStack"         },         {           description="Records contained in the player's blueprint library.",           name="blueprints",           optional=false,           order=36,           read_type={             complex_type="array",             value="LuaRecord"           }         },         {           description="The entity being centered on in remote view.\n\nWhen writing, the player will be switched to remote view (if not already in it) and centered on the given entity.",           name="centered_on",           optional=true,           order=15,           read_type="LuaEntity",           write_type="LuaEntity"         },         {           description="The character attached to this player, if any. Returns `nil` when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",           name="character",           optional=true,           order=4,           read_type="LuaEntity",           write_type="LuaEntity"         },         {           description="The color used when this player talks in game.",           name="chat_color",           optional=false,           order=19,           read_type="Color",           write_type="Color"         },         {           description="The color associated with the player. This will be used to tint the player's character as well as their buildings and vehicles.",           name="color",           optional=false,           order=18,           read_type="Color",           write_type="Color"         },         {           description="`true` if the player is currently connected to the game.",           name="connected",           optional=false,           order=22,           read_type="boolean"         },         {           description="",           name="controller_type",           optional=false,           order=9,           read_type="defines.controllers"         },         {           description="Returns true if the current item stack in cursor will be destroyed after clearing the cursor. Manually putting it into inventory still preserves the item. If the cursor stack is not one of the supported types (blueprint, blueprint-book, deconstruction-planner, upgrade-planner), write operation will be silently ignored.",           name="cursor_stack_temporary",           optional=false,           order=45,           read_type="boolean",           write_type="boolean"         },         {           description="When in a cutscene; the character this player would be using once the cutscene is over, if any. Returns `nil` when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",           name="cutscene_character",           optional=true,           order=5,           read_type="LuaEntity"         },         {           description="The display density scale for this player. The display density scale is the factor of [LuaPlayer::display_scale](runtime:LuaPlayer::display_scale) that is determined by the physical DPI of the screen that Factorio is running on. In most cases, the default value is 1. If the player is playing on a high-density display, this value may be 2 or greater.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will always return a scale of `1`. To get the actual scale, listen to the [on_player_display_density_scale_changed](runtime:on_player_display_density_scale_changed) event raised shortly afterwards.",           name="display_density_scale",           optional=false,           order=33,           read_type="double"         },         {           description="The display resolution for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will always return a resolution of `{width=1920, height=1080}`. To get the actual resolution, listen to the [on_player_display_resolution_changed](runtime:on_player_display_resolution_changed) event raised shortly afterwards.",           name="display_resolution",           optional=false,           order=31,           read_type="DisplayResolution"         },         {           description="The display scale for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will always return a scale of `1`. To get the actual scale, listen to the [on_player_display_scale_changed](runtime:on_player_display_scale_changed) event raised shortly afterwards.",           name="display_scale",           optional=false,           order=32,           read_type="double"         },         {           description="The wire drag target for this player, if any.",           name="drag_target",           optional=true,           order=47,           read_type="DragTarget"         },         {           description="The source entity used during entity settings copy-paste, if any.",           name="entity_copy_source",           optional=true,           order=24,           read_type="LuaEntity"         },         {           description="The player's game view settings.",           name="game_view_settings",           optional=false,           order=16,           read_type="GameViewSettings",           write_type="GameViewSettings"         },         {           description="",           name="gui",           optional=false,           order=7,           read_type="LuaGui"         },         {           description="The original location of the item in the cursor, marked with a hand. `nil` if the cursor stack is empty. When writing, the specified inventory slot must be empty and the cursor stack must not be empty.",           name="hand_location",           optional=true,           order=44,           read_type="ItemStackLocation",           write_type="ItemStackLocation"         },         {           description="This player's index in [LuaGameScript::players](runtime:LuaGameScript::players) (unique ID). It is assigned when a player is created, and remains so (even when the player is not [connected](runtime:LuaPlayer::connected)) until the player is irreversibly [removed](runtime:on_player_removed). Indexes of removed players can be reused.",           name="index",           optional=false,           order=6,           read_type="uint"         },         {           description="The filters for this map editor infinity inventory settings.",           name="infinity_inventory_filters",           optional=false,           order=42,           read_type={             complex_type="array",             value="InfinityInventoryFilter"           },           write_type={             complex_type="array",             value="InfinityInventoryFilter"           }         },         {           description="The input method of the player, mouse and keyboard or game controller",           name="input_method",           optional=false,           order=38,           read_type="defines.input_method"         },         {           description="At what tick this player was last online.",           name="last_online",           optional=false,           order=27,           read_type="uint"         },         {           description="The active locale for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will be `en`. To get the actual value, listen to the [on_player_locale_changed](runtime:on_player_locale_changed) event raised shortly afterwards.",           name="locale",           optional=false,           order=34,           read_type="string"         },         {           description="The player's map view settings. To write to this, use a table containing the fields that should be changed.",           name="map_view_settings",           optional=false,           order=48,           write_type="MapViewSettings"         },         {           description="`true` if the minimap is visible.",           name="minimap_enabled",           optional=false,           order=17,           read_type="boolean",           write_type="boolean"         },         {           description="The current per-player settings for the this player, indexed by prototype name. Returns the same structure as [LuaSettings::get_player_settings](runtime:LuaSettings::get_player_settings). This table becomes invalid if its associated player does.\n\nEven though this attribute is marked as read-only, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",           examples={             "```\n-- Change the value of the \"active_lifestyle\" setting\nplayer.mod_settings[\"active_lifestyle\"] = {value = true}\n```"           },           name="mod_settings",           optional=false,           order=29,           read_type={             complex_type="LuaCustomTable",             key="string",             value="ModSetting"           }         },         {           description="The player's username.",           name="name",           optional=false,           order=20,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=50,           read_type="string"         },         {           description="How many ticks did this player spend playing this save (all sessions combined).",           name="online_time",           optional=false,           order=26,           read_type="uint"         },         {           description="`true` if the player opened itself. I.e. if they opened the character or god-controller GUI.",           name="opened_self",           optional=false,           order=8,           read_type="boolean"         },         {           description="The permission group this player is part of, if any.",           name="permission_group",           optional=true,           order=28,           read_type="LuaPermissionGroup",           write_type="LuaPermissionGroup"         },         {           description="The player's \"physical\" controller. When a player is in the remote controller, this specifies the controller they will return to. When the player is not in the remote controller, this is equivalent to [LuaPlayer::controller_type](runtime:LuaPlayer::controller_type).",           name="physical_controller_type",           optional=false,           order=10,           read_type="defines.controllers"         },         {           description="The current position of this player's physical controller.",           name="physical_position",           optional=false,           order=2,           read_type="MapPosition"         },         {           description="The surface this player's physical controller is on.",           name="physical_surface",           optional=false,           order=0,           read_type="LuaSurface"         },         {           description="Unique ID associated with the surface this player's physical controller is currently on.",           name="physical_surface_index",           optional=false,           order=1,           read_type="uint"         },         {           description="The current vehicle of this player's physical controller.",           name="physical_vehicle",           optional=true,           order=3,           read_type="LuaEntity"         },         {           description="If items not included in this map editor infinity inventory filters should be removed.",           name="remove_unfiltered_items",           optional=false,           order=41,           read_type="boolean",           write_type="boolean"         },         {           description="The render mode of the player, like map or zoom to world.",           name="render_mode",           optional=false,           order=37,           read_type="defines.render_mode"         },         {           description="If `true`, circle and name of given player is rendered on the map/chart.",           name="show_on_map",           optional=false,           order=40,           read_type="boolean",           write_type="boolean"         },         {           description="If `true`, zoom-to-world noise effect will be disabled and environmental sounds will be based on zoom-to-world view instead of position of player's character.",           name="spectator",           optional=false,           order=39,           read_type="boolean",           write_type="boolean"         },         {           description="All SpiderVehicles currently selected by the player, if they are holding a spidertron remote.",           name="spidertron_remote_selection",           optional=true,           order=12,           read_type={             complex_type="array",             value="LuaEntity"           },           write_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The stashed controller type, if any. This is mainly useful when a player is in the map editor.",           name="stashed_controller_type",           optional=true,           order=11,           read_type="defines.controllers"         },         {           description="The tag that is shown after the player in chat, on the map and above multiplayer selection rectangles.",           name="tag",           optional=false,           order=21,           read_type="string",           write_type="string"         },         {           description="The number of ticks until this player will respawn. `nil` if this player is not waiting to respawn.\n\nSet to `nil` to immediately respawn the player.\n\nSet to any positive value to trigger the respawn state for this player.",           name="ticks_to_respawn",           optional=true,           order=30,           read_type="uint",           write_type="uint"         },         {           description="The undo and redo stack for this player.",           name="undo_redo_stack",           optional=false,           order=46,           read_type="LuaUndoRedoStack"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=49,           read_type="boolean"         },         {           description="The current player controller's zoom level. Must be positive. The baseline zoom level is 1. Values greater than 1 will zoom in closer to the world and values between 0 and 1 will zoom out away from the world.\n\nWriting values outside the current zoom limits is always valid, but read values will always be clamped to the range defined by [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits).",           name="zoom",           optional=false,           order=13,           read_type="double",           write_type="double"         },         {           description="The current player controller's zoom limits.\n\nReading this field creates a copy, so modifying the returned table's fields directly will not alter the player's zoom limits. To change the zoom limits for the player's current controller, set the entire field to the desired [ZoomLimits](runtime:ZoomLimits) table.\n\nZoom limits may or may not reset to default any time the player controller changes. Use the [defines.events.on_player_controller_changed](runtime:defines.events.on_player_controller_changed) event to respond to and correct the new controller's zoom limits.",           examples={             "```\n-- Lets the player zoom in to 4x the standard zoom level. (3x is the default for most controllers.)\n-- Increases the player zoom out level so that they can view approximately 800 tiles across.\n-- Sets furthest_game_view to furthest so that all zoom levels are rendered in game view, never chart (map) view.\ngame.player.zoom_limits = {\n  closest = { zoom = 4 },\n  furthest = { distance = 800, max_distance = 1000 },\n  furthest_game_view = { distance = 800, max_distance = 1000 }\n}\n```",             "```\n-- Resets the closest and furthest_game_view limits to their defaults.\n-- Increases the furthest a player can zoom out to approximately 400 tiles across. There's a hard zoom limit at\n-- 800 tiles (either vertically or horizontally, whichever is more).\ngame.player.zoom_limits = {\n  furthest = { distance = 400, max_distance = 800 }\n}\n```",             "```\n-- Sets the closest that the player can zoom in to 3x (the default for most controllers).\n-- Sets the furthest that the player can view in game view to some number GREATER than\n-- closest, guaranteeing that the player can only view the chart. However, this does NOT mean that the player\n-- can interact with the game as if in remote view if they are not explicitly using remote view.\ngame.player.zoom_limits = {\n  closest = { zoom = 3 },\n  furthest_game_view = { zoom = 4 }\n}\n```",             "```\n-- Save a copy of whatever zoom limits any script has previously set.\nlocal custom_limits = game.player.zoom_limits\n-- Resets all zoom limits to default.\ngame.player.zoom_limits = {}\n-- Save a copy of whatever the default zoom limits are for the current controller.\nlocal default_limits = game.player.zoom_limits\n-- Set the zoom limits to a modification of the engine-default closest zoom limit (or 6 if the engine-default is\n-- not a fixed zoom value), the furthest limit previously defined by script (or the engine default if not\n-- previously set by a script), and some arbitrary value for `furthest_game_view`.\ngame.player.zoom_limits = {\n  closest = { zoom = (default_limits.furthest.zoom or 3.0) * 2 },\n  furthest = custom_limits.furthest,\n  furthest_game_view = { zoom = 0.25 }\n}\n```"           },           name="zoom_limits",           optional=false,           order=14,           read_type="ZoomLimits",           write_type="ZoomLimits"         }       },       description="A player in the game. Pay attention that a player may or may not have a character, which is the [LuaEntity](runtime:LuaEntity) of the little guy running around the world doing things.",       methods={         {           description="Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.",           format={             takes_table=false           },           name="activate_paste",           order=62,           parameters={},           return_values={}         },         {           description="Adds an alert to this player for the given entity of the given alert type.",           format={             takes_table=false           },           name="add_alert",           order=17,           parameters={             {               description="",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="",               name="type",               optional=false,               order=1,               type="defines.alert_type"             }           },           return_values={}         },         {           description="Adds a custom alert to this player.",           format={             takes_table=false           },           name="add_custom_alert",           order=18,           parameters={             {               description="If the alert is clicked, the map will open at the position of this entity.",               name="entity",               optional=false,               order=0,               type="LuaEntity"             },             {               description="",               name="icon",               optional=false,               order=1,               type="SignalID"             },             {               description="",               name="message",               optional=false,               order=2,               type="LocalisedString"             },             {               description="",               name="show_on_map",               optional=false,               order=3,               type="boolean"             }           },           return_values={}         },         {           description="Adds a pin to this player for the given pin specification. Either entity, player, or surface and position must be defined.",           format={             table_optional=false,             takes_table=true           },           name="add_pin",           order=27,           parameters={             {               description="",               name="always_visible",               optional=true,               order=2,               type="boolean"             },             {               description="The entity to pin.",               name="entity",               optional=true,               order=3,               type="LuaEntity"             },             {               description="",               name="label",               optional=true,               order=0,               type="string"             },             {               description="The player to pin.",               name="player",               optional=true,               order=4,               type="PlayerIdentification"             },             {               description="Where to create the pin. Required when surface is defined.",               name="position",               optional=true,               order=6,               type="MapPosition"             },             {               description="",               name="preview_distance",               optional=true,               order=1,               type="uint16"             },             {               description="The surface to create the pin on.",               name="surface",               optional=true,               order=5,               type="SurfaceIdentification"             }           },           return_values={}         },         {           description="Adds the given recipe to the list of recipe notifications for this player.",           format={             takes_table=false           },           name="add_recipe_notification",           order=59,           parameters={             {               description="Recipe to add.",               name="recipe",               optional=false,               order=0,               type="RecipeID"             }           },           return_values={}         },         {           description="Adds the given blueprint to this player's clipboard queue.",           format={             takes_table=false           },           name="add_to_clipboard",           order=61,           parameters={             {               description="The blueprint to add.",               name="blueprint",               optional=false,               order=0,               type="LuaItemStack"             }           },           return_values={}         },         {           description="Associates a character with this player.\n\nThe character must not be connected to any controller.\n\nIf this player is currently disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)) the character will be immediately \"logged off\".\n\nSee [LuaPlayer::get_associated_characters](runtime:LuaPlayer::get_associated_characters) for more information.",           format={             takes_table=false           },           name="associate_character",           order=37,           parameters={             {               description="The character entity.",               name="character",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={}         },         {           description="Builds whatever is in the cursor on the surface the player is on. The cursor stack will automatically be reduced as if the player built normally.",           format={             table_optional=false,             takes_table=true           },           name="build_from_cursor",           order=32,           parameters={             {               description="Which build mode should be used instead of normal build. Defaults to normal.",               name="build_mode",               optional=true,               order=3,               type="defines.build_mode"             },             {               description="Direction the entity would be placed",               name="direction",               optional=true,               order=1,               type="defines.direction"             },             {               description="Whether to mirror the entity",               name="mirror",               optional=true,               order=2,               type="boolean"             },             {               description="Where the entity would be placed",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=5,               type="boolean"             },             {               description="The size for building terrain if building terrain. Defaults to 2.",               name="terrain_building_size",               optional=true,               order=4,               type="uint"             }           },           raises={             {               description="Raised if the cursor was successfully built.",               name="on_built_entity",               optional=true,               order=1,               timeframe="instantly"             },             {               description="Raised if the cursor was successfully built.",               name="on_pre_build",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Checks if this player can build what ever is in the cursor on the surface the player is on.",           format={             table_optional=false,             takes_table=true           },           name="can_build_from_cursor",           order=31,           parameters={             {               description="Which build mode should be used instead of normal build. Defaults to normal.",               name="build_mode",               optional=true,               order=2,               type="defines.build_mode"             },             {               description="Direction the entity would be placed",               name="direction",               optional=true,               order=1,               type="defines.direction"             },             {               description="Where the entity would be placed",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=4,               type="boolean"             },             {               description="The size for building terrain if building terrain. Defaults to 2.",               name="terrain_building_size",               optional=true,               order=3,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Checks if this player can build the given entity at the given location on the surface the player is on.",           format={             table_optional=false,             takes_table=true           },           name="can_place_entity",           order=30,           parameters={             {               description="Direction the entity would be placed. Defaults to `north`.",               name="direction",               optional=true,               order=2,               type="defines.direction"             },             {               description="Name of the entity to check.",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="Where the entity would be placed.",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Clear the chat console.",           format={             takes_table=false           },           name="clear_console",           order=2,           parameters={},           return_values={}         },         {           description="Invokes the \"clear cursor\" action on the player as if the user pressed it.",           format={             takes_table=false           },           name="clear_cursor",           order=15,           parameters={},           raises={             {               description="Raised when the cursor was successfully cleared.",               name="on_player_cursor_stack_changed",               optional=true,               order=0,               timeframe="current_tick"             }           },           return_values={             {               description="Whether the cursor is now empty.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Clears the blinking of the inventory based on insertion of items",           format={             takes_table=false           },           name="clear_inventory_highlights",           order=33,           parameters={},           return_values={}         },         {           description="Clear any active flying texts for this player.",           format={             takes_table=false           },           name="clear_local_flying_texts",           order=40,           parameters={},           return_values={}         },         {           description="Clears the given recipe from the list of recipe notifications for this player.",           format={             takes_table=false           },           name="clear_recipe_notification",           order=60,           parameters={             {               description="Recipe to clear.",               name="recipe",               optional=false,               order=0,               type="RecipeID"             }           },           return_values={}         },         {           description="Clears all recipe notifications for this player.",           format={             takes_table=false           },           name="clear_recipe_notifications",           order=58,           parameters={},           return_values={}         },         {           description="Clears the player's selection tool selection position.",           format={             takes_table=false           },           name="clear_selection",           order=64,           parameters={},           return_values={}         },         {           description="Asks the player if they would like to connect to the given server.\n\nThis only does anything when used on a multiplayer peer. Single player and server hosts will ignore the prompt.",           format={             table_optional=false,             takes_table=true           },           name="connect_to_server",           order=52,           parameters={             {               description="The server (address:port) if port is not given the default Factorio port is used.",               name="address",               optional=false,               order=0,               type="string"             },             {               description="",               name="description",               optional=true,               order=2,               type="LocalisedString"             },             {               description="The name of the server.",               name="name",               optional=true,               order=1,               type="LocalisedString"             },             {               description="The password if different from the one used to join this game. Note, if the current password is not empty but the one required to join the new server is an empty string should be given for this field.",               name="password",               optional=true,               order=3,               type="string"             }           },           return_values={}         },         {           description="Creates and attaches a character entity to this player.\n\nThe player must not have a character already connected and must be online (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",           format={             takes_table=false           },           name="create_character",           order=16,           parameters={             {               description="The character to create else the default is used.",               name="character",               optional=true,               order=0,               type="EntityWithQualityID"             }           },           return_values={             {               description="Whether the character was created.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Spawn flying text that is only visible to this player. Either `position` or `create_at_cursor` are required. When `create_at_cursor` is `true`, all parameters other than `text` are ignored.\n\nIf no custom `speed` is set and the text is longer than 25 characters, its `time_to_live` and `speed` are dynamically adjusted to give the player more time to read it.\n\nLocal flying text is not saved, which means it will disappear after a save/load-cycle.",           format={             table_optional=false,             takes_table=true           },           name="create_local_flying_text",           order=39,           parameters={             {               description="The color of the flying text. Defaults to white text.",               name="color",               optional=true,               order=4,               type="Color"             },             {               description="If `true`, the flying text is created at the player's cursor. Defaults to `false`.",               name="create_at_cursor",               optional=true,               order=3,               type="boolean"             },             {               description="The location on the map at which to show the flying text.",               name="position",               optional=true,               order=1,               type="MapPosition"             },             {               description="The speed at which the text rises upwards in tiles/second. Can't be a negative value.",               name="speed",               optional=true,               order=6,               type="double"             },             {               description="The surface which this text will be shown on. Defaults to player surface.",               name="surface",               optional=true,               order=2,               type="SurfaceIdentification"             },             {               description="The flying text to show.",               name="text",               optional=false,               order=0,               type="LocalisedString"             },             {               description="The amount of ticks that the flying text will be shown for. Defaults to `80`.",               name="time_to_live",               optional=true,               order=5,               type="uint"             }           },           return_values={}         },         {           description="Disables alerts for the given alert category.",           format={             takes_table=false           },           name="disable_alert",           order=25,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="Whether the alert type was disabled (false if it was already disabled).",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Disable recipe groups.",           format={             takes_table=false           },           name="disable_recipe_groups",           order=7,           parameters={},           return_values={}         },         {           description="Disable recipe subgroups.",           format={             takes_table=false           },           name="disable_recipe_subgroups",           order=9,           parameters={},           return_values={}         },         {           description="Disassociates a character from this player. This is functionally the same as setting [LuaEntity::associated_player](runtime:LuaEntity::associated_player) to `nil`.\n\nSee [LuaPlayer::get_associated_characters](runtime:LuaPlayer::get_associated_characters) for more information.",           format={             takes_table=false           },           name="disassociate_character",           order=38,           parameters={             {               description="The character entity",               name="character",               optional=false,               order=0,               type="LuaEntity"             }           },           return_values={}         },         {           description="Start/end wire dragging at the specified location, wire type is based on the cursor contents",           format={             table_optional=false,             takes_table=true           },           name="drag_wire",           order=6,           parameters={             {               description="Position at which cursor was clicked. Used only to decide which side of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself to be connected is based on the player's selected entity.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="`true` if the action did something",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Enables alerts for the given alert category.",           format={             takes_table=false           },           name="enable_alert",           order=24,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="Whether the alert type was enabled (false if it was already enabled).",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Enable recipe groups.",           format={             takes_table=false           },           name="enable_recipe_groups",           order=8,           parameters={},           return_values={}         },         {           description="Enable recipe subgroups.",           format={             takes_table=false           },           name="enable_recipe_subgroups",           order=10,           parameters={},           return_values={}         },         {           description="Enters the given space platform if possible.",           format={             takes_table=false           },           name="enter_space_platform",           order=65,           parameters={             {               description="",               name="space_platform",               optional=false,               order=0,               type="SpacePlatformIdentification"             }           },           return_values={             {               description="If the player entered the platform.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Exit the current cutscene. Errors if not in a cutscene.",           format={             takes_table=false           },           name="exit_cutscene",           order=46,           parameters={},           raises={             {               description="Raised if the cutscene was successfully cancelled.",               name="on_cutscene_cancelled",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Exit remote view if possible. Exiting will fail if the player is in a rocket or in a platform.",           format={             takes_table=false           },           name="exit_remote_view",           order=47,           parameters={},           return_values={}         },         {           description="Gets which quick bar page is being used for the given screen page or `nil` if not known.",           format={             takes_table=false           },           name="get_active_quick_bar_page",           order=43,           parameters={             {               description="The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint8"             }           }         },         {           description="Get all alerts matching the given filters, or all alerts if no filters are given.",           format={             table_optional=false,             takes_table=true           },           name="get_alerts",           order=20,           parameters={             {               description="",               name="entity",               optional=true,               order=0,               type="LuaEntity"             },             {               description="",               name="position",               optional=true,               order=2,               type="MapPosition"             },             {               description="",               name="prototype",               optional=true,               order=1,               type="LuaEntityPrototype"             },             {               description="",               name="surface",               optional=true,               order=4,               type="SurfaceIdentification"             },             {               description="",               name="type",               optional=true,               order=3,               type="defines.alert_type"             }           },           return_values={             {               description="A mapping of surface index to an array of arrays of [alerts](runtime:Alert) indexed by the [alert type](runtime:defines.alert_type).",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="uint",                 value={                   complex_type="dictionary",                   key="defines.alert_type",                   value={                     complex_type="array",                     value="Alert"                   }                 }               }             }           }         },         {           description="The characters associated with this player.\n\nThe array will always be empty when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)) regardless of there being associated characters.\n\nCharacters associated with this player will be logged off when this player disconnects but are not controlled by any player.",           format={             takes_table=false           },           name="get_associated_characters",           order=36,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Get the current goal description, as a localised string.",           format={             takes_table=false           },           name="get_goal_description",           order=3,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LocalisedString"             }           }         },         {           description="Gets the filter for this map editor infinity filters at the given index or `nil` if the filter index doesn't exist or is empty.",           format={             takes_table=false           },           name="get_infinity_inventory_filter",           order=56,           parameters={             {               description="The index to get.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="InfinityInventoryFilter"             }           }         },         {           description="Gets the quick bar filter for the given slot or `nil`.",           format={             takes_table=false           },           name="get_quick_bar_slot",           order=41,           parameters={             {               description="The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ItemFilter"             }           }         },         {           description="If the given alert type is currently enabled.",           format={             takes_table=false           },           name="is_alert_enabled",           order=26,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="If the given alert type is currently muted.",           format={             takes_table=false           },           name="is_alert_muted",           order=23,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is a custom Lua shortcut currently available?",           format={             takes_table=false           },           name="is_shortcut_available",           order=49,           parameters={             {               description="Prototype name of the custom shortcut.",               name="prototype_name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Is a custom Lua shortcut currently toggled?",           format={             takes_table=false           },           name="is_shortcut_toggled",           order=48,           parameters={             {               description="Prototype name of the custom shortcut.",               name="prototype_name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscene.",           format={             takes_table=false           },           name="jump_to_cutscene_waypoint",           order=45,           parameters={             {               description="",               name="waypoint_index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Ejects this player from the current space platform and lands on the current planet.",           format={             takes_table=false           },           name="land_on_planet",           order=67,           parameters={},           return_values={             {               description="If the player successfully landed on the planet.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Ejects this player from the current space platform if in a platform. The player is left on the platform at the position of the hub.",           format={             takes_table=false           },           name="leave_space_platform",           order=66,           parameters={},           return_values={}         },         {           description="Mutes alerts for the given alert category.",           format={             takes_table=false           },           name="mute_alert",           order=21,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="Whether the alert type was muted (false if it was already muted).",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Invokes the \"smart pipette\" action on the player as if the user pressed it.",           format={             takes_table=false           },           name="pipette",           order=29,           parameters={             {               description="Defaults to false.",               name="allow_ghost",               optional=true,               order=2,               type="boolean"             },             {               description="",               name="id",               optional=false,               order=0,               type="PipetteID"             },             {               description="",               name="quality",               optional=true,               order=1,               type="QualityID"             }           },           raises={             {               description="Raised if an item was successfully put into the cursor.",               name="on_player_pipette",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the smart pipette found something to put into the cursor.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Invokes the \"smart pipette\" action on the player as if the user pressed it. This method is deprecated in favor of [LuaPlayer::pipette](runtime:LuaPlayer::pipette) and should not be used.",           format={             takes_table=false           },           name="pipette_entity",           order=28,           parameters={             {               description="Defaults to false.",               name="allow_ghost",               optional=true,               order=1,               type="boolean"             },             {               description="",               name="entity",               optional=false,               order=0,               type="EntityWithQualityID"             }           },           raises={             {               description="Raised if the entity was successfully pipetted.",               name="on_player_pipette",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="Whether the smart pipette found something to place.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Play a sound for this player.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for this player.",           format={             takes_table=false           },           name="play_sound",           order=35,           parameters={             {               description="The sound to play.",               name="sound_specification",               optional=false,               order=0,               type="PlaySoundSpecification"             }           },           return_values={}         },         {           description="Print text to the chat console.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.",           format={             takes_table=false           },           name="print",           order=1,           parameters={             {               description="",               name="message",               optional=false,               order=0,               type="LocalisedString"             },             {               description="",               name="print_settings",               optional=true,               order=1,               type="PrintSettings"             }           },           return_values={}         },         {           description="Print entity statistics to the player's console.",           format={             takes_table=false           },           name="print_entity_statistics",           order=11,           parameters={             {               description="Entity prototypes to get statistics for. If not specified or empty, display statistics for all entities.",               name="entities",               optional=true,               order=0,               type={                 complex_type="array",                 value="EntityWithQualityID"               }             }           },           return_values={}         },         {           description="Print LuaObject counts per mod.",           format={             takes_table=false           },           name="print_lua_object_statistics",           order=13,           parameters={},           return_values={}         },         {           description="Print construction robot job counts to the player's console.",           format={             takes_table=false           },           name="print_robot_jobs",           order=12,           parameters={},           return_values={}         },         {           description="Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.",           format={             table_optional=false,             takes_table=true           },           name="remove_alert",           order=19,           parameters={             {               description="",               name="entity",               optional=true,               order=0,               type="LuaEntity"             },             {               description="",               name="icon",               optional=true,               order=5,               type="SignalID"             },             {               description="",               name="message",               optional=true,               order=6,               type="LocalisedString"             },             {               description="",               name="position",               optional=true,               order=2,               type="MapPosition"             },             {               description="",               name="prototype",               optional=true,               order=1,               type="EntityID"             },             {               description="",               name="surface",               optional=true,               order=4,               type="SurfaceIdentification"             },             {               description="",               name="type",               optional=true,               order=3,               type="defines.alert_type"             }           },           return_values={}         },         {           description="Requests a translation for the given localised string. If the request is successful, the [on_string_translated](runtime:on_string_translated) event will be fired with the results.\n\nDoes nothing if this player is not connected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",           format={             takes_table=false           },           name="request_translation",           order=54,           parameters={             {               description="",               name="localised_string",               optional=false,               order=0,               type="LocalisedString"             }           },           raises={             {               description="Raised if the request was successfully sent.",               name="on_string_translated",               optional=true,               order=0,               timeframe="future_tick"             }           },           return_values={             {               description="The unique ID for the requested translation.",               optional=true,               order=0,               type="uint"             }           }         },         {           description="Requests translation for the given set of localised strings. If the request is successful, a [on_string_translated](runtime:on_string_translated) event will be fired for each string with the results.\n\nDoes nothing if this player is not connected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",           format={             takes_table=false           },           name="request_translations",           order=55,           parameters={             {               description="",               name="localised_strings",               optional=false,               order=0,               type={                 complex_type="array",                 value="LocalisedString"               }             }           },           raises={             {               description="Raised if the request was successfully sent.",               name="on_string_translated",               optional=true,               order=0,               timeframe="future_tick"             }           },           return_values={             {               description="The unique IDs for the requested translations.",               optional=true,               order=0,               type={                 complex_type="array",                 value="uint"               }             }           }         },         {           description="Sets which quick bar page is being used for the given screen page.",           format={             takes_table=false           },           name="set_active_quick_bar_page",           order=44,           parameters={             {               description="The new quick bar page.",               name="page_index",               optional=false,               order=1,               type="uint"             },             {               description="The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",               name="screen_index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Set the controller type of the player.\n\nSetting a player to [defines.controllers.editor](runtime:defines.controllers.editor) auto promotes the player to admin and enables cheat mode. Setting a player to [defines.controllers.editor](runtime:defines.controllers.editor) also requires the calling player be an admin.",           format={             table_optional=false,             takes_table=true           },           name="set_controller",           order=5,           parameters={             {               description="Entity to control. Mandatory when `type` is [defines.controllers.character](runtime:defines.controllers.character), ignored otherwise.",               name="character",               optional=true,               order=1,               type="LuaEntity"             },             {               description="If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.",               name="chart_mode_cutoff",               optional=true,               order=6,               type="double"             },             {               description="If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting position. If not given the camera will not pan back to the start position/zoom.",               name="final_transition_time",               optional=true,               order=5,               type="uint"             },             {               description="If specified and `type` is [defines.controllers.remote](runtime:defines.controllers.remote), the position the remote controller will be centered on.",               name="position",               optional=true,               order=7,               type="MapPosition"             },             {               description="If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the cutscene will start at this position. If not given the start position will be the player position.",               name="start_position",               optional=true,               order=3,               type="MapPosition"             },             {               description="If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the cutscene will start at this zoom level. If not given the start zoom will be the player's zoom.",               name="start_zoom",               optional=true,               order=4,               type="double"             },             {               description="If specified and `type` is [defines.controllers.remote](runtime:defines.controllers.remote), the surface the remote controller will be put on.",               name="surface",               optional=true,               order=8,               type="SurfaceIdentification"             },             {               description="Which controller to use.",               name="type",               optional=false,               order=0,               type="defines.controllers"             },             {               description="List of waypoints for the cutscene controller. This parameter is mandatory when `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene).",               name="waypoints",               optional=true,               order=2,               type={                 complex_type="array",                 value="CutsceneWaypoint"               }             }           },           return_values={}         },         {           description="Setup the screen to be shown when the game is finished.",           format={             takes_table=false           },           name="set_ending_screen_data",           order=0,           parameters={             {               description="Path to image to be shown.",               name="file",               optional=true,               order=1,               type="string"             },             {               description="Message to be shown.",               name="message",               optional=false,               order=0,               type="LocalisedString"             }           },           return_values={}         },         {           description="Set the text in the goal window (top left).",           format={             takes_table=false           },           name="set_goal_description",           order=4,           parameters={             {               description="When `true`, won't play the \"goal updated\" sound.",               name="only_update",               optional=true,               order=1,               type="boolean"             },             {               description="The text to display. Lines can be delimited with `\\n`. Passing an empty string or omitting this parameter entirely will make the goal window disappear.",               name="text",               optional=true,               order=0,               type="LocalisedString"             }           },           return_values={}         },         {           description="Sets the filter for this map editor infinity filters at the given index.",           format={             takes_table=false           },           name="set_infinity_inventory_filter",           order=57,           parameters={             {               description="The new filter or `nil` to clear the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "InfinityInventoryFilter",                   "nil"                 }               }             },             {               description="The index to set.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the quick bar filter for the given slot. If a [LuaItemStack](runtime:LuaItemStack) is provided, the slot will be set to that particular item instance if it has extra data, for example a specific blueprint or spidertron remote. Otherwise, it will be set to all items of that prototype, for example iron plates.",           format={             takes_table=false           },           name="set_quick_bar_slot",           order=42,           parameters={             {               description="The filter or `nil` to clear it.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaItemStack",                   "ItemWithQualityID",                   "nil"                 }               }             },             {               description="The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Make a custom Lua shortcut available or unavailable.",           format={             takes_table=false           },           name="set_shortcut_available",           order=51,           parameters={             {               description="",               name="available",               optional=false,               order=1,               type="boolean"             },             {               description="Prototype name of the custom shortcut.",               name="prototype_name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Toggle or untoggle a custom Lua shortcut",           format={             takes_table=false           },           name="set_shortcut_toggled",           order=50,           parameters={             {               description="Prototype name of the custom shortcut.",               name="prototype_name",               optional=false,               order=0,               type="string"             },             {               description="",               name="toggled",               optional=false,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="Starts selection with selection tool from the specified position. Does nothing if the player's cursor is not a selection tool.",           format={             takes_table=false           },           name="start_selection",           order=63,           parameters={             {               description="The position to start selection from.",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="The type of selection to start.",               name="selection_mode",               optional=false,               order=1,               type="defines.selection_mode"             }           },           return_values={}         },         {           description="Toggles this player into or out of the map editor. Does nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.",           format={             takes_table=false           },           name="toggle_map_editor",           order=53,           parameters={},           raises={             {               description="Raised if the map editor was successfully toggled.",               name="on_player_toggled_map_editor",               optional=true,               order=1,               timeframe="instantly"             },             {               description="Raised if the map editor was successfully toggled.",               name="on_pre_player_toggled_map_editor",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Unlock the achievements of the given player. This has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement\".",           format={             takes_table=false           },           name="unlock_achievement",           order=14,           parameters={             {               description="name of the achievement to unlock",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Unmutes alerts for the given alert category.",           format={             takes_table=false           },           name="unmute_alert",           order=22,           parameters={             {               description="",               name="alert_type",               optional=false,               order=0,               type="defines.alert_type"             }           },           return_values={             {               description="Whether the alert type was unmuted (false if it was wasn't muted).",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Uses the current item in the cursor if it's a capsule or does nothing if not.",           format={             takes_table=false           },           name="use_from_cursor",           order=34,           parameters={             {               description="Where the item would be used.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={}         }       },       name="LuaPlayer",       operators={},       order=87,       parent="LuaControl"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a procession inheritance group which synchronizes offsets between procession steps.",       methods={},       name="LuaProcessionLayerInheritanceGroupPrototype",       operators={},       order=88,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a procession.",       methods={},       name="LuaProcessionPrototype",       operators={},       order=89,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="An object used to measure script performance.\n\nSince performance is non-deterministic, these objects don't allow reading the raw time values from Lua. They can be used anywhere a [LocalisedString](runtime:LocalisedString) is used, except for [LuaGuiElement::add](runtime:LuaGuiElement::add)'s LocalisedString arguments, [LuaSurface::create_entity](runtime:LuaSurface::create_entity)'s `text` argument, and [LuaEntity::add_market_item](runtime:LuaEntity::add_market_item).",       methods={         {           description="Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at once.\n\nIf other is running, the time to now will be added.",           format={             takes_table=false           },           name="add",           order=3,           parameters={             {               description="The timer to add to this timer.",               name="other",               optional=false,               order=0,               type="LuaProfiler"             }           },           return_values={}         },         {           description="Divides the current duration by a set value. Useful for calculating the average of many iterations.\n\nDoes nothing if this isn't stopped.",           format={             takes_table=false           },           name="divide",           order=4,           parameters={             {               description="The number to divide by. Must be > 0.",               name="number",               optional=false,               order=0,               type="double"             }           },           return_values={}         },         {           description="Resets the clock, also restarting it.",           format={             takes_table=false           },           name="reset",           order=0,           parameters={},           return_values={}         },         {           description="Start the clock again, without resetting it.",           format={             takes_table=false           },           name="restart",           order=2,           parameters={},           return_values={}         },         {           description="Stops the clock.",           format={             takes_table=false           },           name="stop",           order=1,           parameters={},           return_values={}         }       },       name="LuaProfiler",       operators={},       order=90     },     {       abstract=false,       attributes={         {           description="",           name="circuit_condition",           optional=false,           order=1,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="",           name="circuit_parameters",           optional=false,           order=0,           read_type="ProgrammableSpeakerCircuitParameters",           write_type="ProgrammableSpeakerCircuitParameters"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Control behavior for programmable speakers.",       methods={},       name="LuaProgrammableSpeakerControlBehavior",       operators={},       order=91,       parent="LuaControlBehavior"     },     {       abstract=true,       attributes={         {           description="Provides additional description used in factoriopedia.",           name="factoriopedia_description",           optional=false,           order=5,           read_type="LocalisedString"         },         {           description="Group of this prototype.",           name="group",           optional=false,           order=6,           read_type="LuaGroup"         },         {           description="",           name="hidden",           optional=false,           order=8,           read_type="boolean"         },         {           description="",           name="hidden_in_factoriopedia",           optional=false,           order=9,           read_type="boolean"         },         {           description="",           name="localised_description",           optional=false,           order=4,           read_type="LocalisedString"         },         {           description="",           name="localised_name",           optional=false,           order=3,           read_type="LocalisedString"         },         {           description="Name of this prototype.",           name="name",           optional=false,           order=1,           read_type="string"         },         {           description="The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.",           name="order",           optional=false,           order=2,           read_type="string"         },         {           description="",           name="parameter",           optional=false,           order=10,           read_type="boolean"         },         {           description="Subgroup of this prototype.",           name="subgroup",           optional=false,           order=7,           read_type="LuaGroup"         },         {           description="Type of this prototype.",           name="type",           optional=false,           order=0,           read_type="string"         }       },       description="Base for all prototype classes.",       methods={},       name="LuaPrototypeBase",       operators={},       order=92     },     {       abstract=false,       attributes={         {           description="A dictionary containing every LuaAchievementPrototype indexed by `name`.",           name="achievement",           optional=false,           order=27,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaAchievementPrototype"           }         },         {           description="A dictionary containing every LuaActiveTriggerPrototype indexed by `name`.",           name="active_trigger",           optional=false,           order=38,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaActiveTriggerPrototype"           }         },         {           description="A dictionary containing every LuaAirbornePollutantPrototype indexed by `name`.",           name="airborne_pollutant",           optional=false,           order=41,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaAirbornePollutantPrototype"           }         },         {           description="A dictionary containing every LuaAmmoCategoryPrototype indexed by `name`.",           name="ammo_category",           optional=false,           order=20,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaAmmoCategoryPrototype"           }         },         {           description="A dictionary containing every LuaAsteroidChunkPrototype indexed by `name`.",           name="asteroid_chunk",           optional=false,           order=39,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaAsteroidChunkPrototype"           }         },         {           description="A dictionary containing every LuaAutoplaceControlPrototype indexed by `name`.",           name="autoplace_control",           optional=false,           order=17,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaAutoplaceControlPrototype"           }         },         {           description="A dictionary containing every LuaBurnerUsagePrototype indexed by `name`.",           name="burner_usage",           optional=false,           order=42,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaBurnerUsagePrototype"           }         },         {           description="A dictionary containing every LuaCollisionLayerPrototype indexed by `name`.",           name="collision_layer",           optional=false,           order=40,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaCollisionLayerPrototype"           }         },         {           description="A dictionary containing every defined custom event, indexed by `name`.",           name="custom_event",           optional=false,           order=37,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaCustomEventPrototype"           }         },         {           description="A dictionary containing every LuaCustomInputPrototype indexed by `name`.",           name="custom_input",           optional=false,           order=19,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaCustomInputPrototype"           }         },         {           description="A dictionary containing every LuaDamagePrototype indexed by `name`.",           name="damage",           optional=false,           order=10,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaDamagePrototype"           }         },         {           description="A dictionary containing every LuaDecorativePrototype indexed by `name`.",           name="decorative",           optional=false,           order=15,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaDecorativePrototype"           }         },         {           description="A dictionary containing every LuaEntityPrototype indexed by `name`.",           name="entity",           optional=false,           order=5,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaEntityPrototype"           }         },         {           description="A dictionary containing every LuaEquipmentPrototype indexed by `name`.",           name="equipment",           optional=false,           order=9,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaEquipmentPrototype"           }         },         {           description="A dictionary containing every LuaEquipmentCategoryPrototype indexed by `name`.",           name="equipment_category",           optional=false,           order=29,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaEquipmentCategoryPrototype"           }         },         {           description="A dictionary containing every LuaEquipmentGridPrototype indexed by `name`.",           name="equipment_grid",           optional=false,           order=12,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaEquipmentGridPrototype"           }         },         {           description="A dictionary containing every LuaFluidPrototype indexed by `name`.",           name="fluid",           optional=false,           order=7,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaFluidPrototype"           }         },         {           description="A dictionary containing every LuaFontPrototype indexed by `name`.",           name="font",           optional=false,           order=1,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaFontPrototype"           }         },         {           description="A dictionary containing every LuaFuelCategoryPrototype indexed by `name`.",           name="fuel_category",           optional=false,           order=25,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaFuelCategoryPrototype"           }         },         {           description="A dictionary containing every LuaItemPrototype indexed by `name`.",           name="item",           optional=false,           order=6,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaItemPrototype"           }         },         {           description="A dictionary containing every ItemGroup indexed by `name`.",           name="item_group",           optional=false,           order=24,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaGroup"           }         },         {           description="A dictionary containing every ItemSubgroup indexed by `name`.",           name="item_subgroup",           optional=false,           order=23,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaGroup"           }         },         {           description="A dictionary containing every MapGenPreset indexed by `name`.\n\nA MapGenPreset is an exact copy of the prototype table provided from the data stage.",           name="map_gen_preset",           optional=false,           order=2,           read_type={             complex_type="LuaCustomTable",             key="string",             value="MapGenPreset"           }         },         {           description="",           name="max_beacon_supply_area_distance",           optional=false,           order=51,           read_type="uint"         },         {           description="",           name="max_electric_pole_connection_distance",           optional=false,           order=50,           read_type="double"         },         {           description="",           name="max_electric_pole_supply_area_distance",           optional=false,           order=49,           read_type="float"         },         {           description="",           name="max_force_distraction_chunk_distance",           optional=false,           order=48,           read_type="uint"         },         {           description="",           name="max_force_distraction_distance",           optional=false,           order=47,           read_type="double"         },         {           description="",           name="max_gate_activation_distance",           optional=false,           order=52,           read_type="double"         },         {           description="",           name="max_inserter_reach_distance",           optional=false,           order=53,           read_type="double"         },         {           description="",           name="max_pipe_to_ground_distance",           optional=false,           order=54,           read_type="uint8"         },         {           description="",           name="max_underground_belt_distance",           optional=false,           order=55,           read_type="uint8"         },         {           description="A dictionary containing every LuaModData indexed by `name`.",           name="mod_data",           optional=false,           order=43,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaModData"           }         },         {           description="A dictionary containing every LuaModSettingPrototype indexed by `name`.",           name="mod_setting",           optional=false,           order=18,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaModSettingPrototype"           }         },         {           description="A dictionary containing every LuaModuleCategoryPrototype indexed by `name`.",           name="module_category",           optional=false,           order=28,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaModuleCategoryPrototype"           }         },         {           description="A dictionary containing every LuaNamedNoiseExpression indexed by `name`.",           name="named_noise_expression",           optional=false,           order=21,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaNamedNoiseExpression"           }         },         {           description="A dictionary containing every LuaNamedNoiseFunction indexed by `name`.",           name="named_noise_function",           optional=false,           order=22,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaNamedNoiseFunction"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         },         {           description="A dictionary containing every LuaParticlePrototype indexed by `name`.",           name="particle",           optional=false,           order=16,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaParticlePrototype"           }         },         {           description="A dictionary containing every LuaProcessionPrototype indexed by `name`.",           name="procession",           optional=false,           order=45,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaProcessionPrototype"           }         },         {           description="A dictionary containing every LuaProcessionLayerInheritanceGroupPrototype indexed by `name`.",           name="procession_layer_inheritance_group",           optional=false,           order=46,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaProcessionLayerInheritanceGroupPrototype"           }         },         {           description="",           name="quality",           optional=false,           order=33,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaQualityPrototype"           }         },         {           description="A dictionary containing every LuaRecipePrototype indexed by `name`.",           name="recipe",           optional=false,           order=13,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaRecipePrototype"           }         },         {           description="A dictionary containing every LuaRecipeCategoryPrototype indexed by `name`.",           name="recipe_category",           optional=false,           order=32,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaRecipeCategoryPrototype"           }         },         {           description="A dictionary containing every LuaResourceCategoryPrototype indexed by `name`.",           name="resource_category",           optional=false,           order=26,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaResourceCategoryPrototype"           }         },         {           description="A dictionary containing every LuaShortcutPrototype indexed by `name`.",           name="shortcut",           optional=false,           order=31,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaShortcutPrototype"           }         },         {           description="",           name="space_connection",           optional=false,           order=36,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaSpaceConnectionPrototype"           }         },         {           description="",           name="space_location",           optional=false,           order=35,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaSpaceLocationPrototype"           }         },         {           description="A map of styles that [LuaGuiElement](runtime:LuaGuiElement) can use.\n\nMaps from the style's name to its type, as seen on [StyleSpecification](prototype:StyleSpecification).",           name="style",           optional=false,           order=3,           read_type={             complex_type="LuaCustomTable",             key="string",             value="string"           }         },         {           description="A dictionary containing every LuaSurfacePrototype indexed by `name`.",           name="surface",           optional=false,           order=44,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaSurfacePrototype"           }         },         {           description="",           name="surface_property",           optional=false,           order=34,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaSurfacePropertyPrototype"           }         },         {           description="A dictionary containing every [LuaTechnologyPrototype](runtime:LuaTechnologyPrototype) indexed by `name`.",           name="technology",           optional=false,           order=14,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaTechnologyPrototype"           }         },         {           description="A dictionary containing every LuaTilePrototype indexed by `name`.",           name="tile",           optional=false,           order=8,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaTilePrototype"           }         },         {           description="A dictionary containing every LuaTrivialSmokePrototype indexed by `name`.",           name="trivial_smoke",           optional=false,           order=30,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaTrivialSmokePrototype"           }         },         {           description="All utility constants.\n\nSee [UtilityConstants](prototype:UtilityConstants) for possible values.",           name="utility_constants",           optional=false,           order=4,           read_type={             complex_type="LuaCustomTable",             key="string",             value="AnyBasic"           }         },         {           description="A dictionary containing every LuaVirtualSignalPrototype indexed by `name`.",           name="virtual_signal",           optional=false,           order=11,           read_type={             complex_type="LuaCustomTable",             key="string",             value="LuaVirtualSignalPrototype"           }         }       },       description="Provides read-only access to prototypes. It is accessible through the global object named `prototypes`.",       methods={         {           description="Returns a dictionary of all LuaAchievementPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every achievement prototype that is not allowed to be completed on the peaceful difficulty setting.\nlocal prototypes = prototypes.get_achievement_filtered{{filter=\"allowed-without-fight\", invert=true}}\n```"           },           format={             takes_table=false           },           name="get_achievement_filtered",           order=4,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="AchievementPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaAchievementPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaDecorativePrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every decorative prototype that is auto-placed.\nlocal prototypes = prototypes.get_decorative_filtered{{filter=\"autoplace\"}}\n```"           },           format={             takes_table=false           },           name="get_decorative_filtered",           order=6,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="DecorativePrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaDecorativePrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaEntityPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every entity prototype that can craft recipes involving fluids in the way some assembling machines can\nlocal prototypes = prototypes.get_entity_filtered{{filter=\"crafting-category\", crafting_category=\"crafting-with-fluid\"}}\n```"           },           format={             takes_table=false           },           name="get_entity_filtered",           order=0,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="EntityPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaEntityPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every equipment prototype that functions as a battery.\nlocal prototypes = prototypes.get_equipment_filtered{{filter=\"type\", type=\"battery-equipment\"}}\n```"           },           format={             takes_table=false           },           name="get_equipment_filtered",           order=2,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="EquipmentPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaEquipmentPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaFluidPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every fluid prototype that has a heat capacity of exactly `100`.\nlocal prototypes = prototypes.get_fluid_filtered{{filter=\"heat-capacity\", comparison=\"=\", value=100}}\n```"           },           format={             takes_table=false           },           name="get_fluid_filtered",           order=7,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="FluidPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaFluidPrototype"               }             }           }         },         {           description="Gets the prototype history for the given type and name.",           format={             takes_table=false           },           name="get_history",           order=10,           parameters={             {               description="",               name="name",               optional=false,               order=1,               type="string"             },             {               description="",               name="type",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="PrototypeHistory"             }           }         },         {           description="Returns a dictionary of all LuaItemPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every item prototype that has a fuel top speed multiplier larger than 1.\nlocal prototypes = prototypes.get_item_filtered{{filter = \"fuel-top-speed-multiplier\", comparison = \">\", value = 1}}\n```"           },           format={             takes_table=false           },           name="get_item_filtered",           order=1,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaItemPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaModSettingPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every mod setting prototype that belongs to the specified mod.\nlocal prototypes = prototypes.get_mod_setting_filtered{{filter=\"mod\", mod=\"space-exploration\"}}\n```"           },           format={             takes_table=false           },           name="get_mod_setting_filtered",           order=3,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="ModSettingPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaModSettingPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaRecipePrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every recipe prototype that takes less than half a second to craft (at crafting speed `1`).\nlocal prototypes = prototypes.get_recipe_filtered{{filter=\"energy\", comparison=\"<\", value=0.5}}\n```"           },           format={             takes_table=false           },           name="get_recipe_filtered",           order=8,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="RecipePrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaRecipePrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every technology prototype that can be researched at the start of the game.\nlocal prototypes = prototypes.get_technology_filtered{{filter=\"has-prerequisites\", invert=true}}\n```"           },           format={             takes_table=false           },           name="get_technology_filtered",           order=9,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="TechnologyPrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaTechnologyPrototype"               }             }           }         },         {           description="Returns a dictionary of all LuaTilePrototypes that fit the given filters. The prototypes are indexed by `name`.",           examples={             "```\n-- Get every tile prototype that improves a player's walking speed by at least 50%.\nlocal prototypes = prototypes.get_tile_filtered{{filter=\"walking-speed-modifier\", comparison=\"≥\", value=1.5}}\n```"           },           format={             takes_table=false           },           name="get_tile_filtered",           order=5,           parameters={             {               description="",               name="filters",               optional=false,               order=0,               type={                 complex_type="array",                 value="TilePrototypeFilter"               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="LuaTilePrototype"               }             }           }         }       },       name="LuaPrototypes",       operators={},       order=93     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="`true` if this proxy container is sending inventory contents to a circuit network",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for proxy container.",       methods={},       name="LuaProxyContainerControlBehavior",       operators={},       order=94,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="`true` if the pump should set its fluid filter from the circuit network signals.",           name="set_filter",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for pumps.",       methods={},       name="LuaPumpControlBehavior",       operators={},       order=95,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="accumulator_capacity_multiplier",           optional=false,           order=17,           read_type="double"         },         {           description="",           name="asteroid_collector_collection_radius_bonus",           optional=false,           order=27,           read_type="uint"         },         {           description="",           name="beacon_module_slots_bonus",           optional=false,           order=28,           read_type="ItemStackIndex"         },         {           description="",           name="beacon_power_usage_multiplier",           optional=false,           order=5,           read_type="float"         },         {           description="",           name="beacon_supply_area_distance_bonus",           optional=false,           order=24,           read_type="float"         },         {           description="The color of the prototype",           name="color",           optional=false,           order=0,           read_type="Color"         },         {           description="",           name="crafting_machine_energy_usage_multiplier",           optional=false,           order=14,           read_type="double"         },         {           description="",           name="crafting_machine_module_slots_bonus",           optional=false,           order=29,           read_type="ItemStackIndex"         },         {           description="",           name="crafting_machine_speed_multiplier",           optional=false,           order=13,           read_type="double"         },         {           description="",           name="default_multiplier",           optional=false,           order=8,           read_type="double"         },         {           description="",           name="draw_sprite_by_default",           optional=false,           order=4,           read_type="boolean"         },         {           description="",           name="electric_pole_supply_area_distance_bonus",           optional=false,           order=23,           read_type="float"         },         {           description="",           name="electric_pole_wire_reach_bonus",           optional=false,           order=22,           read_type="float"         },         {           description="",           name="equipment_grid_height_bonus",           optional=false,           order=21,           read_type="int16"         },         {           description="",           name="equipment_grid_width_bonus",           optional=false,           order=20,           read_type="int16"         },         {           description="",           name="fluid_wagon_capacity_multiplier",           optional=false,           order=10,           read_type="double"         },         {           description="",           name="flying_robot_max_energy_multiplier",           optional=false,           order=18,           read_type="double"         },         {           description="",           name="inserter_speed_multiplier",           optional=false,           order=9,           read_type="double"         },         {           description="",           name="inventory_size_multiplier",           optional=false,           order=11,           read_type="double"         },         {           description="",           name="lab_module_slots_bonus",           optional=false,           order=31,           read_type="ItemStackIndex"         },         {           description="",           name="lab_research_speed_multiplier",           optional=false,           order=12,           read_type="double"         },         {           description="Level basically specifies the stat-increasing value of this quality level",           name="level",           optional=false,           order=1,           read_type="uint"         },         {           description="",           name="logistic_cell_charging_energy_multiplier",           optional=false,           order=15,           read_type="double"         },         {           description="",           name="logistic_cell_charging_station_count_bonus",           optional=false,           order=26,           read_type="uint"         },         {           description="",           name="mining_drill_mining_radius_bonus",           optional=false,           order=25,           read_type="float"         },         {           description="",           name="mining_drill_module_slots_bonus",           optional=false,           order=30,           read_type="ItemStackIndex"         },         {           description="",           name="mining_drill_resource_drain_multiplier",           optional=false,           order=6,           read_type="float"         },         {           description="The next higher level of the quality",           name="next",           optional=false,           order=2,           read_type="LuaQualityPrototype"         },         {           description="The probability multiplier of getting the next level of quality",           name="next_probability",           optional=false,           order=3,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=33,           read_type="string"         },         {           description="",           name="range_multiplier",           optional=false,           order=19,           read_type="double"         },         {           description="",           name="science_pack_drain_multiplier",           optional=false,           order=7,           read_type="float"         },         {           description="",           name="tool_durability_multiplier",           optional=false,           order=16,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=32,           read_type="boolean"         }       },       description="Prototype of a quality.",       methods={},       name="LuaQualityPrototype",       operators={},       order=96,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         }       },       description="An interface to send messages to the calling RCON interface through the global object named `rcon`.",       methods={         {           description="Print text to the calling RCON interface if any.",           format={             takes_table=false           },           name="print",           order=0,           parameters={             {               description="",               name="message",               optional=false,               order=0,               type="LocalisedString"             }           },           return_values={}         }       },       name="LuaRCON",       operators={},       order=97     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Control behavior for radars",       methods={},       name="LuaRadarControlBehavior",       operators={},       order=98,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="Location of the alternative incoming signal, which goes to the right relative to the rail end movement. Not all places have alternative incoming signal spot, so when it is not available, a nil will be given instead",           name="alternative_in_signal_location",           optional=true,           order=6,           read_type="RailLocation"         },         {           description="Location of the alternative outgoing signal, which goes to the right relative to the rail end movement. Not all places have alternative outgoing signal spot, so when it is not available, a nil will be given instead",           name="alternative_out_signal_location",           optional=true,           order=4,           read_type="RailLocation"         },         {           description="Which end of the rail this RailEnd is binding to.",           name="direction",           optional=false,           order=1,           read_type="defines.rail_direction"         },         {           description="Location of an incoming signal, which goes to the left relative to the rail end movement.",           name="in_signal_location",           optional=false,           order=5,           read_type="RailLocation"         },         {           description="Location of the rail end",           name="location",           optional=false,           order=2,           read_type="RailLocation"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="Location of an outgoing signal, which goes to the right relative to the rail end movement.",           name="out_signal_location",           optional=false,           order=3,           read_type="RailLocation"         },         {           description="Rail to which this RailEnd is binding to.",           name="rail",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Utility object that binds to a rail entity and rail_direction to allow easier traversal over rails",       methods={         {           description="Moves to opposite end on the rail this object points to",           format={             takes_table=false           },           name="flip_direction",           order=1,           parameters={},           return_values={}         },         {           description="Returns all possible rail extensions from this position as defined by the planner item.",           format={             takes_table=false           },           name="get_rail_extensions",           order=5,           parameters={             {               description="Rail planner that defines possible rail extensions",               name="planner_item",               optional=false,               order=0,               type="ItemID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="RailExtensionData"               }             }           }         },         {           description="Creates a copy of this LuaRailEnd object.",           format={             takes_table=false           },           name="make_copy",           order=0,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaRailEnd"             }           }         },         {           description="Moves forward by 1 rail to the specified connection direction",           format={             takes_table=false           },           name="move_forward",           order=2,           parameters={             {               description="",               name="connection_direction",               optional=false,               order=0,               type="defines.rail_connection_direction"             }           },           return_values={             {               description="If the move was successful. False if there is no rail connected in given connection_direction",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Moves forward by 1 rail in the natural direction. Natural direction is a move in the direction taken by the train over rail connection related to this rail end. If there are no trains, the natural direction is straight if straight connected rail exists, otherwise it is right if right connected rail exists, otherwise it is left if left connected rail exists. Natural direction is not defined if there are no rails connected to this end and this method will fail.",           format={             takes_table=false           },           name="move_natural",           order=3,           parameters={},           return_values={             {               description="If the move was successful. False only when there are no rails connected on this end",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Moves forward until a rail segment boundary is reached. If this rail end is at the segment boundary, it will not move at all. When a rail segment is cyclical, it will reach the rail segment boundary at some arbitrary position unless the segment boundary is well defined by presence of rail signals, train stop or other rails connecting to the rails loop.",           format={             takes_table=false           },           name="move_to_segment_end",           order=4,           parameters={},           return_values={}         }       },       name="LuaRailEnd",       operators={},       order=99     },     {       abstract=false,       attributes={         {           description="The current rail index.",           name="current",           optional=false,           order=1,           read_type="uint"         },         {           description="If the path goes from the front of the train",           name="is_front",           optional=false,           order=5,           read_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=7,           read_type="string"         },         {           description="Array of the rails that this path travels over.",           name="rails",           optional=false,           order=4,           read_type={             complex_type="LuaCustomTable",             key="uint",             value="LuaEntity"           }         },         {           description="The total number of rails in this path.",           name="size",           optional=false,           order=0,           read_type="uint"         },         {           description="The total path distance.",           name="total_distance",           optional=false,           order=2,           read_type="double"         },         {           description="The total distance traveled.",           name="travelled_distance",           optional=false,           order=3,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=6,           read_type="boolean"         }       },       description="A rail path.",       methods={},       name="LuaRailPath",       operators={},       order=100     },     {       abstract=false,       attributes={         {           description="",           name="blue_signal",           optional=true,           order=3,           read_type="SignalID",           write_type="SignalID"         },         {           description="The circuit condition when controlling the signal through the circuit network.",           name="circuit_condition",           optional=false,           order=6,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="If this will close the rail signal based off the circuit condition.",           name="close_signal",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="green_signal",           optional=true,           order=2,           read_type="SignalID",           write_type="SignalID"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="",           name="orange_signal",           optional=true,           order=1,           read_type="SignalID",           write_type="SignalID"         },         {           description="If this will read the rail signal state.",           name="read_signal",           optional=false,           order=5,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="red_signal",           optional=true,           order=0,           read_type="SignalID",           write_type="SignalID"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="Control behavior for rail signals and rail chain signals.",       methods={},       name="LuaRailSignalBaseControlBehavior",       operators={},       order=101,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will. This random generator can be saved and loaded and will maintain its state.\n\nNote this is entirely different from calling [math.random](libraries.html)() and you should be sure you actually want to use this over calling `math.random()`. If you aren't sure if you need to use this over calling `math.random()` then you probably don't need to use this.",       examples={         "```\n-- Create a generator and use it to print a random number.\nstorage.generator = game.create_random_generator()\ngame.player.print(storage.generator())\n```"       },       methods={         {           description="Re-seeds the random generator with the given value.\n\nSeeds that are close together will produce similar results. Seeds from 0 to 341 will produce the same results.",           format={             takes_table=false           },           name="re_seed",           order=0,           parameters={             {               description="",               name="seed",               optional=false,               order=0,               type="uint"             }           },           return_values={}         }       },       name="LuaRandomGenerator",       operators={         {           description="Generates a random number. If no parameters are given a number in the `[0, 1)` range is returned. If a single parameter is given a floored number in the `[1, N]` range is returned. If 2 parameters are given a floored number in the `[N1, N2]` range is returned.",           format={             takes_table=false           },           name="call",           order=0,           parameters={             {               description="Inclusive lower bound on the result",               name="lower",               optional=true,               order=0,               type="int"             },             {               description="Inclusive upper bound on the result",               name="upper",               optional=true,               order=1,               type="int"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         }       },       order=102     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="If this will read fuel inventory and currently burning fuel",           name="read_fuel",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="If this will read temperature of the reactor",           name="read_temperature",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="temperature_signal",           optional=true,           order=2,           read_type="SignalID",           write_type="SignalID"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Control behavior for Reactor",       methods={},       name="LuaReactorControlBehavior",       operators={},       order=103,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="Additional categories of this recipe.",           name="additional_categories",           optional=false,           order=6,           read_type={             complex_type="array",             value="string"           }         },         {           description="Category of the recipe.",           name="category",           optional=false,           order=5,           read_type="string"         },         {           description="Can the recipe be used?",           name="enabled",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one.",           name="energy",           optional=false,           order=11,           read_type="double"         },         {           description="The force that owns this recipe.",           name="force",           optional=false,           order=15,           read_type="LuaForce"         },         {           description="Group of this recipe.",           name="group",           optional=false,           order=13,           read_type="LuaGroup"         },         {           description="Is the recipe hidden? Hidden recipes don't show up in the crafting menu.",           name="hidden",           optional=false,           order=9,           read_type="boolean"         },         {           description="Is the recipe hidden from flow statistics?",           name="hidden_from_flow_stats",           optional=false,           order=10,           read_type="boolean",           write_type="boolean"         },         {           description="The ingredients to this recipe.",           examples={             "```\n-- The ingredients of \"advanced-oil-processing\" would look like this:\n{{type=\"fluid\", name=\"crude-oil\", amount=100}, {type=\"fluid\", name=\"water\", amount=50}}\n```"           },           name="ingredients",           optional=false,           order=7,           read_type={             complex_type="array",             value="Ingredient"           }         },         {           description="",           name="localised_description",           optional=false,           order=2,           read_type="LocalisedString"         },         {           description="Localised name of the recipe.",           name="localised_name",           optional=false,           order=1,           read_type="LocalisedString"         },         {           description="Name of the recipe. This can be different than the name of the result items as there could be more recipes to make the same item.",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=18,           read_type="string"         },         {           description="The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.",           name="order",           optional=false,           order=12,           read_type="string"         },         {           description="The productivity bonus for this recipe.",           name="productivity_bonus",           optional=false,           order=16,           read_type="float",           write_type="float"         },         {           description="The results/products of this recipe.",           examples={             "```\n-- The products of \"advanced-oil-processing\" would look like this:\n{{type=\"fluid\", name=\"heavy-oil\", amount=25}, {type=\"fluid\", name=\"light-oil\", amount=45}, {type=\"fluid\", name=\"petroleum-gas\", amount=55}}\n```"           },           name="products",           optional=false,           order=8,           read_type={             complex_type="array",             value="Product"           }         },         {           description="The prototype for this recipe.",           name="prototype",           optional=false,           order=3,           read_type="LuaRecipePrototype"         },         {           description="Subgroup of this recipe.",           name="subgroup",           optional=false,           order=14,           read_type="LuaGroup"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=17,           read_type="boolean"         }       },       description="A crafting recipe. Recipes belong to forces (see [LuaForce](runtime:LuaForce)) because some recipes are unlocked by research, and researches are per-force.",       methods={         {           description="Checks if recipe has given category",           format={             takes_table=false           },           name="has_category",           order=1,           parameters={             {               description="",               name="category",               optional=false,               order=0,               type="RecipeCategoryID"             }           },           return_values={             {               description="`true` if recipe has this category.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Reload the recipe from the prototype.",           format={             takes_table=false           },           name="reload",           order=0,           parameters={},           return_values={}         }       },       name="LuaRecipe",       operators={},       order=104     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a recipe category.",       methods={},       name="LuaRecipeCategoryPrototype",       operators={},       order=105,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="Additional categories of the recipe.",           name="additional_categories",           optional=false,           order=2,           read_type={             complex_type="array",             value="string"           }         },         {           description="If this recipe is enabled for the purpose of intermediate hand-crafting.",           name="allow_as_intermediate",           optional=false,           order=14,           read_type="boolean"         },         {           description="Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?",           name="allow_decomposition",           optional=false,           order=19,           read_type="boolean"         },         {           description="If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size).",           name="allow_inserter_overload",           optional=false,           order=13,           read_type="boolean"         },         {           description="If this recipe is allowed to use intermediate recipes when hand-crafting.",           name="allow_intermediates",           optional=false,           order=15,           read_type="boolean"         },         {           description="The allowed module effects for this recipe, if any.",           name="allowed_effects",           optional=true,           order=27,           read_type={             complex_type="dictionary",             key="string",             value="boolean"           }         },         {           description="The allowed module categories for this recipe, if any.",           name="allowed_module_categories",           optional=true,           order=28,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="literal",               value=true             }           }         },         {           description="Additional technologies listed under \"Unlocked by\" on a recipe's Factoriopedia page.",           name="alternative_unlock_methods",           optional=true,           order=31,           read_type={             complex_type="array",             value="LuaTechnologyPrototype"           }         },         {           description="Should this recipe always show \"Made in\" in the tooltip?",           name="always_show_made_in",           optional=false,           order=8,           read_type="boolean"         },         {           description="If the products are always shown in the recipe tooltip.",           name="always_show_products",           optional=false,           order=17,           read_type="boolean"         },         {           description="Category of the recipe.",           name="category",           optional=false,           order=1,           read_type="string"         },         {           description="",           name="crafting_machine_tints",           optional=false,           order=32,           read_type={             complex_type="array",             value="Color"           }         },         {           description="",           name="effect_limitation_messages",           optional=true,           order=29,           read_type={             complex_type="array",             value="LocalisedString"           }         },         {           description="The emissions multiplier for this recipe.",           name="emissions_multiplier",           optional=false,           order=18,           read_type="double"         },         {           description="If this recipe prototype is enabled by default (enabled at the beginning of a game).",           name="enabled",           optional=false,           order=0,           read_type="boolean"         },         {           description="Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one.",           name="energy",           optional=false,           order=9,           read_type="double"         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=33,           read_type="LuaRecipePrototype"         },         {           description="Is the recipe hidden from flow statistics (item/fluid production statistics)?",           name="hidden_from_flow_stats",           optional=false,           order=6,           read_type="boolean"         },         {           description="Is the recipe hidden from player crafting? The recipe will still show up for selection in machines.",           name="hidden_from_player_crafting",           optional=false,           order=7,           read_type="boolean"         },         {           description="",           name="hide_from_flow_stats",           optional=false,           order=22,           read_type="boolean"         },         {           description="",           name="hide_from_player_crafting",           optional=false,           order=23,           read_type="boolean"         },         {           description="Is this recipe is marked to be hidden from the signal GUI.",           name="hide_from_signal_gui",           optional=false,           order=21,           read_type="boolean"         },         {           description="The ingredients to this recipe.",           examples={             "```\n-- The ingredients of \"advanced-oil-processing\" would look like this\n{{type=\"fluid\", name=\"crude-oil\", amount=100}, {type=\"fluid\", name=\"water\", amount=50}}\n```"           },           name="ingredients",           optional=false,           order=3,           read_type={             complex_type="array",             value="Ingredient"           }         },         {           description="",           name="is_parameter",           optional=false,           order=26,           read_type="boolean"         },         {           description="The main product of this recipe, if any.",           name="main_product",           optional=true,           order=5,           read_type="Product"         },         {           description="The maximal productivity bonus that can be achieved with this recipe.",           name="maximum_productivity",           optional=false,           order=12,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=37,           read_type="string"         },         {           description="Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".",           name="overload_multiplier",           optional=false,           order=11,           read_type="uint"         },         {           description="",           name="preserve_products_in_machine_output",           optional=false,           order=25,           read_type="boolean"         },         {           description="The results/products of this recipe.",           examples={             "```\n-- The products of \"advanced-oil-processing\" would look like this:\n{{type=\"fluid\", name=\"heavy-oil\", amount=25}, {type=\"fluid\", name=\"light-oil\", amount=45}, {type=\"fluid\", name=\"petroleum-gas\", amount=55}}\n```"           },           name="products",           optional=false,           order=4,           read_type={             complex_type="array",             value="Product"           }         },         {           description="The multiplier used when this recipe is copied from an assembling machine to a requester chest. For each item in the recipe the item count * this value is set in the requester chest.",           name="request_paste_multiplier",           optional=false,           order=10,           read_type="uint"         },         {           description="",           name="reset_freshness_on_craft",           optional=false,           order=35,           read_type="boolean"         },         {           description="",           name="result_is_always_fresh",           optional=false,           order=34,           read_type="boolean"         },         {           description="If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product.",           name="show_amount_in_title",           optional=false,           order=16,           read_type="boolean"         },         {           description="The surface conditions required to craft this recipe.",           name="surface_conditions",           optional=true,           order=30,           read_type={             complex_type="array",             value="SurfaceCondition"           }         },         {           description="The 'trash' items that this recipe might produce as a result of spoiling.",           name="trash",           optional=true,           order=24,           read_type={             complex_type="array",             value="LuaItemPrototype"           }         },         {           description="Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs.",           name="unlock_results",           optional=false,           order=20,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=36,           read_type="boolean"         }       },       description="A crafting recipe prototype.",       methods={         {           description="Checks if recipe has given category",           format={             takes_table=false           },           name="has_category",           order=0,           parameters={             {               description="",               name="category",               optional=false,               order=0,               type="RecipeCategoryID"             }           },           return_values={             {               description="`true` if recipe has this category.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaRecipePrototype",       operators={},       order=106,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="If absolute snapping is enabled on this blueprint.",           name="blueprint_absolute_snapping",           optional=false,           order=6,           read_type="boolean",           subclasses={             "BlueprintRecord"           },           write_type="boolean"         },         {           description="The offset from the absolute grid. `nil` if absolute snapping is not enabled.",           name="blueprint_position_relative_to_grid",           optional=true,           order=5,           read_type="TilePosition",           subclasses={             "BlueprintRecord"           },           write_type="TilePosition"         },         {           description="The snapping grid size in this blueprint. `nil` if snapping is not enabled.",           name="blueprint_snap_to_grid",           optional=true,           order=4,           read_type="TilePosition",           subclasses={             "BlueprintRecord"           },           write_type="TilePosition"         },         {           description="The contents of this BlueprintBookRecord. This is sparse array - it may have gaps, so using `#` will not be reliable. Use [LuaRecord::contents_size](runtime:LuaRecord::contents_size) or `pairs()` to iterate this table.",           name="contents",           optional=false,           order=9,           read_type={             complex_type="dictionary",             key="ItemStackIndex",             value="LuaRecord"           },           subclasses={             "BlueprintBookRecord"           }         },         {           description="The highest populated index in the contents of this BlueprintBookRecord.",           name="contents_size",           optional=false,           order=10,           read_type="ItemStackIndex",           subclasses={             "BlueprintBookRecord"           }         },         {           description="List of raw materials required to build this blueprint.",           name="cost_to_build",           optional=false,           order=7,           read_type={             complex_type="array",             value="ItemWithQualityCounts"           },           subclasses={             "BlueprintRecord"           }         },         {           description="The default icons for a blueprint blueprint.",           name="default_icons",           optional=false,           order=8,           read_type={             complex_type="array",             value="BlueprintSignalIcon"           },           subclasses={             "BlueprintRecord"           }         },         {           description="The number of entity filters this deconstruction planner supports.",           name="entity_filter_count",           optional=false,           order=17,           read_type="uint",           subclasses={             "DeconstructionRecord"           }         },         {           description="The blacklist/whitelist entity filter mode for this deconstruction planner.",           name="entity_filter_mode",           optional=false,           order=13,           read_type="defines.deconstruction_item.entity_filter_mode",           subclasses={             "DeconstructionRecord"           },           write_type="defines.deconstruction_item.entity_filter_mode"         },         {           description="The entity filters for this deconstruction planner. The attribute is a sparse array with the keys representing the index of the filter. All prototypes in this array must not have the `\"not-deconstructable\"` flag set and are either a `cliff` or marked as `minable`.",           name="entity_filters",           optional=false,           order=11,           read_type={             complex_type="array",             value="ItemFilter"           },           subclasses={             "DeconstructionRecord"           },           write_type={             complex_type="array",             value="ItemFilter"           }         },         {           description="Is this blueprint record a preview? A preview record must be synced by the player before entity and tile data can be read.",           name="is_blueprint_preview",           optional=false,           order=3,           read_type="boolean",           subclasses={             "BlueprintRecord"           }         },         {           description="The current count of mappers in the upgrade item.",           name="mapper_count",           optional=false,           order=19,           read_type="uint",           subclasses={             "UpgradeRecord"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=21,           read_type="string"         },         {           description="The preview icons for this record.",           name="preview_icons",           optional=false,           order=2,           read_type={             complex_type="array",             value="BlueprintSignalIcon"           },           write_type={             complex_type="array",             value="BlueprintSignalIcon"           }         },         {           description="The number of tile filters this deconstruction planner supports.",           name="tile_filter_count",           optional=false,           order=18,           read_type="uint",           subclasses={             "DeconstructionRecord"           }         },         {           description="The blacklist/whitelist tile filter mode for this deconstruction planner.",           name="tile_filter_mode",           optional=false,           order=14,           read_type="defines.deconstruction_item.tile_filter_mode",           subclasses={             "DeconstructionRecord"           },           write_type="defines.deconstruction_item.tile_filter_mode"         },         {           description="The tile filters for this deconstruction planner. The attribute is a sparse array with the keys representing the index of the filter. Reading filters always returns an array of strings which are the tile prototype names.",           name="tile_filters",           optional=false,           order=12,           read_type={             complex_type="array",             value="TileID"           },           subclasses={             "DeconstructionRecord"           },           write_type={             complex_type="array",             value="TileID"           }         },         {           description="The tile selection mode for this deconstruction planner.",           name="tile_selection_mode",           optional=false,           order=15,           read_type="defines.deconstruction_item.tile_selection_mode",           subclasses={             "DeconstructionRecord"           },           write_type="defines.deconstruction_item.tile_selection_mode"         },         {           description="If this deconstruction planner, is set to allow trees and rocks only.",           name="trees_and_rocks_only",           optional=false,           order=16,           read_type="boolean",           subclasses={             "DeconstructionRecord"           },           write_type="boolean"         },         {           description="The type of this blueprint record.",           name="type",           optional=false,           order=1,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="blueprint"               },               {                 complex_type="literal",                 value="blueprint-book"               },               {                 complex_type="literal",                 value="deconstruction-planner"               },               {                 complex_type="literal",                 value="upgrade-planner"               }             }           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=20,           read_type="boolean"         },         {           description="Is this record valid for writing? A record is invalid for write if it is a BlueprintRecord preview or if it is in the \"My blueprints\" shelf.",           name="valid_for_write",           optional=false,           order=0,           read_type="boolean"         }       },       description="A reference to a record in the blueprint library. Records in the \"my blueprints\" shelf are read-only, but records in the \"game blueprints\" shelf are read/write.",       methods={         {           description="Build this blueprint at the given location.\n\nBuilt entities can be come invalid between the building of the blueprint and the function returning if by_player or raise_built is used and one of those events invalidates the entity.",           format={             table_optional=false,             takes_table=true           },           name="build_blueprint",           order=2,           parameters={             {               description="If `normal`, blueprint will not be built if any one thing can't be built. If `forced`, anything that can be built is built and obstructing nature entities will be deconstructed. If `superforced`, all obstructions will be deconstructed and the blueprint will be built.",               name="build_mode",               optional=true,               order=4,               type="defines.build_mode"             },             {               description="The player to use if any. If provided [defines.events.on_built_entity](runtime:defines.events.on_built_entity) will also be fired on successful entity creation.",               name="by_player",               optional=true,               order=6,               type="PlayerIdentification"             },             {               description="The direction to use when building",               name="direction",               optional=true,               order=3,               type="defines.direction"             },             {               description="Force to use for the building",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The position to build at",               name="position",               optional=false,               order=2,               type="MapPosition"             },             {               description="If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.",               name="raise_built",               optional=true,               order=7,               type="boolean"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to build on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="Array of created ghosts",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Cancel deconstruct the given area with this deconstruction planner.",           format={             table_optional=false,             takes_table=true           },           name="cancel_deconstruct_area",           order=19,           parameters={             {               description="The area to deconstruct",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="The player to use if any.",               name="by_player",               optional=true,               order=4,               type="PlayerIdentification"             },             {               description="Force to use for canceling deconstruction",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the cancel deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to cancel deconstruct on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={},           subclasses={             "DeconstructionRecord"           }         },         {           description="Clears this blueprint.",           format={             takes_table=false           },           name="clear_blueprint",           order=0,           parameters={},           return_values={},           subclasses={             "BlueprintRecord"           }         },         {           description="Clears all settings/filters on this deconstruction planner, resetting it to default values.",           format={             takes_table=false           },           name="clear_deconstruction_data",           order=20,           parameters={},           return_values={},           subclasses={             "DeconstructionRecord"           }         },         {           description="Clears all settings/filters on this upgrade planner, resetting it to default values.",           format={             takes_table=false           },           name="clear_upgrade_data",           order=21,           parameters={},           return_values={},           subclasses={             "UpgradeRecord"           }         },         {           description="Sets up this blueprint using the found blueprintable entities/tiles on the surface.",           format={             table_optional=false,             takes_table=true           },           name="create_blueprint",           order=3,           parameters={             {               description="When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area. Defaults to false.",               name="always_include_tiles",               optional=true,               order=3,               type="boolean"             },             {               description="The bounding box",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="Force to use for the creation",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="When true, entities are included in the blueprint. Defaults to true.",               name="include_entities",               optional=true,               order=4,               type="boolean"             },             {               description="When true, train fuel is included in the blueprint, Defaults to true.",               name="include_fuel",               optional=true,               order=8,               type="boolean"             },             {               description="When true, modules are included in the blueprint. Defaults to true.",               name="include_modules",               optional=true,               order=5,               type="boolean"             },             {               description="When true, station names are included in the blueprint. Defaults to false.",               name="include_station_names",               optional=true,               order=6,               type="boolean"             },             {               description="When true, trains are included in the blueprint. Defaults to false.",               name="include_trains",               optional=true,               order=7,               type="boolean"             },             {               description="Surface to create from",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={             {               description="The blueprint entity index to source entity mapping.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="uint",                 value="LuaEntity"               }             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Deconstruct the given area with this deconstruction planner.",           format={             table_optional=false,             takes_table=true           },           name="deconstruct_area",           order=18,           parameters={             {               description="The area to deconstruct",               name="area",               optional=false,               order=2,               type="BoundingBox"             },             {               description="The player to use if any.",               name="by_player",               optional=true,               order=4,               type="PlayerIdentification"             },             {               description="Force to use for the deconstruction",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=5,               type="boolean"             },             {               description="Surface to deconstruct on",               name="surface",               optional=false,               order=0,               type="SurfaceIdentification"             }           },           return_values={},           subclasses={             "DeconstructionRecord"           }         },         {           description="The active index of this BlueprintBookRecord. For records in \"my blueprints\", the result will be the same regardless of the player, but records in \"game blueprints\" may have different active indices per player.",           format={             takes_table=false           },           name="get_active_index",           order=13,           parameters={             {               description="",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           },           subclasses={             "BlueprintBookRecord"           }         },         {           description="The entities in this blueprint.",           format={             takes_table=false           },           name="get_blueprint_entities",           order=8,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="BlueprintEntity"               }             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Gets the number of entities in this blueprint blueprint.",           format={             takes_table=false           },           name="get_blueprint_entity_count",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Gets the given tag on the given blueprint entity index in this blueprint blueprint.",           format={             takes_table=false           },           name="get_blueprint_entity_tag",           order=6,           parameters={             {               description="The entity index.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The tag to get.",               name="tag",               optional=false,               order=1,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="AnyBasic"             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Gets the tags for the given blueprint entity index in this blueprint.",           format={             takes_table=false           },           name="get_blueprint_entity_tags",           order=4,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="Tags"             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="A list of the tiles in this blueprint.",           format={             takes_table=false           },           name="get_blueprint_tiles",           order=10,           parameters={},           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="Tile"               }             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Gets the entity filter at the given index for this deconstruction planner.",           format={             takes_table=false           },           name="get_entity_filter",           order=14,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ItemFilter"             }           },           subclasses={             "DeconstructionRecord"           }         },         {           description="Gets the filter at the given index for this upgrade item. Note that sources (`\"from\"` type) that are undefined will read as `{type = \"item\"}`, while destinations (`\"to\"` type) that are undefined will read as `nil`.\n\nIn contrast to [LuaRecord::set_mapper](runtime:LuaRecord::set_mapper), indices past the upgrade item's current size are considered to be out of bounds.",           format={             takes_table=false           },           name="get_mapper",           order=22,           parameters={             {               description="The index of the mapper to read.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="type",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="from"                   },                   {                     complex_type="literal",                     value="to"                   }                 }               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "UpgradeMapperSource",                   "UpgradeMapperDestination"                 }               }             }           },           subclasses={             "UpgradeRecord"           }         },         {           description="Gets the tile filter at the given index for this deconstruction planner.",           format={             takes_table=false           },           name="get_tile_filter",           order=16,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="string"             }           },           subclasses={             "DeconstructionRecord"           }         },         {           description="Is this blueprint setup? I.e. is it a non-empty blueprint?",           format={             takes_table=false           },           name="is_blueprint_setup",           order=1,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "BlueprintRecord"           }         },         {           description="Set new entities to be a part of this blueprint.",           format={             takes_table=false           },           name="set_blueprint_entities",           order=9,           parameters={             {               description="The new blueprint entities.",               name="entities",               optional=false,               order=0,               type={                 complex_type="array",                 value="BlueprintEntity"               }             }           },           return_values={},           subclasses={             "BlueprintRecord"           }         },         {           description="Sets the given tag on the given blueprint entity index in this blueprint blueprint.",           format={             takes_table=false           },           name="set_blueprint_entity_tag",           order=7,           parameters={             {               description="The entity index.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The tag to set.",               name="tag",               optional=false,               order=1,               type="string"             },             {               description="The tag value to set or `nil` to clear the tag.",               name="value",               optional=false,               order=2,               type="AnyBasic"             }           },           return_values={},           subclasses={             "BlueprintRecord"           }         },         {           description="Sets the tags on the given blueprint entity index in this blueprint.",           format={             takes_table=false           },           name="set_blueprint_entity_tags",           order=5,           parameters={             {               description="The entity index",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="tags",               optional=false,               order=1,               type="Tags"             }           },           return_values={},           subclasses={             "BlueprintRecord"           }         },         {           description="Set specific tiles in this blueprint.",           format={             takes_table=false           },           name="set_blueprint_tiles",           order=11,           parameters={             {               description="Tiles to be a part of the blueprint.",               name="tiles",               optional=false,               order=0,               type={                 complex_type="array",                 value="Tile"               }             }           },           return_values={},           subclasses={             "BlueprintRecord"           }         },         {           description="Sets the entity filter at the given index for this deconstruction planner.",           format={             takes_table=false           },           name="set_entity_filter",           order=15,           parameters={             {               description="Writing `nil` removes the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "ItemFilter",                   "nil"                 }               }             },             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether the new filter was successfully set (ie. was valid).",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "DeconstructionRecord"           }         },         {           description="Sets the module filter at the given index for this upgrade item.\n\nIn contrast to [LuaRecord::get_mapper](runtime:LuaRecord::get_mapper), indices past the upgrade item's current size are valid and expand the list of mappings accordingly, if within reasonable bounds.",           format={             takes_table=false           },           name="set_mapper",           order=23,           parameters={             {               description="The index of the mapper to set.",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="The mapper to set. Set `nil` to clear the mapper.",               name="mapper",               optional=false,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "UpgradeMapperSource",                   "UpgradeMapperDestination",                   "nil"                 }               }             },             {               description="",               name="type",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="from"                   },                   {                     complex_type="literal",                     value="to"                   }                 }               }             }           },           return_values={},           subclasses={             "UpgradeRecord"           }         },         {           description="Sets the tile filter at the given index for this deconstruction planner.",           format={             takes_table=false           },           name="set_tile_filter",           order=17,           parameters={             {               description="Setting to nil erases the filter.",               name="filter",               optional=false,               order=1,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   "LuaTilePrototype",                   "LuaTile"                 }               }             },             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Whether the new filter was successfully set (ie. was valid).",               optional=false,               order=0,               type="boolean"             }           },           subclasses={             "DeconstructionRecord"           }         }       },       name="LuaRecord",       operators={},       order=107     },     {       abstract=false,       attributes={         {           description="List of all registered interfaces. For each interface name, `remote.interfaces[name]` is a dictionary mapping the interface's registered functions to `true`.",           examples={             "```\n-- Assuming the \"human interactor\" interface is registered as above\ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"hello\"]))        -- prints true\ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"nonexistent\"]))  -- prints nil\n```"           },           name="interfaces",           optional=false,           order=1,           read_type={             complex_type="dictionary",             key="string",             value={               complex_type="dictionary",               key="string",               value={                 complex_type="literal",                 value=true               }             }           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         }       },       description="Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A script or mod can then register an interface with [LuaRemote](runtime:LuaRemote), after that any script can call the registered functions, provided it knows the interface name and the desired function name. An instance of LuaRemote is available through the global object named `remote`.",       examples={         "```\n-- Will register a remote interface containing two functions. Later, it will call these functions through `remote`.\nremote.add_interface(\"human interactor\",\n  {\n    hello = function() game.player.print(\"Hi!\") end,\n    bye = function(name) game.player.print(\"Bye \" .. name) end\n  })\n-- Some time later, possibly in a different mod...\nremote.call(\"human interactor\", \"hello\")\nremote.call(\"human interactor\", \"bye\", \"dear reader\")\n```"       },       methods={         {           description="Add a remote interface.",           format={             takes_table=false           },           name="add_interface",           order=0,           parameters={             {               description="List of functions that are members of the new interface.",               name="functions",               optional=false,               order=1,               type={                 complex_type="dictionary",                 key="string",                 value={                   complex_type="function",                   parameters={}                 }               }             },             {               description="Name of the interface. If the name matches any existing interface, an error is thrown.",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Call a function of an interface.\n\nProviding an unknown interface or function name will result in a script error.",           format={             takes_table=false           },           name="call",           order=2,           parameters={             {               description="Function name that belongs to the `interface`.",               name="function",               optional=false,               order=1,               type="string"             },             {               description="Interface to look up `function` in.",               name="interface",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="Any"             }           },           variadic_parameter={             description="Arguments to pass to the called function. Note that any arguments passed through the interface are a copy of the original, not a reference. Metatables are not retained, while references to LuaObjects stay intact.",             type="Any"           }         },         {           description="Removes an interface with the given name.",           format={             takes_table=false           },           name="remove_interface",           order=1,           parameters={             {               description="Name of the interface.",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="Whether the interface was removed. `false` if the interface didn't exist.",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaRemote",       operators={},       order=108     },     {       abstract=false,       attributes={         {           description="Alignment of this text.",           name="alignment",           optional=false,           order=23,           read_type="TextAlign",           subclasses={             "Text"           },           write_type="TextAlign"         },         {           description="Angle of this arc. Angle in radian.",           name="angle",           optional=false,           order=34,           read_type="float",           subclasses={             "Arc"           },           write_type="float"         },         {           description="Animation prototype name of this animation.",           name="animation",           optional=false,           order=45,           read_type="string",           subclasses={             "Animation"           },           write_type="string"         },         {           description="Animation offset of this animation. Animation offset in frames.",           name="animation_offset",           optional=false,           order=47,           read_type="double",           subclasses={             "Animation"           },           write_type="double"         },         {           description="Animation speed of this animation. Animation speed in frames per tick.",           name="animation_speed",           optional=false,           order=46,           read_type="double",           subclasses={             "Animation"           },           write_type="double"         },         {           description="Blink interval of this object based on the internal \"update tick\". When zero, blinking is disabled. For other values, the object will be visible the given number of ticks and then invisible for the same duration. Objects with the same blink interval will blink synchronously. Blink interval of game alerts is 30.\n\nFor example, when the interval is 60, the object is visible for 60 ticks and hidden for the next 60.",           name="blink_interval",           optional=false,           order=4,           read_type="uint16",           write_type="uint16"         },         {           description="Color or tint of the object.",           name="color",           optional=false,           order=12,           read_type="Color",           subclasses={             "Text",             "Line",             "Circle",             "Rectangle",             "Arc",             "Polygon",             "Sprite",             "Light",             "Animation"           },           write_type="Color"         },         {           description="Dash length of this line.",           name="dash_length",           optional=false,           order=16,           read_type="double",           subclasses={             "Line"           },           write_type="double"         },         {           description="If this object is being drawn on the ground, under most entities and sprites.\n\nIn [render_mode](runtime:LuaRenderObject::render_mode) == \"chart\", this value is unused.",           name="draw_on_ground",           optional=false,           order=8,           read_type="boolean",           subclasses={             "Text",             "Line",             "Circle",             "Rectangle",             "Arc",             "Polygon"           },           write_type="boolean"         },         {           description="If this circle or rectangle is filled.",           name="filled",           optional=false,           order=27,           read_type="boolean",           subclasses={             "Circle",             "Rectangle"           },           write_type="boolean"         },         {           description="Font of this text.",           name="font",           optional=false,           order=22,           read_type="string",           subclasses={             "Text"           },           write_type="string"         },         {           description="Forces for which this object is rendered or `nil` if visible to all forces. Writing nil or empty array will make object to be visible to all forces.",           name="forces",           optional=true,           order=5,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="array",                 value="LuaForce"               },               "ForceSet"             }           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="array",                 value="LuaForce"               },               "ForceSet"             }           }         },         {           description="Where this line is drawn from.",           name="from",           optional=false,           order=14,           read_type="ScriptRenderTarget",           subclasses={             "Line"           },           write_type="ScriptRenderTarget"         },         {           description="Length of the gaps in this line.",           name="gap_length",           optional=false,           order=17,           read_type="double",           subclasses={             "Line"           },           write_type="double"         },         {           description="Unique identifier of this render object.",           name="id",           optional=false,           order=0,           read_type="uint64"         },         {           description="Intensity of this light.",           name="intensity",           optional=false,           order=42,           read_type="float",           subclasses={             "Light"           },           write_type="float"         },         {           description="Where top left corner of this rectangle is drawn.",           name="left_top",           optional=false,           order=29,           read_type="ScriptRenderTarget",           subclasses={             "Rectangle"           },           write_type="ScriptRenderTarget"         },         {           description="Radius of the outer edge of this arc.",           name="max_radius",           optional=false,           order=31,           read_type="double",           subclasses={             "Arc"           },           write_type="double"         },         {           description="Radius of the inner edge of this arc.",           name="min_radius",           optional=false,           order=32,           read_type="double",           subclasses={             "Arc"           },           write_type="double"         },         {           description="Minimum darkness at which this light is rendered.",           name="minimum_darkness",           optional=false,           order=43,           read_type="float",           subclasses={             "Light"           },           write_type="float"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=49,           read_type="string"         },         {           description="If this object is only rendered in alt-mode.",           name="only_in_alt_mode",           optional=false,           order=9,           read_type="boolean",           write_type="boolean"         },         {           description="Orientation of this object.\n\nPolygon vertices that are set to an entity will ignore this.",           name="orientation",           optional=false,           order=19,           read_type="RealOrientation",           subclasses={             "Text",             "Polygon",             "Sprite",             "Light",             "Animation"           },           write_type="RealOrientation"         },         {           description="Target to which this object rotates so that it faces the target. Note that `orientation` is still applied to the object. Writing `nil` will clear the orientation_target. `nil` if no target.\n\nPolygon vertices that are set to an entity will ignore this.",           name="orientation_target",           optional=true,           order=40,           read_type="ScriptRenderTarget",           subclasses={             "Polygon",             "Sprite",             "Animation"           },           write_type="ScriptRenderTarget"         },         {           description="If this light is rendered with the same orientation as the target entity. Note that `orientation` is still applied to the sprite.",           name="oriented",           optional=false,           order=44,           read_type="boolean",           subclasses={             "Light"           },           write_type="boolean"         },         {           description="Offsets the center of the sprite or animation if `orientation_target` is given. This offset will rotate together with the sprite or animation.",           name="oriented_offset",           optional=false,           order=41,           read_type="Vector",           subclasses={             "Sprite",             "Animation"           },           write_type="Vector"         },         {           description="Players for which this object is visible or `nil` if visible to all players.",           name="players",           optional=true,           order=6,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="array",                 value="LuaPlayer"               },               {                 complex_type="array",                 value="PlayerIdentification"               }             }           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="array",                 value="LuaPlayer"               },               {                 complex_type="array",                 value="PlayerIdentification"               }             }           }         },         {           description="Radius of this circle.",           name="radius",           optional=false,           order=28,           read_type="double",           subclasses={             "Circle"           },           write_type="double"         },         {           description="Render layer of this sprite or animation.",           name="render_layer",           optional=false,           order=39,           read_type="RenderLayer",           subclasses={             "Sprite",             "Animation"           },           write_type="RenderLayer"         },         {           description="Whether the object is rendered in game world or on the chart (map view).\n\nWhen it is changed, the object is pushed to front of its new group.",           name="render_mode",           optional=false,           order=10,           read_type="ScriptRenderMode",           write_type="ScriptRenderMode"         },         {           description="Where bottom right corner of this rectangle is drawn.",           name="right_bottom",           optional=false,           order=30,           read_type="ScriptRenderTarget",           subclasses={             "Rectangle"           },           write_type="ScriptRenderTarget"         },         {           description="Scale of the text or light.",           name="scale",           optional=false,           order=20,           read_type="double",           subclasses={             "Text",             "Light"           },           write_type="double"         },         {           description="If this text scales with player zoom.",           name="scale_with_zoom",           optional=false,           order=25,           read_type="boolean",           subclasses={             "Text"           },           write_type="boolean"         },         {           description="Sprite of the sprite or light.",           name="sprite",           optional=false,           order=36,           read_type="SpritePath",           subclasses={             "Sprite",             "Light"           },           write_type="SpritePath"         },         {           description="Where this arc starts. Angle in radian.",           name="start_angle",           optional=false,           order=33,           read_type="float",           subclasses={             "Arc"           },           write_type="float"         },         {           description="Surface this object is rendered on.",           name="surface",           optional=false,           order=2,           read_type="LuaSurface"         },         {           description="Where this object is drawn.\n\nPolygon vertices that are set to an entity will ignore this.",           name="target",           optional=false,           order=18,           read_type="ScriptRenderTarget",           subclasses={             "Text",             "Circle",             "Arc",             "Polygon",             "Sprite",             "Light",             "Animation"           },           write_type="ScriptRenderTarget"         },         {           description="Text that is displayed by this text object.",           name="text",           optional=false,           order=21,           read_type="LocalisedString",           subclasses={             "Text"           },           write_type="LocalisedString"         },         {           description="Time to live of this object. This will be 0 if the object does not expire.",           name="time_to_live",           optional=false,           order=3,           read_type="uint",           write_type="uint"         },         {           description="Where this line is drawn to.",           name="to",           optional=false,           order=15,           read_type="ScriptRenderTarget",           subclasses={             "Line"           },           write_type="ScriptRenderTarget"         },         {           description="Type of this object.",           name="type",           optional=false,           order=1,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="text"               },               {                 complex_type="literal",                 value="line"               },               {                 complex_type="literal",                 value="circle"               },               {                 complex_type="literal",                 value="rectangle"               },               {                 complex_type="literal",                 value="arc"               },               {                 complex_type="literal",                 value="polygon"               },               {                 complex_type="literal",                 value="sprite"               },               {                 complex_type="literal",                 value="light"               },               {                 complex_type="literal",                 value="animation"               }             }           }         },         {           description="If this text parses rich text tags.",           name="use_rich_text",           optional=false,           order=26,           read_type="boolean",           subclasses={             "Text"           },           write_type="boolean"         },         {           description="If this object uses the target orientation.",           name="use_target_orientation",           optional=false,           order=11,           read_type="boolean",           subclasses={             "Sprite",             "Polygon",             "Animation"           },           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=48,           read_type="boolean"         },         {           description="Vertical alignment of this text.",           name="vertical_alignment",           optional=false,           order=24,           read_type="VerticalTextAlign",           subclasses={             "Text"           },           write_type="VerticalTextAlign"         },         {           description="Vertices of this polygon.",           name="vertices",           optional=false,           order=35,           read_type={             complex_type="array",             value="ScriptRenderTarget"           },           subclasses={             "Polygon"           },           write_type={             complex_type="array",             value="ScriptRenderTarget"           }         },         {           description="If this object is rendered to anyone at all.",           name="visible",           optional=false,           order=7,           read_type="boolean",           write_type="boolean"         },         {           description="Width of the object. Value is in pixels (32 per tile).",           name="width",           optional=false,           order=13,           read_type="float",           subclasses={             "Line",             "Circle",             "Rectangle"           },           write_type="float"         },         {           description="Horizontal scale of this sprite or animation.",           name="x_scale",           optional=false,           order=37,           read_type="double",           subclasses={             "Sprite",             "Animation"           },           write_type="double"         },         {           description="Vertical scale of this sprite or animation.",           name="y_scale",           optional=false,           order=38,           read_type="double",           subclasses={             "Sprite",             "Animation"           },           write_type="double"         }       },       description="Reference to a single [LuaRendering](runtime:LuaRendering) object.",       methods={         {           description="Reorder this object so that it is drawn in front of the already existing objects.",           format={             takes_table=false           },           name="bring_to_front",           order=1,           parameters={},           return_values={}         },         {           description="Destroys this object. Does not error when the object is invalid.",           format={             takes_table=false           },           name="destroy",           order=0,           parameters={},           return_values={}         },         {           description="Reorder this object so that it is drawn in the back of the already existing objects.",           format={             takes_table=false           },           name="move_to_back",           order=2,           parameters={},           return_values={}         },         {           description="Set the corners of the rectangle with this id.",           format={             takes_table=false           },           name="set_corners",           order=4,           parameters={             {               description="",               name="left_top",               optional=false,               order=0,               type="ScriptRenderTarget"             },             {               description="",               name="right_bottom",               optional=false,               order=1,               type="ScriptRenderTarget"             }           },           return_values={},           subclasses={             "Rectangle"           }         },         {           description="Set the length of the dashes and the length of the gaps in this line.",           format={             takes_table=false           },           name="set_dashes",           order=3,           parameters={             {               description="",               name="dash_length",               optional=false,               order=0,               type="double"             },             {               description="",               name="gap_length",               optional=false,               order=1,               type="double"             }           },           return_values={},           subclasses={             "Line"           }         }       },       name="LuaRenderObject",       operators={},       order=109     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=0,           read_type="string"         }       },       description="Allows rendering of geometric shapes, text and sprites in the game world through the global object named `rendering`. Each render object is identified by an id that is universally unique for the lifetime of a whole game.\n\nIf an entity target of an object is destroyed or changes surface, then the object is also destroyed.",       methods={         {           description="Destroys all render objects.",           format={             takes_table=false           },           name="clear",           order=10,           parameters={             {               description="If provided, only the render objects created by this mod are destroyed. An empty string (`\"\"`) refers to all objects not belonging to a mod, such as those created using console commands.",               name="mod_name",               optional=true,               order=0,               type="string"             }           },           return_values={}         },         {           description="Create an animation.",           format={             table_optional=false,             takes_table=true           },           name="draw_animation",           order=8,           parameters={             {               description="Name of an [AnimationPrototype](prototype:AnimationPrototype).",               name="animation",               optional=false,               order=0,               type="string"             },             {               description="Offset of the animation in frames. Default is 0.",               name="animation_offset",               optional=true,               order=7,               type="double"             },             {               description="How many frames the animation goes forward per tick. Default is 1.",               name="animation_speed",               optional=true,               order=6,               type="double"             },             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=14,               type="uint16"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=15,               type="ForceSet"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=18,               type="boolean"             },             {               description="The orientation of the animation. Default is 0.",               name="orientation",               optional=true,               order=1,               type="RealOrientation"             },             {               description="If given, the animation rotates so that it faces this target. Note that `orientation` is still applied to the animation.",               name="orientation_target",               optional=true,               order=8,               type="ScriptRenderTarget"             },             {               description="Offsets the center of the animation if `orientation_target` is given. This offset will rotate together with the animation.",               name="oriented_offset",               optional=true,               order=10,               type="Vector"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=16,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Render layer of the animation. Defaults to `\"arrow\"`.",               name="render_layer",               optional=true,               order=5,               type="RenderLayer"             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=19,               type="ScriptRenderMode"             },             {               description="",               name="surface",               optional=false,               order=12,               type="SurfaceIdentification"             },             {               description="Center of the animation.",               name="target",               optional=false,               order=11,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=13,               type="uint"             },             {               description="",               name="tint",               optional=true,               order=4,               type="Color"             },             {               description="Only used if `orientation_target` is a LuaEntity.",               name="use_target_orientation",               optional=true,               order=9,               type="boolean"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=17,               type="boolean"             },             {               description="Horizontal scale of the animation. Default is 1.",               name="x_scale",               optional=true,               order=2,               type="double"             },             {               description="Vertical scale of the animation. Default is 1.",               name="y_scale",               optional=true,               order=3,               type="double"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create an arc.",           format={             table_optional=false,             takes_table=true           },           name="draw_arc",           order=4,           parameters={             {               description="The angle of the arc, in radian.",               name="angle",               optional=false,               order=4,               type="float"             },             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=8,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=0,               type="Color"             },             {               description="If this should be drawn below sprites and entities. Defaults to false.",               name="draw_on_ground",               optional=true,               order=12,               type="boolean"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=9,               type="ForceSet"             },             {               description="The radius of the outer edge of the arc, in tiles.",               name="max_radius",               optional=false,               order=1,               type="double"             },             {               description="The radius of the inner edge of the arc, in tiles.",               name="min_radius",               optional=false,               order=2,               type="double"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=13,               type="boolean"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=10,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=14,               type="ScriptRenderMode"             },             {               description="Where the arc starts, in radian.",               name="start_angle",               optional=false,               order=3,               type="float"             },             {               description="",               name="surface",               optional=false,               order=6,               type="SurfaceIdentification"             },             {               description="",               name="target",               optional=false,               order=5,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=7,               type="uint"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=11,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a circle.",           format={             table_optional=false,             takes_table=true           },           name="draw_circle",           order=2,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=7,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=0,               type="Color"             },             {               description="If this should be drawn below sprites and entities. Defaults to false.",               name="draw_on_ground",               optional=true,               order=11,               type="boolean"             },             {               description="If the circle should be filled. Defaults to false.",               name="filled",               optional=true,               order=3,               type="boolean"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=8,               type="ForceSet"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=12,               type="boolean"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=9,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="In tiles.",               name="radius",               optional=false,               order=1,               type="double"             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=13,               type="ScriptRenderMode"             },             {               description="",               name="surface",               optional=false,               order=5,               type="SurfaceIdentification"             },             {               description="",               name="target",               optional=false,               order=4,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=6,               type="uint"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=10,               type="boolean"             },             {               description="Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.",               name="width",               optional=true,               order=2,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a light.\n\nThe base game uses the utility sprites `light_medium` and `light_small` for lights.",           format={             table_optional=false,             takes_table=true           },           name="draw_light",           order=7,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=10,               type="uint16"             },             {               description="Defaults to white (no tint).",               name="color",               optional=true,               order=6,               type="Color"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=11,               type="ForceSet"             },             {               description="Default is 1.",               name="intensity",               optional=true,               order=3,               type="float"             },             {               description="The minimum darkness at which this light is rendered. Default is 0.",               name="minimum_darkness",               optional=true,               order=4,               type="float"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=14,               type="boolean"             },             {               description="The orientation of the light. Default is 0.",               name="orientation",               optional=true,               order=1,               type="RealOrientation"             },             {               description="If this light has the same orientation as the entity target, default is false. Note that `orientation` is still applied to the sprite.",               name="oriented",               optional=true,               order=5,               type="boolean"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=12,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=15,               type="ScriptRenderMode"             },             {               description="Default is 1.",               name="scale",               optional=true,               order=2,               type="float"             },             {               description="",               name="sprite",               optional=false,               order=0,               type="SpritePath"             },             {               description="",               name="surface",               optional=false,               order=8,               type="SurfaceIdentification"             },             {               description="Center of the light.",               name="target",               optional=false,               order=7,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=9,               type="uint"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=13,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a line.",           examples={             "```\n-- Draw a white and 2 pixel wide line from {0, 0} to {2, 2}.\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {2, 2}, color = {1, 1, 1}, width = 2}\n```",             "```\n-- Draw a red and 3 pixel wide line from {0, 0} to {0, 5}. The line has 1 tile long dashes and gaps.\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {0, 5}, color = {r = 1}, width = 3, gap_length = 1, dash_length = 1}\n```"           },           format={             table_optional=false,             takes_table=true           },           name="draw_line",           order=0,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=9,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=0,               type="Color"             },             {               description="Length of the dashes that this line has. Used only if gap_length > 0. Default is 0.",               name="dash_length",               optional=true,               order=3,               type="double"             },             {               description="Starting offset to apply to dashes. Cannot be greater than dash_length + gap_length. Default is 0.",               name="dash_offset",               optional=true,               order=4,               type="double"             },             {               description="If this should be drawn below sprites and entities. Defaults to false.",               name="draw_on_ground",               optional=true,               order=13,               type="boolean"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=10,               type="ForceSet"             },             {               description="",               name="from",               optional=false,               order=5,               type="ScriptRenderTarget"             },             {               description="Length of the gaps that this line has, in tiles. Default is 0.",               name="gap_length",               optional=true,               order=2,               type="double"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=14,               type="boolean"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=11,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=15,               type="ScriptRenderMode"             },             {               description="",               name="surface",               optional=false,               order=7,               type="SurfaceIdentification"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=8,               type="uint"             },             {               description="",               name="to",               optional=false,               order=6,               type="ScriptRenderTarget"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=12,               type="boolean"             },             {               description="In pixels (32 per tile).",               name="width",               optional=false,               order=1,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a triangle mesh defined by a triangle strip.",           format={             table_optional=false,             takes_table=true           },           name="draw_polygon",           order=5,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=8,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=0,               type="Color"             },             {               description="If this should be drawn below sprites and entities. Defaults to false.",               name="draw_on_ground",               optional=true,               order=12,               type="boolean"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=9,               type="ForceSet"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=13,               type="boolean"             },             {               description="The orientation applied to all vertices. Default is 0.",               name="orientation",               optional=true,               order=3,               type="RealOrientation"             },             {               description="If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that `orientation` is still applied.",               name="orientation_target",               optional=true,               order=4,               type="ScriptRenderTarget"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=10,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=14,               type="ScriptRenderMode"             },             {               description="",               name="surface",               optional=false,               order=6,               type="SurfaceIdentification"             },             {               description="Acts like an offset applied to all vertices that are not set to an entity.",               name="target",               optional=true,               order=2,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=7,               type="uint"             },             {               description="Only used if `orientation_target` is a LuaEntity.",               name="use_target_orientation",               optional=true,               order=5,               type="boolean"             },             {               description="",               name="vertices",               optional=false,               order=1,               type={                 complex_type="array",                 value="ScriptRenderTarget"               }             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=11,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a rectangle.",           examples={             "```\n-- Draw a white and 1 pixel wide square outline with the corners {0, 0} and {2, 2}.\nrendering.draw_rectangle{surface = game.player.surface, left_top = {0, 0}, right_bottom = {2, 2}, color = {1, 1, 1}}\n```"           },           format={             table_optional=false,             takes_table=true           },           name="draw_rectangle",           order=3,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=7,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=0,               type="Color"             },             {               description="If this should be drawn below sprites and entities. Defaults to false.",               name="draw_on_ground",               optional=true,               order=11,               type="boolean"             },             {               description="If the rectangle should be filled. Defaults to false.",               name="filled",               optional=true,               order=2,               type="boolean"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=8,               type="ForceSet"             },             {               description="",               name="left_top",               optional=false,               order=3,               type="ScriptRenderTarget"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=12,               type="boolean"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=9,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=13,               type="ScriptRenderMode"             },             {               description="",               name="right_bottom",               optional=false,               order=4,               type="ScriptRenderTarget"             },             {               description="",               name="surface",               optional=false,               order=5,               type="SurfaceIdentification"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=6,               type="uint"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=10,               type="boolean"             },             {               description="Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.",               name="width",               optional=true,               order=1,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a sprite.",           examples={             "```\n-- This will draw an iron plate icon at the character's feet. The sprite will move together with the character.\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = game.player.character, surface = game.player.surface}\n```",             "```\n-- This will draw an iron plate icon at the character's head. The sprite will move together with the character.\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = {entity = game.player.character, offset = {0, -2}}, surface = game.player.surface}\n$field(render_mode, ScriptRenderMode, $optional) Mode which this object should render in. Defaults to \"game\".\n```"           },           format={             table_optional=false,             takes_table=true           },           name="draw_sprite",           order=6,           parameters={             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=12,               type="uint16"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=13,               type="ForceSet"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=16,               type="boolean"             },             {               description="The orientation of the sprite. Default is 0.",               name="orientation",               optional=true,               order=1,               type="RealOrientation"             },             {               description="If given, the sprite rotates so that it faces this target. Note that `orientation` is still applied to the sprite.",               name="orientation_target",               optional=true,               order=6,               type="ScriptRenderTarget"             },             {               description="Offsets the center of the sprite if `orientation_target` is given. This offset will rotate together with the sprite.",               name="oriented_offset",               optional=true,               order=8,               type="Vector"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=14,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Render layer of the sprite. Defaults to `\"arrow\"`.",               name="render_layer",               optional=true,               order=5,               type="RenderLayer"             },             {               description="",               name="sprite",               optional=false,               order=0,               type="SpritePath"             },             {               description="",               name="surface",               optional=false,               order=10,               type="SurfaceIdentification"             },             {               description="Center of the sprite.",               name="target",               optional=false,               order=9,               type="ScriptRenderTarget"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=11,               type="uint"             },             {               description="",               name="tint",               optional=true,               order=4,               type="Color"             },             {               description="Only used if `orientation_target` is a LuaEntity.",               name="use_target_orientation",               optional=true,               order=7,               type="boolean"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=15,               type="boolean"             },             {               description="Horizontal scale of the sprite. Default is 1.",               name="x_scale",               optional=true,               order=2,               type="double"             },             {               description="Vertical scale of the sprite. Default is 1.",               name="y_scale",               optional=true,               order=3,               type="double"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Create a text.\n\nNot all fonts support scaling.",           format={             table_optional=false,             takes_table=true           },           name="draw_text",           order=1,           parameters={             {               description="Defaults to \"left\".",               name="alignment",               optional=true,               order=13,               type="TextAlign"             },             {               description="In ticks. Defaults to 0 (no blinking). Game alerts use 30.",               name="blink_interval",               optional=true,               order=7,               type="uint16"             },             {               description="",               name="color",               optional=false,               order=3,               type="Color"             },             {               description="If this should be drawn below sprites and entities. Rich text does not support this option. Defaults to false.",               name="draw_on_ground",               optional=true,               order=11,               type="boolean"             },             {               description="Name of font to use. Defaults to the same font as flying-text.",               name="font",               optional=true,               order=5,               type="string"             },             {               description="The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",               name="forces",               optional=true,               order=8,               type="ForceSet"             },             {               description="If this should only be rendered in alt mode. Defaults to false.",               name="only_in_alt_mode",               optional=true,               order=16,               type="boolean"             },             {               description="The orientation of the text. Default is 0.",               name="orientation",               optional=true,               order=12,               type="RealOrientation"             },             {               description="The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.",               name="players",               optional=true,               order=9,               type={                 complex_type="array",                 value="PlayerIdentification"               }             },             {               description="Mode which this object should render in. Defaults to \"game\".",               name="render_mode",               optional=true,               order=17,               type="ScriptRenderMode"             },             {               description="",               name="scale",               optional=true,               order=4,               type="double"             },             {               description="Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.",               name="scale_with_zoom",               optional=true,               order=15,               type="boolean"             },             {               description="",               name="surface",               optional=false,               order=1,               type="SurfaceIdentification"             },             {               description="",               name="target",               optional=false,               order=2,               type="ScriptRenderTarget"             },             {               description="The text to display.",               name="text",               optional=false,               order=0,               type="LocalisedString"             },             {               description="In ticks. Defaults to living forever.",               name="time_to_live",               optional=true,               order=6,               type="uint"             },             {               description="If rich text rendering is enabled. Defaults to false.",               name="use_rich_text",               optional=true,               order=18,               type="boolean"             },             {               description="Defaults to \"top\".",               name="vertical_alignment",               optional=true,               order=14,               type="VerticalTextAlign"             },             {               description="If this is rendered to anyone at all. Defaults to true.",               name="visible",               optional=true,               order=10,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRenderObject"             }           }         },         {           description="Gets an array of all valid objects.",           format={             takes_table=false           },           name="get_all_objects",           order=9,           parameters={             {               description="If provided, get only the render objects created by this mod. An empty string (`\"\"`) refers to all objects not belonging to a mod, such as those created using console commands.",               name="mod_name",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaRenderObject"               }             }           }         },         {           description="Gives LuaRenderObject for given object ID. May return nil if object does not exist or is invalid.",           format={             takes_table=false           },           name="get_object_by_id",           order=11,           parameters={             {               description="",               name="object_id",               optional=false,               order=0,               type="uint64"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaRenderObject"             }           }         }       },       name="LuaRendering",       operators={},       order=110     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="Prototype of a resource category.",       methods={},       name="LuaResourceCategoryPrototype",       operators={},       order=111,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="available_construction_output_signal",           optional=true,           order=5,           read_type="SignalID",           write_type="SignalID"         },         {           description="",           name="available_logistic_output_signal",           optional=true,           order=3,           read_type="SignalID",           write_type="SignalID"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="Selects contents that are to be read from the roboport",           name="read_items_mode",           optional=false,           order=0,           read_type="defines.control_behavior.roboport.read_items_mode",           write_type="defines.control_behavior.roboport.read_items_mode"         },         {           description="Legacy field, please use LuaRoboportControlBehavior::read_items_mode instead. `true` if the roboport should report the logistics network content to the circuit network.",           name="read_logistics",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the roboport should report the robot statistics to the circuit network.",           name="read_robot_stats",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="roboport_count_output_signal",           optional=true,           order=7,           read_type="SignalID",           write_type="SignalID"         },         {           description="",           name="total_construction_output_signal",           optional=true,           order=6,           read_type="SignalID",           write_type="SignalID"         },         {           description="",           name="total_logistic_output_signal",           optional=true,           order=4,           read_type="SignalID",           write_type="SignalID"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="Control behavior for roboports.",       methods={},       name="LuaRoboportControlBehavior",       operators={},       order=112,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="The items read mode for the rocket silo.",           name="read_mode",           optional=false,           order=0,           read_type="defines.control_behavior.rocket_silo.read_mode",           write_type="defines.control_behavior.rocket_silo.read_mode"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for rocket silos.",       methods={},       name="LuaRocketSiloControlBehavior",       operators={},       order=113,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="current",           optional=false,           order=2,           read_type="uint"         },         {           description="The group this schedule is part of, if any.",           name="group",           optional=true,           order=6,           read_type="string",           write_type="string"         },         {           description="",           name="interrupt_count",           optional=false,           order=1,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=8,           read_type="string"         },         {           description="The owner of this schedule.",           name="owner",           optional=true,           order=0,           read_type={             complex_type="union",             full_format=false,             options={               "LuaTrain",               "LuaSpacePlatform"             }           }         },         {           description="Note: when writing, value must not be larger than LuaGameScript::tick",           name="tick_of_last_activity",           optional=false,           order=4,           read_type="MapTick",           write_type="MapTick"         },         {           description="",           name="tick_of_last_schedule_change",           optional=false,           order=3,           read_type="MapTick"         },         {           description="",           name="ticks_in_station",           optional=false,           order=5,           read_type="MapTick"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=7,           read_type="boolean"         }       },       description="The schedule of a particular [LuaTrain](runtime:LuaTrain) or [LuaSpacePlatform](runtime:LuaSpacePlatform).",       methods={         {           description="Activates the interrupt at the given index, if the index is valid.",           format={             takes_table=false           },           name="activate_interrupt",           order=9,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Adds the given interrupt to the schedule if an interrupt with the given name does not already exist.",           format={             takes_table=false           },           name="add_interrupt",           order=7,           parameters={             {               description="",               name="interrupt",               optional=false,               order=0,               type="ScheduleInterrupt"             }           },           return_values={}         },         {           description="Adds the given record to the end of the current schedule or at the given index using the provided data.",           format={             takes_table=false           },           name="add_record",           order=4,           parameters={             {               description="",               name="data",               optional=false,               order=0,               type="AddRecordData"             }           },           return_values={             {               description="The index the record was added at.",               optional=true,               order=0,               type="uint"             }           }         },         {           description="Adds the given wait condition to the given record.",           format={             takes_table=false           },           name="add_wait_condition",           order=0,           parameters={             {               description="",               name="condition_index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="record_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             },             {               description="",               name="type",               optional=false,               order=2,               type="WaitConditionType"             }           },           return_values={}         },         {           description="Changes the interrupt at the given index to the provided values. Note, the names must match.",           format={             takes_table=false           },           name="change_interrupt",           order=10,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="interrupt",               optional=false,               order=1,               type="ScheduleInterrupt"             }           },           return_values={}         },         {           description="Changes the wait condition on the given record to the new values.",           format={             takes_table=false           },           name="change_wait_condition",           order=3,           parameters={             {               description="",               name="condition_index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="record_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             },             {               description="",               name="wait_condition",               optional=false,               order=2,               type="WaitCondition"             }           },           return_values={}         },         {           description="Removes all interrupts.",           format={             takes_table=false           },           name="clear_interrupts",           order=25,           parameters={},           return_values={}         },         {           description="",           format={             takes_table=false           },           name="clear_records",           order=21,           parameters={             {               description="If provided, clears the records for this interrupt.",               name="interrupt_index",               optional=true,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Copies the record from the given schedule at the given index into this schedule at the given index.",           format={             takes_table=false           },           name="copy_record",           order=6,           parameters={             {               description="",               name="destination_index",               optional=false,               order=2,               type="uint"             },             {               description="",               name="source_index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="source_schedule",               optional=false,               order=0,               type="LuaSchedule"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="drag_interrupt",           order=16,           parameters={             {               description="",               name="from",               optional=false,               order=0,               type="uint"             },             {               description="",               name="to",               optional=false,               order=1,               type="uint"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="drag_record",           order=15,           parameters={             {               description="",               name="from",               optional=false,               order=0,               type="uint"             },             {               description="The interrupt to operate on, if any.",               name="interrupt_index",               optional=true,               order=2,               type="uint"             },             {               description="",               name="to",               optional=false,               order=1,               type="uint"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="drag_wait_condition",           order=17,           parameters={             {               description="",               name="from",               optional=false,               order=1,               type="uint"             },             {               description="The record to change.",               name="index",               optional=false,               order=0,               type="ScheduleRecordPosition"             },             {               description="",               name="to",               optional=false,               order=2,               type="uint"             }           },           return_values={}         },         {           description="Gets if the given interrupt can be triggered inside other interrupts.",           format={             takes_table=false           },           name="get_inside_interrupt",           order=29,           parameters={             {               description="",               name="interrupt_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_interrupt",           order=22,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ScheduleInterrupt"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_interrupts",           order=23,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="ScheduleInterrupt"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="get_record",           order=18,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ScheduleRecord"             }           }         },         {           description="If the given index is invalid, `nil` is returned.",           format={             takes_table=false           },           name="get_record_count",           order=31,           parameters={             {               description="If provided, the record count in this interrupt is read.",               name="interrupt_index",               optional=true,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           }         },         {           description="",           format={             takes_table=false           },           name="get_records",           order=19,           parameters={             {               description="If provided, gets the records for this interrupt.",               name="interrupt_index",               optional=true,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="ScheduleRecord"               }             }           }         },         {           description="Gets the wait condition at the given index if one exists.",           format={             takes_table=false           },           name="get_wait_condition",           order=26,           parameters={             {               description="",               name="condition_index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="schedule_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="WaitCondition"             }           }         },         {           description="The number of wait conditions in the given schedule record.",           format={             takes_table=false           },           name="get_wait_condition_count",           order=28,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="uint"             }           }         },         {           description="Gets the wait conditions at the given index if they exist.",           format={             takes_table=false           },           name="get_wait_conditions",           order=27,           parameters={             {               description="",               name="schedule_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={             {               description="",               optional=true,               order=0,               type={                 complex_type="array",                 value="WaitCondition"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="go_to_station",           order=12,           parameters={             {               description="The schedule index",               name="schedule_index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes the interrupt at the given index, if the index is valid.",           format={             takes_table=false           },           name="remove_interrupt",           order=8,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes the record at the given index, if the index is valid.",           format={             takes_table=false           },           name="remove_record",           order=5,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={}         },         {           description="Removes the given wait condition from the given record.",           format={             takes_table=false           },           name="remove_wait_condition",           order=1,           parameters={             {               description="",               name="condition_index",               optional=false,               order=1,               type="uint"             },             {               description="",               name="record_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="rename_interrupt",           order=11,           parameters={             {               description="The new name - if it already exists, does nothing.",               name="new_name",               optional=false,               order=1,               type="string"             },             {               description="The interrupt to rename",               name="old_name",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="Sets if unloading is allowed at the given schedule index.",           format={             takes_table=false           },           name="set_allow_unloading",           order=14,           parameters={             {               description="",               name="allow",               optional=false,               order=1,               type="boolean"             },             {               description="",               name="index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={}         },         {           description="Sets if the given interrupt can be triggered inside other interrupts.",           format={             takes_table=false           },           name="set_inside_interrupt",           order=30,           parameters={             {               description="",               name="interrupt_index",               optional=false,               order=0,               type="uint"             },             {               description="",               name="value",               optional=false,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_interrupts",           order=24,           parameters={             {               description="",               name="interrupts",               optional=false,               order=0,               type={                 complex_type="array",                 value="ScheduleInterrupt"               }             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_records",           order=20,           parameters={             {               description="If provided, the records will be set on this interrupt.",               name="interrupt_index",               optional=true,               order=1,               type="uint"             },             {               description="",               name="records",               optional=false,               order=0,               type={                 complex_type="array",                 value="ScheduleRecord"               }             }           },           return_values={}         },         {           description="",           format={             takes_table=false           },           name="set_stopped",           order=13,           parameters={             {               description="",               name="stopped",               optional=false,               order=0,               type="boolean"             }           },           return_values={}         },         {           description="Sets the comparison on the given wait condition.",           format={             takes_table=false           },           name="set_wait_condition_mode",           order=2,           parameters={             {               description="",               name="condition_index",               optional=false,               order=1,               type="uint"             },             {               description="`\"and\"`, or `\"or\"`",               name="mode",               optional=false,               order=2,               type="string"             },             {               description="",               name="record_index",               optional=false,               order=0,               type="ScheduleRecordPosition"             }           },           return_values={}         }       },       name="LuaSchedule",       operators={},       order=114     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="The selector combinator parameters. `parameters` may be `nil` in order to clear the parameters.",           name="parameters",           optional=false,           order=0,           read_type="SelectorCombinatorParameters",           write_type="SelectorCombinatorParameters"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for selector combinators.",       methods={},       name="LuaSelectorCombinatorControlBehavior",       operators={},       order=115,       parent="LuaCombinatorControlBehavior"     },     {       abstract=false,       attributes={         {           description="The current global mod settings, indexed by prototype name.\n\nEven though this attribute is marked as read-only, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",           name="global",           optional=false,           order=1,           read_type={             complex_type="LuaCustomTable",             key="string",             value="ModSetting"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="The **default** player mod settings for this map, indexed by prototype name. Changing these settings only affects the default settings for future players joining the game.\n\nIndividual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",           name="player_default",           optional=false,           order=2,           read_type={             complex_type="LuaCustomTable",             key="string",             value="ModSetting"           }         },         {           description="The startup mod settings, indexed by prototype name.",           name="startup",           optional=false,           order=0,           read_type={             complex_type="LuaCustomTable",             key="string",             value="ModSetting"           }         }       },       description="Object containing mod settings of three distinct types: `startup`, `global`, and `player`. An instance of LuaSettings is available through the global object named `settings`.",       methods={         {           description="Gets the current per-player settings for the given player, indexed by prototype name. Returns the same structure as [LuaPlayer::mod_settings](runtime:LuaPlayer::mod_settings). This table becomes invalid if its associated player does.\n\nEven though this attribute is a getter, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",           examples={             "```\n-- Change the value of the \"active_lifestyle\" setting\nsettings.get_player_settings(player_index)[\"active_lifestyle\"] = {value = true}\n```"           },           format={             takes_table=false           },           name="get_player_settings",           order=0,           parameters={             {               description="",               name="player",               optional=false,               order=0,               type="PlayerIdentification"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="LuaCustomTable",                 key="string",                 value="ModSetting"               }             }           }         }       },       name="LuaSettings",       operators={},       order=116     },     {       abstract=false,       attributes={         {           description="",           name="action",           optional=false,           order=0,           read_type="string"         },         {           description="The control input that is associated with this shortcut, if any.",           name="associated_control_input",           optional=true,           order=4,           read_type="string"         },         {           description="The item to create when this shortcut is used, if any.",           name="item_to_spawn",           optional=true,           order=1,           read_type="LuaItemPrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="The technology that needs to be researched once (in any save) for this shortcut to be unlocked (in all saves).",           name="technology_to_unlock",           optional=true,           order=2,           read_type="LuaTechnologyPrototype"         },         {           description="",           name="toggleable",           optional=false,           order=3,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="Prototype of a shortcut.",       methods={},       name="LuaShortcutPrototype",       operators={},       order=117,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="active_quickbars",           optional=false,           order=10,           write_type="uint8"         },         {           description="",           name="camera_alt_info",           optional=false,           order=7,           write_type="boolean"         },         {           description="",           name="camera_player",           optional=false,           order=5,           write_type="PlayerIdentification"         },         {           description="",           name="camera_player_cursor_direction",           optional=false,           order=6,           write_type="defines.direction"         },         {           description="",           name="camera_player_cursor_position",           optional=true,           order=0,           read_type="MapPosition",           write_type="MapPosition"         },         {           description="",           name="camera_position",           optional=true,           order=1,           read_type="MapPosition",           write_type="MapPosition"         },         {           description="",           name="camera_surface_index",           optional=true,           order=2,           read_type="uint",           write_type="uint"         },         {           description="",           name="camera_zoom",           optional=false,           order=4,           write_type="double"         },         {           description="",           name="gui_tooltip_interval",           optional=false,           order=9,           write_type="double"         },         {           description="",           name="hide_cursor",           optional=false,           order=3,           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=12,           read_type="string"         },         {           description="",           name="smart_belt_building",           optional=true,           order=8,           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=11,           read_type="boolean"         }       },       description="Functions for use during simulations. This object cannot be saved, and cannot be used outside of a simulation.\n\nThe simulation object instance can be obtained from [LuaGameScript::simulation](runtime:LuaGameScript::simulation).",       methods={         {           description="Activate the rail planner at the given position.",           format={             table_optional=true,             takes_table=true           },           name="activate_rail_planner",           order=3,           parameters={             {               description="Defaults to [normal](runtime:defines.build_mode.normal).",               name="build_mode",               optional=true,               order=2,               type="defines.build_mode"             },             {               description="Defaults to `false`.",               name="ghost_mode",               optional=true,               order=1,               type="boolean"             },             {               description="",               name="position",               optional=true,               order=0,               type="MapPosition"             }           },           return_values={}         },         {           description="Send a control press event at the current cursor position.",           format={             table_optional=false,             takes_table=true           },           name="control_down",           order=9,           parameters={             {               description="The name of the control input to press.",               name="control",               optional=false,               order=0,               type="string"             },             {               description="Whether to show flying text of the activated control.",               name="notify",               optional=false,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="Send a control down and up event at the current cursor position. This is equivalent to calling [LuaSimulation::control_down](runtime:LuaSimulation::control_down), then [LuaSimulation::control_up](runtime:LuaSimulation::control_up).",           format={             table_optional=false,             takes_table=true           },           name="control_press",           order=11,           parameters={             {               description="The name of the control input to press and release.",               name="control",               optional=false,               order=0,               type="string"             },             {               description="Whether to show flying text of the activated control.",               name="notify",               optional=false,               order=1,               type="boolean"             }           },           return_values={}         },         {           description="Send a control release event at the current cursor position.",           format={             table_optional=false,             takes_table=true           },           name="control_up",           order=10,           parameters={             {               description="The name of the control input to release.",               name="control",               optional=false,               order=0,               type="string"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="create_test_player",           order=0,           parameters={             {               description="The name of the new player.",               name="name",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="The created player.",               optional=false,               order=0,               type="LuaPlayer"             }           }         },         {           description="Deactivate the rail planner.",           format={             takes_table=false           },           name="deactivate_rail_planner",           order=4,           parameters={},           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="get_slot_position",           order=1,           parameters={             {               description="Defaults to `\"character\"`.",               name="inventory",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="character"                   },                   {                     complex_type="literal",                     value="entity"                   }                 }               }             },             {               description="",               name="inventory_index",               optional=false,               order=0,               type="InventoryIndex"             },             {               description="This index is 0-based, unlike other inventory indices.",               name="slot_index",               optional=false,               order=1,               type="ItemStackIndex"             }           },           return_values={             {               description="Position of the GUI slot on the screen, if successfully found.",               optional=true,               order=0,               type="MapPosition"             }           }         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="get_widget_position",           order=2,           parameters={             {               description="",               name="data",               optional=true,               order=1,               type="string"             },             {               description="",               name="data2",               optional=true,               order=2,               type="string"             },             {               description="",               name="type",               optional=false,               order=0,               type="SimulationWidgetType"             }           },           return_values={             {               description="Center of the GUI widget on the screen, if successfully found.",               optional=true,               order=0,               type="MapPosition"             }           }         },         {           description="Send a left mouse button click event at its current position. This is equivalent to calling [LuaSimulation::mouse_down](runtime:LuaSimulation::mouse_down), then [LuaSimulation::mouse_up](runtime:LuaSimulation::mouse_up).",           format={             takes_table=false           },           name="mouse_click",           order=8,           parameters={},           return_values={}         },         {           description="Send a left mouse button-down event at its current position.",           format={             takes_table=false           },           name="mouse_down",           order=6,           parameters={},           return_values={}         },         {           description="Send a left mouse button-up event at its current position.",           format={             takes_table=false           },           name="mouse_up",           order=7,           parameters={},           return_values={}         },         {           description="Move the cursor towards the given position at the given speed.",           format={             table_optional=false,             takes_table=true           },           name="move_cursor",           order=5,           parameters={             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Defaults to `0.2`.",               name="speed",               optional=true,               order=1,               type="double"             }           },           return_values={             {               description="Whether the cursor will reach the target position with this move.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Scroll the clipboard backwards by one entry.",           format={             takes_table=false           },           name="scroll_clipboard_backwards",           order=14,           parameters={},           return_values={}         },         {           description="Scroll the clipboard forwards by one entry.",           format={             takes_table=false           },           name="scroll_clipboard_forwards",           order=13,           parameters={},           return_values={}         },         {           description="Write text as if it was typed by a player. Overwrites existing text by selecting it first.",           format={             table_optional=false,             takes_table=true           },           name="write",           order=12,           parameters={             {               description="The text to write. Does nothing if no text is provided.",               name="text",               optional=true,               order=0,               type="string"             }           },           return_values={}         }       },       name="LuaSimulation",       operators={},       order=118     },     {       abstract=false,       attributes={         {           description="",           name="asteroid_spawn_definitions",           optional=true,           order=3,           read_type={             complex_type="array",             value="SpaceConnectionAsteroidSpawnDefinition"           }         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=4,           read_type="LuaSpaceConnectionPrototype"         },         {           description="",           name="from",           optional=false,           order=0,           read_type="LuaSpaceLocationPrototype"         },         {           description="",           name="length",           optional=false,           order=2,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="",           name="to",           optional=false,           order=1,           read_type="LuaSpaceLocationPrototype"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="Prototype of a space connection.",       methods={},       name="LuaSpaceConnectionPrototype",       operators={},       order=119,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="",           name="asteroid_spawn_definitions",           optional=true,           order=3,           read_type={             complex_type="array",             value="SpaceLocationAsteroidSpawnDefinition"           }         },         {           description="",           name="asteroid_spawn_influence",           optional=false,           order=2,           read_type="double"         },         {           description="",           name="entities_require_heating",           optional=true,           order=7,           read_type="boolean",           subclasses={             "Planet"           }         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=4,           read_type="LuaSpaceLocationPrototype"         },         {           description="",           name="map_gen_settings",           optional=true,           order=6,           read_type="MapGenSettings",           subclasses={             "Planet"           }         },         {           description="",           name="map_seed_offset",           optional=true,           order=5,           read_type="uint",           subclasses={             "Planet"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=13,           read_type="string"         },         {           description="",           name="player_effects",           optional=true,           order=9,           read_type={             complex_type="array",             value="TriggerItem"           },           subclasses={             "Planet"           }         },         {           description="",           name="pollutant_type",           optional=true,           order=8,           read_type="LuaAirbornePollutantPrototype",           subclasses={             "Planet"           }         },         {           description="",           name="position",           optional=false,           order=0,           read_type="MapPosition"         },         {           description="",           name="solar_power_in_space",           optional=false,           order=1,           read_type="double"         },         {           description="A mapping of the surface property name to the value.",           name="surface_properties",           optional=true,           order=11,           read_type={             complex_type="dictionary",             key="string",             value="double"           },           subclasses={             "Planet"           }         },         {           description="",           name="ticks_between_player_effects",           optional=true,           order=10,           read_type="uint",           subclasses={             "Planet"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=12,           read_type="boolean"         }       },       description="Prototype of a space location, such as a planet.",       methods={},       name="LuaSpaceLocationPrototype",       operators={},       order=120,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The damaged tiles on this platform.",           name="damaged_tiles",           optional=false,           order=16,           read_type={             complex_type="array",             value={               complex_type="table",               parameters={                 {                   description="",                   name="damage",                   optional=false,                   order=1,                   type="float"                 },                 {                   description="",                   name="position",                   optional=false,                   order=0,                   type="TilePosition"                 }               }             }           }         },         {           description="The point on space connection this platform is at or `nil`.\n\nIt is represented as a number in range `[0, 1]`, with 0 being [LuaSpaceConnectionPrototype::from](runtime:LuaSpaceConnectionPrototype::from) and 1 being [LuaSpaceConnectionPrototype::to](runtime:LuaSpaceConnectionPrototype::to).",           name="distance",           optional=true,           order=6,           read_type="double",           write_type="double"         },         {           description="All items that have been thrown overboard.",           name="ejected_items",           optional=false,           order=17,           read_type={             complex_type="array",             value="EjectedItem"           }         },         {           description="The force of this space platform.",           name="force",           optional=false,           order=0,           read_type="LuaForce"         },         {           description="If this platform is hidden from the remote view surface list.",           name="hidden",           optional=false,           order=18,           read_type="boolean",           write_type="boolean"         },         {           description="The hub on this platform. `nil` if the platform has not had the starter pack applied or hub was destroyed but the platform not yet deleted.\n\nIf the hub is destroyed the platform will be deleted at the end of the tick but is otherwise valid to use until that point.",           name="hub",           optional=true,           order=11,           read_type="LuaEntity"         },         {           description="The unique index of this space platform.",           name="index",           optional=false,           order=2,           read_type="uint"         },         {           description="The space location this space platform previously went through or stopped at.",           name="last_visited_space_location",           optional=true,           order=4,           read_type="LuaSpaceLocationPrototype"         },         {           description="The name of this space platform.",           name="name",           optional=false,           order=1,           read_type="string",           write_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=20,           read_type="string"         },         {           description="When `true`, the platform has paused thrust and does not advance its schedule.",           name="paused",           optional=false,           order=8,           read_type="boolean",           write_type="boolean"         },         {           description="This platform's current schedule, if any. Set to `nil` to clear.\n\nThe schedule can't be changed by modifying the returned table. Instead, changes must be made by assigning a new table to this attribute.",           name="schedule",           optional=true,           order=12,           read_type="PlatformSchedule",           write_type="PlatformSchedule"         },         {           description="If this platform is scheduled for deletion.\n\nReturns how many ticks are left before the platform will be deleted. 0 if not scheduled for deletion.",           name="scheduled_for_deletion",           optional=false,           order=14,           read_type="uint"         },         {           description="The space connection this space platform is traveling through or `nil`.\n\nWrite operation requires a valid space connection and it sets the distance to 0.5.",           name="space_connection",           optional=true,           order=5,           read_type="LuaSpaceConnectionPrototype",           write_type="LuaSpaceConnectionPrototype"         },         {           description="The space location this space platform is stopped at or `nil`.\n\nWrite operation requires a valid space location and will cancel pending item requests.",           name="space_location",           optional=true,           order=3,           read_type="LuaSpaceLocationPrototype",           write_type="LuaSpaceLocationPrototype"         },         {           description="",           name="speed",           optional=false,           order=13,           read_type="double",           write_type="double"         },         {           description="The starter pack used to create this space platform.",           name="starter_pack",           optional=true,           order=9,           read_type="ItemIDAndQualityIDPair"         },         {           description="The current state of this space platform.",           name="state",           optional=false,           order=7,           read_type="defines.space_platform_state"         },         {           description="The surface that belongs to this platform (if it has been created yet).",           name="surface",           optional=false,           order=10,           read_type="LuaSurface"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=19,           read_type="boolean"         },         {           description="The total weight of the platform.",           name="weight",           optional=false,           order=15,           read_type="Weight"         }       },       description="A space platform.",       methods={         {           description="Applies the starter pack for this platform if it hasn't already been applied.",           format={             takes_table=false           },           name="apply_starter_pack",           order=2,           parameters={},           return_values={             {               description="The platform hub.",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Returns `true` when the space platform isn't waiting on any delivery from the planet.",           format={             takes_table=false           },           name="can_leave_current_location",           order=8,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancels deletion of this space platform if it was scheduled for deletion.",           format={             takes_table=false           },           name="cancel_deletion",           order=1,           parameters={},           return_values={}         },         {           description="Removes all ejected items from this space platform.",           format={             takes_table=false           },           name="clear_ejected_items",           order=11,           parameters={},           return_values={}         },         {           description="Creates the given asteroid chunks on this platform.",           format={             takes_table=false           },           name="create_asteroid_chunks",           order=6,           parameters={             {               description="",               name="asteroid_chunks",               optional=false,               order=0,               type={                 complex_type="array",                 value="AsteroidChunk"               }             }           },           return_values={}         },         {           description="Damages the given tile if it exists, the chunk is generated, and it is a platform foundation tile.",           format={             table_optional=true,             takes_table=true           },           name="damage_tile",           order=3,           parameters={             {               description="",               name="cause",               optional=true,               order=2,               type="LuaEntity"             },             {               description="",               name="damage",               optional=false,               order=1,               type="float"             },             {               description="",               name="position",               optional=false,               order=0,               type="TilePosition"             }           },           return_values={}         },         {           description="Schedules this space platform for deletion.",           format={             takes_table=false           },           name="destroy",           order=0,           parameters={             {               description="The number of ticks from now when this platform will be deleted.",               name="ticks",               optional=true,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Destroys all asteroid chunks from the given area. If no area and no position are given, then the entire surface is searched.",           format={             table_optional=false,             takes_table=true           },           name="destroy_asteroid_chunks",           order=5,           parameters={             {               description="",               name="area",               optional=true,               order=0,               type="BoundingBox"             },             {               description="If the filters should be inverted.",               name="invert",               optional=true,               order=4,               type="boolean"             },             {               description="",               name="limit",               optional=true,               order=3,               type="uint"             },             {               description="",               name="name",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "AsteroidChunkID",                   {                     complex_type="array",                     value="AsteroidChunkID"                   }                 }               }             },             {               description="",               name="position",               optional=true,               order=1,               type="MapPosition"             }           },           return_values={}         },         {           description="Ejects an item into space on this space platform.\n\nIf a LuaItemStack is provided, the actual item is ejected and removed from the source.",           format={             takes_table=false           },           name="eject_item",           order=10,           parameters={             {               description="",               name="item",               optional=false,               order=0,               type="ItemStackIdentification"             },             {               description="When inserters drop items into space, the [InserterPrototype::insert_position](prototype:InserterPrototype::insert_position) rotated to the inserter direction is used.",               name="movement",               optional=false,               order=2,               type="Vector"             },             {               description="",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={}         },         {           description="Find asteroid chunks of a given name in a given area.\n\nIf no filters are given, returns all asteroid chunks in the search area. If multiple filters are specified, returns only asteroid chunks matching every given filter. If no area and no position are given, the entire surface is searched.",           examples={             "```\ngame.forces.player.platforms[1].find_asteroid_chunks_filtered{area = {{-10, -10}, {10, 10}}, name = \"carbonic-asteroid\"} -- gets all asteroids with the given name in the rectangle\ngame.forces.player.platforms[1].find_asteroid_chunks_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 asteroid chunks in the rectangle\n```"           },           format={             table_optional=false,             takes_table=true           },           name="find_asteroid_chunks_filtered",           order=7,           parameters={             {               description="",               name="area",               optional=true,               order=0,               type="BoundingBox"             },             {               description="If the filters should be inverted.",               name="invert",               optional=true,               order=4,               type="boolean"             },             {               description="",               name="limit",               optional=true,               order=3,               type="uint"             },             {               description="",               name="name",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "AsteroidChunkID",                   {                     complex_type="array",                     value="AsteroidChunkID"                   }                 }               }             },             {               description="",               name="position",               optional=true,               order=1,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="AsteroidChunk"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="get_schedule",           order=9,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaSchedule"             }           }         },         {           description="Repairs the given tile if it's damaged.",           format={             takes_table=false           },           name="repair_tile",           order=4,           parameters={             {               description="",               name="amount",               optional=true,               order=1,               type="float"             },             {               description="",               name="position",               optional=false,               order=0,               type="TilePosition"             }           },           return_values={}         }       },       name="LuaSpacePlatform",       operators={},       order=121     },     {       abstract=false,       attributes={         {           description="Signal to be transmitted with platform's damage taken value.",           name="damage_taken_signal",           optional=true,           order=7,           read_type="SignalID",           write_type="SignalID"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=9,           read_type="string"         },         {           description="`true` if this hub is sending its content to a circuit network",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Whether damage taken by the space platform is sent to circuit network.",           name="read_damage_taken",           optional=false,           order=6,           read_type="boolean",           write_type="boolean"         },         {           description="Whether current connection \"from\" end is sent to circuit network.",           name="read_moving_from",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="Whether current connection \"to\" end is sent to circuit network.",           name="read_moving_to",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="Whether current speed of space platform is sent to circuit network.",           name="read_speed",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="Whether the signals are used for circuit conditions in the platform's schedule",           name="send_to_platform",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="Signal to be transmitted with platform's current speed.",           name="speed_signal",           optional=true,           order=5,           read_type="SignalID",           write_type="SignalID"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=8,           read_type="boolean"         }       },       description="Control behavior for space platform hubs",       methods={},       name="LuaSpacePlatformHubControlBehavior",       operators={},       order=122,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="If the storage tank content is sent to circuit network",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="Control behavior for storage tanks.",       methods={},       name="LuaStorageTankControlBehavior",       operators={},       order=123,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="",           name="badge_font",           optional=false,           order=57,           read_type="string",           subclasses={             "TabStyle"           },           write_type="string"         },         {           description="",           name="badge_horizontal_spacing",           optional=false,           order=58,           read_type="int",           subclasses={             "TabStyle"           },           write_type="int"         },         {           description="",           name="bar_width",           optional=false,           order=42,           read_type="uint",           subclasses={             "LuaProgressBarStyle"           },           write_type="uint"         },         {           description="Space between the table cell contents bottom and border.",           name="bottom_cell_padding",           optional=false,           order=22,           read_type="int",           subclasses={             "LuaTableStyle"           },           write_type="int"         },         {           description="",           name="bottom_margin",           optional=false,           order=14,           read_type="int",           write_type="int"         },         {           description="",           name="bottom_padding",           optional=false,           order=10,           read_type="int",           write_type="int"         },         {           description="Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this value.",           name="cell_padding",           optional=false,           order=67,           subclasses={             "LuaTableStyle"           },           write_type="int"         },         {           description="",           name="clicked_font_color",           optional=false,           order=30,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="",           name="clicked_vertical_offset",           optional=false,           order=33,           read_type="int",           subclasses={             "LuaButtonStyle"           },           write_type="int"         },         {           description="",           name="color",           optional=false,           order=43,           read_type="Color",           subclasses={             "LuaProgressBarStyle"           },           write_type="Color"         },         {           description="Array containing the alignment for every column of this table element. Even though this property is marked as read-only, the alignment can be changed by indexing the LuaCustomTable, like so:",           examples={             "```\ntable_element.style.column_alignments[1] = \"center\"\n```"           },           name="column_alignments",           optional=false,           order=44,           read_type={             complex_type="LuaCustomTable",             key="uint",             value="Alignment"           }         },         {           description="",           name="default_badge_font_color",           optional=false,           order=59,           read_type="Color",           subclasses={             "TabStyle"           },           write_type="Color"         },         {           description="",           name="disabled_badge_font_color",           optional=false,           order=61,           read_type="Color",           subclasses={             "TabStyle"           },           write_type="Color"         },         {           description="",           name="disabled_font_color",           optional=false,           order=31,           read_type="Color",           subclasses={             "LuaButtonStyle",             "LuaTabStyle"           },           write_type="Color"         },         {           description="",           name="draw_grayscale_picture",           optional=false,           order=38,           read_type="boolean",           subclasses={             "LuaButtonStyle"           },           write_type="boolean"         },         {           description="",           name="extra_bottom_margin_when_activated",           optional=false,           order=51,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_bottom_padding_when_activated",           optional=false,           order=47,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_left_margin_when_activated",           optional=false,           order=52,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_left_padding_when_activated",           optional=false,           order=48,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="Sets `extra_top/right/bottom/left_margin_when_activated` to this value.\n\nAn array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively.",           name="extra_margin_when_activated",           optional=false,           order=55,           write_type={             complex_type="union",             full_format=false,             options={               "int",               {                 complex_type="array",                 value="int"               }             }           }         },         {           description="Sets `extra_top/right/bottom/left_padding_when_activated` to this value.\n\nAn array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively.",           name="extra_padding_when_activated",           optional=false,           order=54,           write_type={             complex_type="union",             full_format=false,             options={               "int",               {                 complex_type="array",                 value="int"               }             }           }         },         {           description="",           name="extra_right_margin_when_activated",           optional=false,           order=53,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_right_padding_when_activated",           optional=false,           order=49,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_top_margin_when_activated",           optional=false,           order=50,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="extra_top_padding_when_activated",           optional=false,           order=46,           read_type="int",           subclasses={             "ScrollPaneStyle"           },           write_type="int"         },         {           description="",           name="font",           optional=false,           order=19,           read_type="string",           write_type="string"         },         {           description="",           name="font_color",           optional=false,           order=18,           read_type="Color",           write_type="Color"         },         {           description="Gui of the [LuaGuiElement](runtime:LuaGuiElement) of this style.",           name="gui",           optional=false,           order=0,           read_type="LuaGui"         },         {           description="Sets both minimal and maximal height to the given value.",           name="height",           optional=false,           order=63,           write_type="int"         },         {           description="Horizontal align of the inner content of the widget, if any.",           name="horizontal_align",           optional=true,           order=16,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="center"               },               {                 complex_type="literal",                 value="right"               }             }           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="left"               },               {                 complex_type="literal",                 value="center"               },               {                 complex_type="literal",                 value="right"               }             }           }         },         {           description="Horizontal space between individual cells.",           name="horizontal_spacing",           optional=false,           order=39,           read_type="int",           subclasses={             "LuaTableStyle",             "LuaFlowStyle",             "LuaHorizontalFlowStyle"           },           write_type="int"         },         {           description="Whether the GUI element can be squashed (by maximal width of some parent element) horizontally. `nil` if this element does not support squashing.\n\nThis is mainly meant to be used for scroll-pane. The default value is false.",           name="horizontally_squashable",           optional=true,           order=26,           read_type="boolean",           write_type="boolean"         },         {           description="Whether the GUI element stretches its size horizontally to other elements. `nil` if this element does not support stretching.",           name="horizontally_stretchable",           optional=true,           order=24,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="hovered_font_color",           optional=false,           order=29,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="Space between the table cell contents left and border.",           name="left_cell_padding",           optional=false,           order=23,           read_type="int",           subclasses={             "LuaTableStyle"           },           write_type="int"         },         {           description="",           name="left_margin",           optional=false,           order=15,           read_type="int",           write_type="int"         },         {           description="",           name="left_padding",           optional=false,           order=11,           read_type="int",           write_type="int"         },         {           description="Sets top/right/bottom/left margins to this value.\n\nAn array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively.",           name="margin",           optional=false,           order=66,           write_type={             complex_type="union",             full_format=false,             options={               "int",               {                 complex_type="array",                 value="int"               }             }           }         },         {           description="Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.",           name="maximal_height",           optional=false,           order=5,           read_type="int",           write_type="int"         },         {           description="Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.",           name="maximal_width",           optional=false,           order=3,           read_type="int",           write_type="int"         },         {           description="Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.",           name="minimal_height",           optional=false,           order=4,           read_type="int",           write_type="int"         },         {           description="Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.",           name="minimal_width",           optional=false,           order=2,           read_type="int",           write_type="int"         },         {           description="Name of this style.",           name="name",           optional=false,           order=1,           read_type="string"         },         {           description="Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",           name="natural_height",           optional=false,           order=7,           read_type="int",           write_type="int"         },         {           description="Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",           name="natural_width",           optional=false,           order=6,           read_type="int",           write_type="int"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=69,           read_type="string"         },         {           description="Sets top/right/bottom/left paddings to this value.\n\nAn array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively.",           name="padding",           optional=false,           order=65,           write_type={             complex_type="union",             full_format=false,             options={               "int",               {                 complex_type="array",                 value="int"               }             }           }         },         {           description="",           name="pie_progress_color",           optional=false,           order=32,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="How this GUI element handles rich text.",           name="rich_text_setting",           optional=false,           order=28,           read_type="defines.rich_text_setting",           subclasses={             "LuaLabelStyle",             "LuaTextBoxStyle",             "LuaTextFieldStyle"           },           write_type="defines.rich_text_setting"         },         {           description="Space between the table cell contents right and border.",           name="right_cell_padding",           optional=false,           order=21,           read_type="int",           subclasses={             "LuaTableStyle"           },           write_type="int"         },         {           description="",           name="right_margin",           optional=false,           order=13,           read_type="int",           write_type="int"         },         {           description="",           name="right_padding",           optional=false,           order=9,           read_type="int",           write_type="int"         },         {           description="",           name="selected_badge_font_color",           optional=false,           order=60,           read_type="Color",           subclasses={             "TabStyle"           },           write_type="Color"         },         {           description="",           name="selected_clicked_font_color",           optional=false,           order=36,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="",           name="selected_font_color",           optional=false,           order=34,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="",           name="selected_hovered_font_color",           optional=false,           order=35,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="",           name="single_line",           optional=false,           order=45,           read_type="boolean",           subclasses={             "LabelStyle"           },           write_type="boolean"         },         {           description="Sets both width and height to the given value. Also accepts an array with two values, setting width to the first and height to the second one.",           name="size",           optional=false,           order=64,           write_type={             complex_type="union",             full_format=false,             options={               "int",               {                 complex_type="array",                 value="int"               }             }           }         },         {           description="",           name="stretch_image_to_widget_size",           optional=false,           order=56,           read_type="boolean",           subclasses={             "ImageStyle"           },           write_type="boolean"         },         {           description="",           name="strikethrough_color",           optional=false,           order=37,           read_type="Color",           subclasses={             "LuaButtonStyle"           },           write_type="Color"         },         {           description="Space between the table cell contents top and border.",           name="top_cell_padding",           optional=false,           order=20,           read_type="int",           subclasses={             "LuaTableStyle"           },           write_type="int"         },         {           description="",           name="top_margin",           optional=false,           order=12,           read_type="int",           write_type="int"         },         {           description="",           name="top_padding",           optional=false,           order=8,           read_type="int",           write_type="int"         },         {           description="",           name="use_header_filler",           optional=false,           order=41,           read_type="boolean",           subclasses={             "LuaFrameStyle"           },           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=68,           read_type="boolean"         },         {           description="Vertical align of the inner content of the widget, if any.",           name="vertical_align",           optional=true,           order=17,           read_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="top"               },               {                 complex_type="literal",                 value="center"               },               {                 complex_type="literal",                 value="bottom"               }             }           },           write_type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="top"               },               {                 complex_type="literal",                 value="center"               },               {                 complex_type="literal",                 value="bottom"               }             }           }         },         {           description="Vertical space between individual cells.",           name="vertical_spacing",           optional=false,           order=40,           read_type="int",           subclasses={             "LuaTableStyle",             "LuaFlowStyle",             "LuaVerticalFlowStyle",             "LuaTabbedPaneStyle"           },           write_type="int"         },         {           description="Whether the GUI element can be squashed (by maximal height of some parent element) vertically. `nil` if this element does not support squashing.\n\nThis is mainly meant to be used for scroll-pane. The default (parent) value for scroll pane is true, false otherwise.",           name="vertically_squashable",           optional=true,           order=27,           read_type="boolean",           write_type="boolean"         },         {           description="Whether the GUI element stretches its size vertically to other elements. `nil` if this element does not support stretching.",           name="vertically_stretchable",           optional=true,           order=25,           read_type="boolean",           write_type="boolean"         },         {           description="Sets both minimal and maximal width to the given value.",           name="width",           optional=false,           order=62,           write_type="int"         }       },       description="Style of a GUI element. All of the attributes listed here may be `nil` if not available for a particular GUI element.",       methods={},       name="LuaStyle",       operators={},       order=124     },     {       abstract=false,       attributes={         {           description="When set to true, the sun will always shine.",           name="always_day",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT).\n\nThe LUT is multiplied by `((1 - weight) + brightness * weight)` and result is clamped to range `[0, 1]`.\n\nDefault is `{0, 0, 0}`, which means no influence.",           examples={             "```\n-- Makes night on the surface pitch black, LuaSurface::min_brightness is set to default value 0.15.\ngame.surfaces[1].brightness_visual_weights = { 1 / 0.85, 1 / 0.85, 1 / 0.85 }\n```"           },           name="brightness_visual_weights",           optional=false,           order=21,           read_type="ColorModifier",           write_type="ColorModifier"         },         {           description="Amount of darkness at the current time, as a number in range `[0, 1]`.",           name="darkness",           optional=false,           order=6,           read_type="float"         },         {           description="The daytime when dawn starts.",           name="dawn",           optional=false,           order=15,           read_type="double",           write_type="double"         },         {           description="Current time of day, as a number in range `[0, 1)`.",           name="daytime",           optional=false,           order=5,           read_type="double",           write_type="double"         },         {           description="Parameters of daytime. Equivalent as reading [dusk](runtime:LuaSurface::dusk), [evening](runtime:LuaSurface::evening), [morning](runtime:LuaSurface::morning) and [dawn](runtime:LuaSurface::dawn) at the same time.\n\nIn order for a write to take place, a new table needs to be written in one go: changing individual members of the returned table has no effect as those are value copies.",           name="daytime_parameters",           optional=false,           order=18,           read_type={             complex_type="table",             parameters={               {                 description="Must be > morning.",                 name="dawn",                 optional=false,                 order=3,                 type="double"               },               {                 description="Must be < evening.",                 name="dusk",                 optional=false,                 order=0,                 type="double"               },               {                 description="Must be > dusk and < morning.",                 name="evening",                 optional=false,                 order=1,                 type="double"               },               {                 description="Must be > evening and < dawn.",                 name="morning",                 optional=false,                 order=2,                 type="double"               }             }           },           write_type={             complex_type="table",             parameters={               {                 description="Must be > morning.",                 name="dawn",                 optional=false,                 order=3,                 type="double"               },               {                 description="Must be < evening.",                 name="dusk",                 optional=false,                 order=0,                 type="double"               },               {                 description="Must be > dusk and < morning.",                 name="evening",                 optional=false,                 order=1,                 type="double"               },               {                 description="Must be > evening and < dawn.",                 name="morning",                 optional=false,                 order=2,                 type="double"               }             }           }         },         {           description="If this surface can be deleted.",           name="deletable",           optional=false,           order=26,           read_type="boolean"         },         {           description="The daytime when dusk starts.",           name="dusk",           optional=false,           order=14,           read_type="double",           write_type="double"         },         {           description="The daytime when evening starts.",           name="evening",           optional=false,           order=16,           read_type="double",           write_type="double"         },         {           description="True if daytime is currently frozen.",           name="freeze_daytime",           optional=false,           order=12,           read_type="boolean",           write_type="boolean"         },         {           description="When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.",           name="generate_with_lab_tiles",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="Surface-wide effects applied to entities with effect receivers. `nil` if this surface is not using surface-wide effect source.",           name="global_effect",           optional=true,           order=27,           read_type="ModuleEffects",           write_type="ModuleEffects"         },         {           description="The global electric network statistics for this surface.",           name="global_electric_network_statistics",           optional=true,           order=32,           read_type="LuaFlowStatistics"         },         {           description="Whether this surface currently has a global electric network.",           name="has_global_electric_network",           optional=false,           order=23,           read_type="boolean"         },         {           description="If surface condition checks should not be performed on this surface.",           name="ignore_surface_conditions",           optional=false,           order=30,           read_type="boolean",           write_type="boolean"         },         {           description="This surface's index in [LuaGameScript::surfaces](runtime:LuaGameScript::surfaces) (unique ID). It is assigned when a surface is created, and remains so until it is [deleted](runtime:on_surface_deleted). Indexes of deleted surfaces can be reused.",           name="index",           optional=false,           order=1,           read_type="uint"         },         {           description="Localised name of this surface. When set, will replace the internal surface name in places where a player sees surface name.\n\nValue may be ignored if a surface has a SpacePlatform or Planet object attached to it, which take the precedence.",           name="localised_name",           optional=true,           order=29,           read_type="LocalisedString",           write_type="LocalisedString"         },         {           description="The generation settings for this surface. These can be modified after surface generation, but note that this will not retroactively update the surface. To manually regenerate it, [LuaSurface::regenerate_entity](runtime:LuaSurface::regenerate_entity), [LuaSurface::regenerate_decorative](runtime:LuaSurface::regenerate_decorative), and [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk) can be used.",           name="map_gen_settings",           optional=false,           order=2,           read_type="MapGenSettings",           write_type="MapGenSettings"         },         {           description="The minimal brightness during the night. Defaults to `0.15`. This has an effect on both rendering and game mechanics such as biter spawns and solar power.",           name="min_brightness",           optional=false,           order=20,           read_type="double",           write_type="double"         },         {           description="The daytime when morning starts.",           name="morning",           optional=false,           order=17,           read_type="double",           write_type="double"         },         {           description="The name of this surface. Names are unique among surfaces.\n\nThe default surface can't be renamed.",           name="name",           optional=false,           order=0,           raises={             {               description="",               name="on_surface_renamed",               optional=false,               order=0,               timeframe="instantly"             }           },           read_type="string",           write_type="string"         },         {           description="Is no-enemies mode enabled on this surface?",           name="no_enemies_mode",           optional=false,           order=11,           read_type="boolean",           write_type="boolean"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=34,           read_type="string"         },         {           description="Is peaceful mode enabled on this surface?",           name="peaceful_mode",           optional=false,           order=10,           read_type="boolean",           write_type="boolean"         },         {           description="The planet associated with this surface, if there is one.\n\nUse [LuaPlanet::associate_surface](runtime:LuaPlanet::associate_surface) to create a new association with a planet.",           name="planet",           optional=true,           order=25,           read_type="LuaPlanet"         },         {           description="",           name="platform",           optional=true,           order=24,           read_type="LuaSpacePlatform"         },         {           description="The type of pollutant enabled on the surface, or `nil` if no pollutant is enabled.",           name="pollutant_type",           optional=true,           order=28,           read_type="LuaAirbornePollutantPrototype"         },         {           description="The pollution statistics for this surface.",           name="pollution_statistics",           optional=false,           order=31,           read_type="LuaFlowStatistics"         },         {           description="If clouds are shown on this surface. If false, clouds are never shown. If true the player must also have clouds enabled in graphics settings for them to be shown.",           name="show_clouds",           optional=false,           order=22,           read_type="boolean",           write_type="boolean"         },         {           description="The multiplier of solar power on this surface. Cannot be less than 0.",           name="solar_power_multiplier",           optional=false,           order=19,           read_type="double",           write_type="double"         },         {           description="The number of ticks per day for this surface.",           name="ticks_per_day",           optional=false,           order=13,           read_type="uint",           write_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=33,           read_type="boolean"         },         {           description="Current wind direction.",           name="wind_orientation",           optional=false,           order=8,           read_type="RealOrientation",           write_type="RealOrientation"         },         {           description="Change in wind orientation per tick.",           name="wind_orientation_change",           optional=false,           order=9,           read_type="double",           write_type="double"         },         {           description="Current wind speed in tiles per tick.",           name="wind_speed",           optional=false,           order=7,           read_type="double",           write_type="double"         }       },       description="A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces are uniquely identified by their name. Every game contains at least the surface \"nauvis\".",       methods={         {           description="Adds the given script area.",           format={             takes_table=false           },           name="add_script_area",           order=63,           parameters={             {               description="",               name="area",               optional=false,               order=0,               type="ScriptArea"             }           },           return_values={             {               description="The id of the created area.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Adds the given script position.",           format={             takes_table=false           },           name="add_script_position",           order=68,           parameters={             {               description="",               name="position",               optional=false,               order=0,               type="ScriptPosition"             }           },           return_values={             {               description="The id of the created position.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Sets the given area to the checkerboard lab tiles.",           format={             takes_table=false           },           name="build_checkerboard",           order=79,           parameters={             {               description="The tile area.",               name="area",               optional=false,               order=0,               type="BoundingBox"             }           },           return_values={}         },         {           description="Send a group to build a new base.\n\nThe specified force must be AI-controlled; i.e. `force.ai_controllable` must be `true`.",           format={             takes_table=false           },           name="build_enemy_base",           order=23,           parameters={             {               description="Force the new base will belong to. Defaults to enemy.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="Location of the new base.",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Number of biters to send for the base-building task.",               name="unit_count",               optional=false,               order=1,               type="uint"             }           },           return_values={}         },         {           description="Calculate values for a list of tile properties at a list of positions. Requests for unrecognized properties will be ignored, so this can also be used to test whether those properties exist.",           format={             takes_table=false           },           name="calculate_tile_properties",           order=76,           parameters={             {               description="Positions for which to calculate property values.",               name="positions",               optional=false,               order=1,               type={                 complex_type="array",                 value="MapPosition"               }             },             {               description="Names of properties (`\"elevation\"`, etc) to calculate.",               name="property_names",               optional=false,               order=0,               type={                 complex_type="array",                 value="string"               }             }           },           return_values={             {               description="Table of property value lists, keyed by property name.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value={                   complex_type="array",                   value="double"                 }               }             }           }         },         {           description="If there exists an entity at the given location that can be fast-replaced with the given entity parameters.",           format={             table_optional=false,             takes_table=true           },           name="can_fast_replace",           order=3,           parameters={             {               description="Direction the entity would be placed. Defaults to `north`.",               name="direction",               optional=true,               order=2,               type="defines.direction"             },             {               description="The force that would place the entity. Defaults to the `\"neutral\"` force.",               name="force",               optional=true,               order=3,               type="ForceID"             },             {               description="Name of the entity to check.",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="Where the entity would be placed.",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Check for collisions with terrain or other entities.",           format={             table_optional=false,             takes_table=true           },           name="can_place_entity",           order=2,           parameters={             {               description="Which type of check should be carried out. Defaults to `ghost_revive`.",               name="build_check_type",               optional=true,               order=4,               type="defines.build_check_type"             },             {               description="Direction of the placed entity. Defaults to `north`.",               name="direction",               optional=true,               order=2,               type="defines.direction"             },             {               description="The force that would place the entity. Defaults to the `\"neutral\"` force.",               name="force",               optional=true,               order=3,               type="ForceID"             },             {               description="If `true`, entities that can be marked for deconstruction are ignored. Only used if `build_check_type` is either `manual_ghost`, `script_ghost` or `blueprint_ghost`. Defaults to `false`.",               name="forced",               optional=true,               order=5,               type="boolean"             },             {               description="The prototype name of the entity contained in the ghost. Only used if `name` is `entity-ghost`.",               name="inner_name",               optional=true,               order=6,               type="string"             },             {               description="Name of the entity prototype to check.",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="Where the entity would be placed.",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Cancel a deconstruction order.",           format={             table_optional=false,             takes_table=true           },           name="cancel_deconstruct_area",           order=36,           parameters={             {               description="The area to cancel deconstruction orders in.",               name="area",               optional=false,               order=0,               type="BoundingBox"             },             {               description="The force whose deconstruction orders to cancel.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The deconstruction item to use if any.",               name="item",               optional=true,               order=4,               type="LuaItemStack"             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",               name="item_index",               optional=true,               order=5,               type="uint"             },             {               description="The player to set the last_user to, if any.  Also the player whose undo queue this action should be added to.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the cancel deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=6,               type="boolean"             }           },           raises={             {               description="Raised for every entity whose deconstruction has been successfully cancelled.",               name="on_cancelled_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Cancel a upgrade order.",           format={             table_optional=false,             takes_table=true           },           name="cancel_upgrade_area",           order=38,           parameters={             {               description="The area to cancel upgrade orders in.",               name="area",               optional=false,               order=0,               type="BoundingBox"             },             {               description="The force whose upgrade orders to cancel.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The upgrade item to use.",               name="item",               optional=false,               order=4,               type="LuaItemStack"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             }           },           raises={             {               description="Raised for every entity whose upgrade has been successfully cancelled.",               name="on_cancelled_upgrade",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Clears this surface deleting all entities and chunks on it.",           format={             takes_table=false           },           name="clear",           order=58,           parameters={             {               description="Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed). Defaults to `false`.",               name="ignore_characters",               optional=true,               order=0,               type="boolean"             }           },           raises={             {               description="",               name="on_pre_surface_cleared",               optional=false,               order=0,               timeframe="future_tick"             },             {               description="",               name="on_surface_cleared",               optional=false,               order=1,               timeframe="future_tick"             }           },           return_values={}         },         {           description="Completely removes hidden and double hidden tiles data on this surface.",           format={             takes_table=false           },           name="clear_hidden_tiles",           order=85,           parameters={},           return_values={}         },         {           description="Clears all pollution on this surface.",           format={             takes_table=false           },           name="clear_pollution",           order=51,           parameters={},           return_values={}         },         {           description="Clones the given area.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",           format={             table_optional=false,             takes_table=true           },           name="clone_area",           order=55,           parameters={             {               description="If the destination decoratives should be cleared",               name="clear_destination_decoratives",               optional=true,               order=8,               type="boolean"             },             {               description="If the destination entities should be cleared",               name="clear_destination_entities",               optional=true,               order=7,               type="boolean"             },             {               description="If decoratives should be cloned",               name="clone_decoratives",               optional=true,               order=6,               type="boolean"             },             {               description="If entities should be cloned",               name="clone_entities",               optional=true,               order=5,               type="boolean"             },             {               description="If tiles should be cloned",               name="clone_tiles",               optional=true,               order=4,               type="boolean"             },             {               description="If true, the building effect smoke will be shown around the new entities. Defaults to `false`.",               name="create_build_effect_smoke",               optional=true,               order=10,               type="boolean"             },             {               description="",               name="destination_area",               optional=false,               order=1,               type="BoundingBox"             },             {               description="",               name="destination_force",               optional=true,               order=3,               type="ForceID"             },             {               description="",               name="destination_surface",               optional=true,               order=2,               type="SurfaceIdentification"             },             {               description="If the destination surface should be expanded when destination_area is outside current bounds. Defaults to `false`.",               name="expand_map",               optional=true,               order=9,               type="boolean"             },             {               description="",               name="source_area",               optional=false,               order=0,               type="BoundingBox"             }           },           raises={             {               description="Raised after the individual `on_entity_cloned` events.",               name="on_area_cloned",               optional=false,               order=1,               timeframe="instantly"             },             {               description="Raised for every entity that was cloned.",               name="on_entity_cloned",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Clones the given area.\n\n[defines.events.on_entity_cloned](runtime:defines.events.on_entity_cloned) is raised for each entity, and then [defines.events.on_area_cloned](runtime:defines.events.on_area_cloned) is raised.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",           format={             table_optional=false,             takes_table=true           },           name="clone_brush",           order=56,           parameters={             {               description="If the destination decoratives should be cleared",               name="clear_destination_decoratives",               optional=true,               order=9,               type="boolean"             },             {               description="If the destination entities should be cleared",               name="clear_destination_entities",               optional=true,               order=8,               type="boolean"             },             {               description="If decoratives should be cloned",               name="clone_decoratives",               optional=true,               order=7,               type="boolean"             },             {               description="If entities should be cloned",               name="clone_entities",               optional=true,               order=6,               type="boolean"             },             {               description="If tiles should be cloned",               name="clone_tiles",               optional=true,               order=5,               type="boolean"             },             {               description="If true, the building effect smoke will be shown around the new entities.",               name="create_build_effect_smoke",               optional=true,               order=12,               type="boolean"             },             {               description="",               name="destination_force",               optional=true,               order=4,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaForce",                   "string"                 }               }             },             {               description="",               name="destination_offset",               optional=false,               order=1,               type="TilePosition"             },             {               description="",               name="destination_surface",               optional=true,               order=3,               type="SurfaceIdentification"             },             {               description="If the destination surface should be expanded when destination_area is outside current bounds. Defaults to `false`.",               name="expand_map",               optional=true,               order=10,               type="boolean"             },             {               description="If manual-style collision checks should be done.",               name="manual_collision_mode",               optional=true,               order=11,               type="boolean"             },             {               description="",               name="source_offset",               optional=false,               order=0,               type="TilePosition"             },             {               description="",               name="source_positions",               optional=false,               order=2,               type={                 complex_type="array",                 value="TilePosition"               }             }           },           return_values={}         },         {           description="Clones the given entities.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",           format={             table_optional=false,             takes_table=true           },           name="clone_entities",           order=57,           parameters={             {               description="If true, the building effect smoke will be shown around the new entities.",               name="create_build_effect_smoke",               optional=true,               order=5,               type="boolean"             },             {               description="",               name="destination_force",               optional=true,               order=3,               type="ForceID"             },             {               description="",               name="destination_offset",               optional=false,               order=1,               type="Vector"             },             {               description="",               name="destination_surface",               optional=true,               order=2,               type="SurfaceIdentification"             },             {               description="",               name="entities",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             },             {               description="",               name="snap_to_grid",               optional=true,               order=4,               type="boolean"             }           },           raises={             {               description="Raised for every entity that was cloned.",               name="on_entity_cloned",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Count entities of given type or name in a given area. Works just like [LuaSurface::find_entities_filtered](runtime:LuaSurface::find_entities_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of entities.\n\n- If no `area` or `position` are given, the entire surface is searched.\n\n- If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).\n\n- If `position` and `radius` are given, this returns entities in the radius of the position.\n\n- If `area` is specified, this returns entities colliding with that area.",           format={             takes_table=false           },           name="count_entities_filtered",           order=8,           parameters={             {               description="",               name="filter",               optional=false,               order=0,               type="EntitySearchFilters"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Count tiles of a given name in a given area. Works just like [LuaSurface::find_tiles_filtered](runtime:LuaSurface::find_tiles_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of tiles.\n\nIf no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.",           format={             takes_table=false           },           name="count_tiles_filtered",           order=9,           parameters={             {               description="",               name="filter",               optional=false,               order=0,               type="TileSearchFilters"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Adds the given decoratives to the surface.\n\nThis will merge decoratives of the same type that already exist effectively increasing the \"amount\" field.",           format={             table_optional=false,             takes_table=true           },           name="create_decoratives",           order=49,           parameters={             {               description="If collision should be checked against entities/tiles.",               name="check_collision",               optional=true,               order=0,               type="boolean"             },             {               description="",               name="decoratives",               optional=false,               order=1,               type={                 complex_type="array",                 value="Decorative"               }             }           },           return_values={}         },         {           description="This method only works when used in simulations.\n\nPlaces entities via the given blueprint string. These entities are force-built.",           format={             table_optional=false,             takes_table=true           },           name="create_entities_from_blueprint_string",           order=78,           parameters={             {               description="The player that placed the blueprint. Defaults to `nil`.",               name="by_player",               optional=true,               order=6,               type="PlayerIdentification"             },             {               description="The direction to place the blueprint in. Defaults to north.",               name="direction",               optional=true,               order=3,               type="defines.direction"             },             {               description="Whether to flip the blueprint horizontally. Defaults to `false`.",               name="flip_horizontal",               optional=true,               order=4,               type="boolean"             },             {               description="Whether to flip the blueprint vertically. Defaults to `false`.",               name="flip_vertical",               optional=true,               order=5,               type="boolean"             },             {               description="The force to place the blueprint for. Defaults to the player force.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="The position to place the blueprint at.",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="The blueprint string to import.",               name="string",               optional=false,               order=0,               type="string"             }           },           return_values={             {               description="If the blueprint string was invalid, `1` is returned. Otherwise, `nil` is returned.",               optional=true,               order=0,               type="int"             }           }         },         {           description="Create an entity on this surface.",           examples={             "```\nlocal asm = game.surfaces[1].create_entity{name = \"assembling-machine-1\", position = {15, 3}, force = game.forces.player, recipe = \"iron-stick\"}\n```",             "```\n-- Creates a filter inserter with circuit conditions and a filter\ngame.surfaces[1].create_entity{\n  name = \"filter-inserter\", position = {20, 15}, force = game.player.force,\n  conditions =\n  {\n    red = {name = \"wood\", count = 3, operator = \">\"},\n    green = {name = \"iron-ore\", count = 1, operator = \"<\"},\n    logistics = {name = \"wood\", count = 3, operator = \"=\"}\n  },\n  filters = {{index = 1, name = \"iron-ore\"}}\n}\n```",             "```\n-- Creates a requester chest already set to request 128 iron plates.\ngame.surfaces[1].create_entity{\n  name = \"requester-chest\", position = {game.player.position.x+3, game.player.position.y},\n  force = game.player.force, request_filters = {{index = 1, name = \"iron-plate\", count = 128}}\n}\n```",             "```\ngame.surfaces[1].create_entity{name = \"big-biter\", position = {15, 3}, force = game.forces.player} -- Friendly biter\ngame.surfaces[1].create_entity{name = \"medium-biter\", position = {15, 3}, force = game.forces.enemy} -- Enemy biter\n```",             "```\n-- Creates a basic inserter at the player's location facing north\ngame.surfaces[1].create_entity{name = \"inserter\", position = game.player.position, direction = defines.direction.north}\n```"           },           format={             table_optional=false,             takes_table=true           },           name="create_entity",           order=19,           parameters={             {               description="Cause entity / force. The entity or force that triggered the chain of events that led to this entity being created. Used for beams, projectiles, stickers, etc. so that the damage receiver can know which entity or force to retaliate against.",               name="cause",               optional=true,               order=7,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "ForceID"                 }               }             },             {               description="If fast_replace is true simulate fast replace using this character.",               name="character",               optional=true,               order=12,               type="LuaEntity"             },             {               description="If false, the building effect smoke will not be shown around the new entity. Defaults to `true`.",               name="create_build_effect_smoke",               optional=true,               order=15,               type="boolean"             },             {               description="Desired orientation of the entity after creation.",               name="direction",               optional=true,               order=2,               type="defines.direction"             },             {               description="If true, building will attempt to simulate fast-replace building. Defaults to `false`.",               name="fast_replace",               optional=true,               order=9,               type="boolean"             },             {               description="Force of the entity, default is enemy.",               name="force",               optional=true,               order=4,               type="ForceID"             },             {               description="If provided, the entity will attempt to pull stored values from this item (for example; creating a spidertron from a previously named and mined spidertron)",               name="item",               optional=true,               order=18,               type="LuaItemStack"             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",               name="item_index",               optional=true,               order=10,               type="uint"             },             {               description="If true, any characters that are in the way of the entity are teleported out of the way.",               name="move_stuck_players",               optional=true,               order=17,               type="boolean"             },             {               description="The entity prototype name to create.",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="If given set the last_user to this player. If fast_replace is true simulate fast replace using this player. Also the player whose undo queue this action should be added to.",               name="player",               optional=true,               order=11,               type="PlayerIdentification"             },             {               description="Where to create the entity.",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="If true, colliding ghosts and corpses will not be removed by the creation of some entity types. Defaults to `false`.",               name="preserve_ghosts_and_corpses",               optional=true,               order=19,               type="boolean"             },             {               description="Quality of the entity to be created. Defaults to `normal`.",               name="quality",               optional=true,               order=3,               type="QualityID"             },             {               description="If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Defaults to `false`.",               name="raise_built",               optional=true,               order=14,               type="boolean"             },             {               description="If false the exact position given is used to instead of snapping to the normal entity grid. This only applies if the entity normally snaps to the grid.",               name="snap_to_grid",               optional=true,               order=8,               type="boolean"             },             {               description="Source entity. Used for beams, projectiles, and highlight-boxes.",               name="source",               optional=true,               order=6,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "MapPosition"                 }               }             },             {               description="If true, entity types that have [spawn_decoration](runtime:LuaEntityPrototype::spawn_decorations) property will apply triggers defined in the property. Defaults to `false`.",               name="spawn_decorations",               optional=true,               order=16,               type="boolean"             },             {               description="If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground. Defaults to `true`.",               name="spill",               optional=true,               order=13,               type="boolean"             },             {               description="Entity with health for the new entity to target.",               name="target",               optional=true,               order=5,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaEntity",                   "MapPosition"                 }               }             }           },           raises={             {               description="Raised if the `raise_built` flag was set and the entity was successfully created.",               name="script_raised_built",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The created entity or `nil` if the creation failed.",               optional=true,               order=0,               type="LuaEntity"             }           },           variant_parameter_description="Other attributes may be specified depending on the type of entity:",           variant_parameter_groups={             {               description="",               name="artillery-flare",               order=17,               parameters={                 {                   description="",                   name="frame_speed",                   optional=false,                   order=3,                   type="float"                 },                 {                   description="",                   name="height",                   optional=false,                   order=1,                   type="float"                 },                 {                   description="",                   name="movement",                   optional=false,                   order=0,                   type="Vector"                 },                 {                   description="",                   name="vertical_speed",                   optional=false,                   order=2,                   type="float"                 }               }             },             {               description="",               name="artillery-projectile",               order=19,               parameters={                 {                   description="Defaults to 1.",                   name="speed",                   optional=true,                   order=0,                   type="double"                 }               }             },             {               description="",               name="assembling-machine",               order=0,               parameters={                 {                   description="",                   name="recipe",                   optional=true,                   order=0,                   type="string"                 }               }             },             {               description="",               name="beam",               order=1,               parameters={                 {                   description="If set, beam will be destroyed after this value of ticks.",                   name="duration",                   optional=true,                   order=3,                   type="uint"                 },                 {                   description="If set, beam will be destroyed when distance between source and target is greater than this value.",                   name="max_length",                   optional=true,                   order=2,                   type="uint"                 },                 {                   description="Source position will be offset by this value when rendering the beam.",                   name="source_offset",                   optional=true,                   order=4,                   type="Vector"                 },                 {                   description="Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).",                   name="source_position",                   optional=true,                   order=1,                   type="MapPosition"                 },                 {                   description="Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).",                   name="target_position",                   optional=true,                   order=0,                   type="MapPosition"                 }               }             },             {               description="",               name="character-corpse",               order=25,               parameters={                 {                   description="",                   name="inventory_size",                   optional=true,                   order=0,                   type="uint"                 },                 {                   description="",                   name="player_index",                   optional=true,                   order=1,                   type="uint"                 }               }             },             {               description="",               name="cliff",               order=4,               parameters={                 {                   description="If not specified, `direction` will be used instead.",                   name="cliff_orientation",                   optional=true,                   order=0,                   type="CliffOrientation"                 }               }             },             {               description="",               name="container",               order=3,               parameters={                 {                   description="Inventory index where the red limiting bar should be set.",                   name="bar",                   optional=true,                   order=0,                   type="uint"                 }               }             },             {               description="",               name="display-panel",               order=5,               parameters={                 {                   description="",                   name="always_show",                   optional=true,                   order=2,                   type="boolean"                 },                 {                   description="",                   name="icon",                   optional=true,                   order=1,                   type="SignalID"                 },                 {                   description="",                   name="show_in_chart",                   optional=true,                   order=3,                   type="boolean"                 },                 {                   description="",                   name="text",                   optional=true,                   order=0,                   type="LocalisedString"                 }               }             },             {               description="",               name="electric-pole",               order=30,               parameters={                 {                   description="True by default. If set to false, created electric pole will not auto connect to neighbour electric poles.",                   name="auto_connect",                   optional=true,                   order=0,                   type="boolean"                 }               }             },             {               description="",               name="entity-ghost",               order=6,               parameters={                 {                   description="The prototype name of the entity contained in the ghost.",                   name="inner_name",                   optional=false,                   order=0,                   type="string"                 },                 {                   description="The [LuaEntity::tags](runtime:LuaEntity::tags) associated with this entity ghost.",                   name="tags",                   optional=true,                   order=1,                   type="Tags"                 }               }             },             {               description="",               name="fire",               order=8,               parameters={                 {                   description="With how many small flames should the fire on ground be created. Defaults to the initial flame count of the prototype.",                   name="initial_ground_flame_count",                   optional=true,                   order=0,                   type="uint8"                 }               }             },             {               description="",               name="highlight-box",               order=26,               parameters={                 {                   description="The blink interval for this highlight box. Makes it be shown every `blink_interval` ticks. Defaults to `0` (constantly shown).",                   name="blink_interval",                   optional=true,                   order=3,                   type="uint"                 },                 {                   description="The bounding box defining the highlight box using absolute map coordinates. If specified, the general `position` parameter still needs to be present, but will be ignored. If not specified, the game falls back to the `source` parameter first, then the `target` parameter second. One of these three parameters need to be specified.",                   name="bounding_box",                   optional=true,                   order=0,                   type="BoundingBox"                 },                 {                   description="Specifies the graphical appearance (color) of the highlight box. Defaults to `\"electricity\"`.",                   name="box_type",                   optional=true,                   order=1,                   type="CursorBoxRenderType"                 },                 {                   description="The player to render the highlight box for. If not provided, it will be rendered for all players.",                   name="render_player_index",                   optional=true,                   order=2,                   type="uint"                 },                 {                   description="The amount of time in ticks that the highlight box will exist for. Defaults to existing forever.",                   name="time_to_live",                   optional=true,                   order=4,                   type="uint"                 }               }             },             {               description="",               name="inserter",               order=10,               parameters={                 {                   description="",                   name="conditions",                   optional=false,                   order=0,                   type="InserterCircuitConditions"                 },                 {                   description="",                   name="filters",                   optional=true,                   order=1,                   type={                     complex_type="array",                     value="InserterItemFilter"                   }                 }               }             },             {               description="",               name="item-entity",               order=11,               parameters={                 {                   description="The stack of items to create. Either the name of an item, which will create a full stack, or a detailed item stack definition.",                   name="stack",                   optional=false,                   order=0,                   type={                     complex_type="union",                     full_format=false,                     options={                       "string",                       "ItemStackDefinition"                     }                   }                 }               }             },             {               description="",               name="item-request-proxy",               order=12,               parameters={                 {                   description="The stacks of items to be delivered to target entity from logistic network.",                   name="modules",                   optional=false,                   order=1,                   type={                     complex_type="array",                     value="BlueprintInsertPlan"                   }                 },                 {                   description="Specification of items to be removed from the target entity by the logistic network.",                   name="removal_plan",                   optional=true,                   order=2,                   type={                     complex_type="array",                     value="BlueprintInsertPlan"                   }                 },                 {                   description="The target items are to be delivered to.",                   name="target",                   optional=false,                   order=0,                   type="LuaEntity"                 }               }             },             {               description="",               name="lamp",               order=31,               parameters={                 {                   description="Defaults to false.",                   name="always_on",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="Defaults to white.",                   name="color",                   optional=true,                   order=0,                   type="Color"                 }               }             },             {               description="",               name="loader",               order=22,               parameters={                 {                   description="",                   name="filters",                   optional=true,                   order=1,                   type={                     complex_type="array",                     value="InventoryFilter"                   }                 },                 {                   description="Defaults to `\"input\"`.",                   name="type",                   optional=true,                   order=0,                   type={                     complex_type="union",                     full_format=false,                     options={                       {                         complex_type="literal",                         value="output"                       },                       {                         complex_type="literal",                         value="input"                       }                     }                   }                 }               }             },             {               description="",               name="loader-1x1",               order=23,               parameters={                 {                   description="",                   name="filters",                   optional=true,                   order=1,                   type={                     complex_type="array",                     value="InventoryFilter"                   }                 },                 {                   description="Defaults to `\"input\"`.",                   name="type",                   optional=true,                   order=0,                   type={                     complex_type="union",                     full_format=false,                     options={                       {                         complex_type="literal",                         value="output"                       },                       {                         complex_type="literal",                         value="input"                       }                     }                   }                 }               }             },             {               description="",               name="locomotive",               order=14,               parameters={                 {                   description="Whether the locomotive should snap to an adjacent train stop. Defaults to true.",                   name="snap_to_train_stop",                   optional=true,                   order=0,                   type="boolean"                 }               }             },             {               description="",               name="logistic-container",               order=15,               parameters={                 {                   description="",                   name="request_filters",                   optional=true,                   order=0,                   type={                     complex_type="array",                     value="InventoryFilter"                   }                 }               }             },             {               description="",               name="particle",               order=16,               parameters={                 {                   description="",                   name="frame_speed",                   optional=false,                   order=3,                   type="float"                 },                 {                   description="",                   name="height",                   optional=false,                   order=1,                   type="float"                 },                 {                   description="",                   name="movement",                   optional=false,                   order=0,                   type="Vector"                 },                 {                   description="",                   name="vertical_speed",                   optional=false,                   order=2,                   type="float"                 }               }             },             {               description="",               name="plant",               order=9,               parameters={                 {                   description="The tick the plant will be fully grown. If not specified, the plants normal growth time is used.",                   name="tick_grown",                   optional=true,                   order=0,                   type="uint"                 }               }             },             {               description="",               name="programmable-speaker",               order=24,               parameters={                 {                   description="",                   name="alert_parameters",                   optional=true,                   order=1,                   type="ProgrammableSpeakerAlertParameters"                 },                 {                   description="",                   name="parameters",                   optional=true,                   order=0,                   type="ProgrammableSpeakerParameters"                 }               }             },             {               description="",               name="projectile",               order=18,               parameters={                 {                   description="Defaults to 1000.",                   name="max_range",                   optional=true,                   order=1,                   type="double"                 },                 {                   description="Defaults to 0.",                   name="speed",                   optional=true,                   order=0,                   type="double"                 }               }             },             {               description="",               name="projectile",               order=34,               parameters={                 {                   description="",                   name="base_damage_modifiers",                   optional=true,                   order=0,                   type="TriggerModifierData"                 },                 {                   description="",                   name="bonus_damage_modifiers",                   optional=true,                   order=1,                   type="TriggerModifierData"                 }               }             },             {               description="",               name="rail-chain-signal",               order=33,               parameters={                 {                   description="Defaults to [defines.rail_layer.ground](runtime:defines.rail_layer.ground).",                   name="rail_layer",                   optional=true,                   order=0,                   type="defines.rail_layer"                 }               }             },             {               description="",               name="rail-signal",               order=32,               parameters={                 {                   description="Defaults to [defines.rail_layer.ground](runtime:defines.rail_layer.ground).",                   name="rail_layer",                   optional=true,                   order=0,                   type="defines.rail_layer"                 }               }             },             {               description="",               name="resource",               order=20,               parameters={                 {                   description="",                   name="amount",                   optional=false,                   order=0,                   type="uint"                 },                 {                   description="If colliding cliffs are removed. Default is true.",                   name="enable_cliff_removal",                   optional=true,                   order=2,                   type="boolean"                 },                 {                   description="If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.",                   name="enable_tree_removal",                   optional=true,                   order=1,                   type="boolean"                 },                 {                   description="If true, the resource entity will be placed to center of a tile as map generator would place it, otherwise standard non-resource grid alignment rules will apply. Default is true.",                   name="snap_to_tile_center",                   optional=true,                   order=3,                   type="boolean"                 }               }             },             {               description="",               name="rolling-stock",               order=13,               parameters={                 {                   description="The color of this rolling stock, if it supports colors.",                   name="color",                   optional=true,                   order=1,                   type="Color"                 },                 {                   description="The orientation of this rolling stock.",                   name="orientation",                   optional=true,                   order=0,                   type="RealOrientation"                 }               }             },             {               description="",               name="simple-entity-with-force",               order=29,               parameters={                 {                   description="",                   name="render_player_index",                   optional=true,                   order=0,                   type="uint"                 }               }             },             {               description="",               name="simple-entity-with-owner",               order=28,               parameters={                 {                   description="",                   name="render_player_index",                   optional=true,                   order=0,                   type="uint"                 }               }             },             {               description="",               name="speech-bubble",               order=27,               parameters={                 {                   description="",                   name="lifetime",                   optional=true,                   order=1,                   type="uint"                 },                 {                   description="",                   name="text",                   optional=false,                   order=0,                   type="LocalisedString"                 }               }             },             {               description="",               name="stream",               order=2,               parameters={                 {                   description="Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).",                   name="source_position",                   optional=true,                   order=1,                   type="MapPosition"                 },                 {                   description="Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).",                   name="target_position",                   optional=true,                   order=0,                   type="MapPosition"                 }               }             },             {               description="",               name="tile-ghost",               order=7,               parameters={                 {                   description="The prototype name of the tile contained in the ghost.",                   name="inner_name",                   optional=false,                   order=0,                   type="string"                 }               }             },             {               description="",               name="underground-belt",               order=21,               parameters={                 {                   description="Defaults to `\"input\"`.",                   name="type",                   optional=true,                   order=0,                   type={                     complex_type="union",                     full_format=false,                     options={                       {                         complex_type="literal",                         value="output"                       },                       {                         complex_type="literal",                         value="input"                       }                     }                   }                 }               }             }           }         },         {           description="Creates a global electric network for this surface, if one doesn't exist already.",           format={             takes_table=false           },           name="create_global_electric_network",           order=82,           parameters={},           return_values={}         },         {           description="Creates a particle at the given location",           format={             table_optional=false,             takes_table=true           },           name="create_particle",           order=21,           parameters={             {               description="",               name="frame_speed",               optional=false,               order=5,               type="float"             },             {               description="",               name="height",               optional=false,               order=3,               type="float"             },             {               description="",               name="movement",               optional=false,               order=2,               type="Vector"             },             {               description="The particle name.",               name="name",               optional=false,               order=0,               type="ParticleID"             },             {               description="Where to create the particle.",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="",               name="vertical_speed",               optional=false,               order=4,               type="float"             }           },           return_values={}         },         {           description="",           format={             table_optional=false,             takes_table=true           },           name="create_trivial_smoke",           order=20,           parameters={             {               description="The smoke prototype name to create.",               name="name",               optional=false,               order=0,               type="TrivialSmokeID"             },             {               description="Where to create the smoke.",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={}         },         {           description="Create a new unit group at a given position.",           format={             table_optional=false,             takes_table=true           },           name="create_unit_group",           order=22,           parameters={             {               description="Force of the new unit group. Defaults to `\"enemy\"`.",               name="force",               optional=true,               order=1,               type="ForceID"             },             {               description="Initial position of the new unit group.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           raises={             {               description="",               name="on_unit_group_created",               optional=false,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaCommandable"             }           }         },         {           description="Place a deconstruction request.",           format={             table_optional=false,             takes_table=true           },           name="deconstruct_area",           order=35,           parameters={             {               description="The area to mark for deconstruction.",               name="area",               optional=false,               order=0,               type="BoundingBox"             },             {               description="The force whose bots should perform the deconstruction.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The deconstruction item to use if any.",               name="item",               optional=true,               order=4,               type="LuaItemStack"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="If chunks covered by fog-of-war are skipped. Defaults to `false`.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             },             {               description="If the deconstruction is super-forced. Defaults to `false`.",               name="super_forced",               optional=true,               order=5,               type="boolean"             }           },           raises={             {               description="Raised for every entity that has been successfully marked for deconstruction.",               name="on_marked_for_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Whether the given decorative prototype collides at the given position and direction.",           format={             takes_table=false           },           name="decorative_prototype_collides",           order=75,           parameters={             {               description="The position to check.",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="The decorative prototype to check.",               name="prototype",               optional=false,               order=0,               type="DecorativeID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="",           format={             takes_table=false           },           name="delete_chunk",           order=44,           parameters={             {               description="The chunk position to delete",               name="position",               optional=false,               order=0,               type="ChunkPosition"             }           },           raises={             {               description="",               name="on_chunk_deleted",               optional=false,               order=1,               timeframe="future_tick"             },             {               description="",               name="on_pre_chunk_deleted",               optional=false,               order=0,               timeframe="future_tick"             }           },           return_values={}         },         {           description="Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.",           format={             table_optional=false,             takes_table=true           },           name="destroy_decoratives",           order=48,           parameters={             {               description="",               name="area",               optional=true,               order=0,               type="BoundingBox"             },             {               description="",               name="collision_mask",               optional=true,               order=3,               type={                 complex_type="union",                 full_format=false,                 options={                   "CollisionLayerID",                   {                     complex_type="array",                     value="CollisionLayerID"                   },                   {                     complex_type="dictionary",                     key="CollisionLayerID",                     value={                       complex_type="literal",                       value=true                     }                   }                 }               }             },             {               description="Soft decoratives can be drawn over rails.",               name="exclude_soft",               optional=true,               order=6,               type="boolean"             },             {               description="",               name="from_layer",               optional=true,               order=4,               type="string"             },             {               description="If the filters should be inverted.",               name="invert",               optional=true,               order=8,               type="boolean"             },             {               description="",               name="limit",               optional=true,               order=7,               type="uint"             },             {               description="",               name="name",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "DecorativeID",                   {                     complex_type="array",                     value="DecorativeID"                   }                 }               }             },             {               description="",               name="position",               optional=true,               order=1,               type="TilePosition"             },             {               description="",               name="to_layer",               optional=true,               order=5,               type="string"             }           },           return_values={}         },         {           description="Destroys the global electric network for this surface, if it exists.",           format={             takes_table=false           },           name="destroy_global_electric_network",           order=83,           parameters={},           return_values={}         },         {           description="Sets the given script area to the new values.",           format={             takes_table=false           },           name="edit_script_area",           order=62,           parameters={             {               description="",               name="area",               optional=false,               order=1,               type="ScriptArea"             },             {               description="The area to edit.",               name="id",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Sets the given script position to the new values.",           format={             takes_table=false           },           name="edit_script_position",           order=67,           parameters={             {               description="The position to edit.",               name="id",               optional=false,               order=0,               type="uint"             },             {               description="",               name="position",               optional=false,               order=1,               type="ScriptPosition"             }           },           return_values={}         },         {           description="Whether the given entity prototype collides at the given position and direction.",           format={             takes_table=false           },           name="entity_prototype_collides",           order=74,           parameters={             {               description="",               name="direction",               optional=true,               order=3,               type="defines.direction"             },             {               description="The position to check.",               name="position",               optional=false,               order=1,               type="MapPosition"             },             {               description="The entity prototype to check.",               name="prototype",               optional=false,               order=0,               type="EntityID"             },             {               description="If the map generation bounding box should be used instead of the collision bounding box.",               name="use_map_generation_bounding_box",               optional=false,               order=2,               type="boolean"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Creates lightning. If other entities which can be lightning targets are nearby, the final position will be adjusted.",           format={             table_optional=false,             takes_table=true           },           name="execute_lightning",           order=84,           parameters={             {               description="",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={}         },         {           description="Find the logistic network with a cell closest to a given position.",           format={             takes_table=false           },           name="find_closest_logistic_network_by_position",           order=33,           parameters={             {               description="Force the logistic network should belong to.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="The found network or `nil` if no such network was found.",               optional=true,               order=0,               type="LuaLogisticNetwork"             }           }         },         {           description="Find decoratives of a given name in a given area.\n\nIf no filters are given, returns all decoratives in the search area. If multiple filters are specified, returns only decoratives matching every given filter. If no area and no position are given, the entire surface is searched.",           examples={             "```\ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, name = \"sand-decal\"} -- gets all sand-decals in the rectangle\ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 decoratives in the rectangle\n```"           },           format={             table_optional=false,             takes_table=true           },           name="find_decoratives_filtered",           order=50,           parameters={             {               description="",               name="area",               optional=true,               order=0,               type="BoundingBox"             },             {               description="",               name="collision_mask",               optional=true,               order=3,               type={                 complex_type="union",                 full_format=false,                 options={                   "CollisionLayerID",                   {                     complex_type="array",                     value="CollisionLayerID"                   },                   {                     complex_type="dictionary",                     key="CollisionLayerID",                     value={                       complex_type="literal",                       value=true                     }                   }                 }               }             },             {               description="Soft decoratives can be drawn over rails.",               name="exclude_soft",               optional=true,               order=6,               type="boolean"             },             {               description="",               name="from_layer",               optional=true,               order=4,               type="string"             },             {               description="If the filters should be inverted.",               name="invert",               optional=true,               order=8,               type="boolean"             },             {               description="",               name="limit",               optional=true,               order=7,               type="uint"             },             {               description="",               name="name",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "DecorativeID",                   {                     complex_type="array",                     value="DecorativeID"                   }                 }               }             },             {               description="",               name="position",               optional=true,               order=1,               type="TilePosition"             },             {               description="",               name="to_layer",               optional=true,               order=5,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="DecorativeResult"               }             }           }         },         {           description="Find enemy units (entities with type \"unit\") of a given force within an area.\n\nThis is more efficient than [LuaSurface::find_entities](runtime:LuaSurface::find_entities).",           examples={             "```\n-- Find all units who would be interested to attack the player, within 100-tile area.\nlocal enemies = game.player.surface.find_enemy_units(game.player.position, 100)\n```"           },           format={             takes_table=false           },           name="find_enemy_units",           order=14,           parameters={             {               description="Center of the search area",               name="center",               optional=false,               order=0,               type="MapPosition"             },             {               description="Force to find enemies of. If not given, uses the player force.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="Radius of the circular search area",               name="radius",               optional=false,               order=1,               type="double"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Find entities in a given area.\n\nIf no area is given all entities on the surface are returned.",           examples={             "```\n-- Will evaluate to a list of all entities within given area.\ngame.surfaces[\"nauvis\"].find_entities({{-10, -10}, {10, 10}})\n```"           },           format={             takes_table=false           },           name="find_entities",           order=5,           parameters={             {               description="",               name="area",               optional=true,               order=0,               type="BoundingBox"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Find all entities of the given type or name in the given area.\n\nIf no filters (`name`, `type`, `force`, etc.) are given, this returns all entities in the search area. If multiple filters are specified, only entities matching all given filters are returned.\n\n- If no `area` or `position` are given, the entire surface is searched.\n\n- If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).\n\n- If `position` and `radius` are given, this returns the entities within the radius of the position. Looks for the center of entities.\n\n- If `area` is specified, this returns the entities colliding with that area.",           examples={             "```\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, type = \"resource\"} -- gets all resources in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = \"iron-ore\"} -- gets all iron ores in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = {\"iron-ore\", \"copper-ore\"}} -- gets all iron ore and copper ore in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, force = \"player\"}  -- gets player owned entities in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 entities in the rectangle\ngame.surfaces[1].find_entities_filtered{position = {0, 0}, radius = 10}  -- gets all entities within 10 tiles of the position [0,0].\n```"           },           format={             takes_table=false           },           name="find_entities_filtered",           order=6,           parameters={             {               description="",               name="filter",               optional=false,               order=0,               type="EntitySearchFilters"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Find an entity of the given name at the given position. This checks both the exact position and the bounding box of the entity.",           examples={             "```\ngame.player.selected.surface.find_entity('filter-inserter', {0,0})\n```"           },           format={             takes_table=false           },           name="find_entity",           order=4,           parameters={             {               description="Name of the entity to look for.",               name="entity",               optional=false,               order=0,               type="EntityWithQualityID"             },             {               description="Coordinates to look at.",               name="position",               optional=false,               order=1,               type="MapPosition"             }           },           return_values={             {               description="`nil` if no such entity is found.",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Find the logistic network that covers a given position.",           format={             takes_table=false           },           name="find_logistic_network_by_position",           order=32,           parameters={             {               description="Force the logistic network should belong to.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="The found network or `nil` if no such network was found.",               optional=true,               order=0,               type="LuaLogisticNetwork"             }           }         },         {           description="Finds all of the logistics networks whose construction area intersects with the given position.",           format={             takes_table=false           },           name="find_logistic_networks_by_construction_area",           order=34,           parameters={             {               description="Force the logistic networks should belong to.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaLogisticNetwork"               }             }           }         },         {           description="Find the enemy military target ([military entity](https://wiki.factorio.com/Military_units_and_structures)) closest to the given position.",           format={             table_optional=false,             takes_table=true           },           name="find_nearest_enemy",           order=16,           parameters={             {               description="The force the result will be an enemy of. Uses the player force if not specified.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="Radius of the circular search area.",               name="max_distance",               optional=false,               order=1,               type="double"             },             {               description="Center of the search area.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="The nearest enemy military target or `nil` if no enemy could be found within the given area.",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Find the enemy entity-with-owner closest to the given position.",           format={             table_optional=false,             takes_table=true           },           name="find_nearest_enemy_entity_with_owner",           order=17,           parameters={             {               description="The force the result will be an enemy of. Uses the player force if not specified.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="Radius of the circular search area.",               name="max_distance",               optional=false,               order=1,               type="double"             },             {               description="Center of the search area.",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="The nearest enemy entity-with-owner or `nil` if no enemy could be found within the given area.",               optional=false,               order=0,               type="LuaEntity"             }           }         },         {           description="Find a non-colliding position within a given radius.\n\nSpecial care needs to be taken when using a radius of `0`. The game will not stop searching until it finds a suitable position, so it is important to make sure such a position exists. One particular case where it would not be able to find a solution is running it before any chunks have been generated.",           format={             takes_table=false           },           name="find_non_colliding_position",           order=10,           parameters={             {               description="Center of the search area.",               name="center",               optional=false,               order=1,               type="MapPosition"             },             {               description="Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.",               name="force_to_tile_center",               optional=true,               order=4,               type="boolean"             },             {               description="Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="The step length from the given position as it searches, in tiles. Minimum value is `0.01`.",               name="precision",               optional=false,               order=3,               type="double"             },             {               description="Max distance from `center` to search in. A radius of `0` means an infinitely-large search area.",               name="radius",               optional=false,               order=2,               type="double"             }           },           return_values={             {               description="The non-colliding position. May be `nil` if no suitable position was found.",               optional=true,               order=0,               type="MapPosition"             }           }         },         {           description="Find a non-colliding position within a given rectangle.",           format={             takes_table=false           },           name="find_non_colliding_position_in_box",           order=11,           parameters={             {               description="Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.",               name="force_to_tile_center",               optional=true,               order=3,               type="boolean"             },             {               description="Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)",               name="name",               optional=false,               order=0,               type="EntityID"             },             {               description="The step length from the given position as it searches, in tiles. Minimum value is 0.01.",               name="precision",               optional=false,               order=2,               type="double"             },             {               description="The rectangle to search inside.",               name="search_space",               optional=false,               order=1,               type="BoundingBox"             }           },           return_values={             {               description="The non-colliding position. May be `nil` if no suitable position was found.",               optional=true,               order=0,               type="MapPosition"             }           }         },         {           description="Find all tiles of the given name in the given area.\n\nIf no filters are given, this returns all tiles in the search area.\n\nIf no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.",           format={             takes_table=false           },           name="find_tiles_filtered",           order=7,           parameters={             {               description="",               name="filter",               optional=false,               order=0,               type="TileSearchFilters"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaTile"               }             }           }         },         {           description="Find units (entities with type \"unit\") of a given force and force condition within a given area.\n\nThis is more efficient than [LuaSurface::find_entities](runtime:LuaSurface::find_entities).",           examples={             "```\n-- Find friendly units to \"player\" force\nlocal friendly_units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"friend\")\n```",             "```\n-- Find units of \"player\" force\nlocal units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"same\"})\n```"           },           format={             table_optional=false,             takes_table=true           },           name="find_units",           order=15,           parameters={             {               description="Box to find units within.",               name="area",               optional=false,               order=0,               type="BoundingBox"             },             {               description="Only forces which meet the condition will be included in the search.",               name="condition",               optional=false,               order=2,               type="ForceCondition"             },             {               description="Force performing the search.",               name="force",               optional=false,               order=1,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Blocks and generates all chunks that have been requested using all available threads.",           format={             takes_table=false           },           name="force_generate_chunk_requests",           order=30,           parameters={},           return_values={}         },         {           description="Get an iterator going over every chunk on this surface.",           format={             takes_table=false           },           name="get_chunks",           order=27,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaChunkIterator"             }           }         },         {           description="Gets the closest entity in the list to this position.",           format={             takes_table=false           },           name="get_closest",           order=72,           parameters={             {               description="The Entities to check.",               name="entities",               optional=false,               order=1,               type={                 complex_type="array",                 value="LuaEntity"               }             },             {               description="",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.\n\nThis won't find tiles in non-generated chunks.",           format={             takes_table=false           },           name="get_connected_tiles",           order=43,           parameters={             {               description="The area to find connected tiles in. If provided the start position must be in this area.",               name="area",               optional=true,               order=3,               type="BoundingBox"             },             {               description="Include tiles that are connected diagonally.",               name="include_diagonal",               optional=true,               order=2,               type="boolean"             },             {               description="The tile position to start at.",               name="position",               optional=false,               order=0,               type="TilePosition"             },             {               description="The tiles to search for.",               name="tiles",               optional=false,               order=1,               type={                 complex_type="array",                 value="TileID"               }             }           },           return_values={             {               description="The resulting set of tiles.",               optional=false,               order=0,               type={                 complex_type="array",                 value="TilePosition"               }             }           }         },         {           description="Gets the cover tile for the given force and tile on this surface if one is set.",           format={             takes_table=false           },           name="get_default_cover_tile",           order=86,           parameters={             {               description="",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="",               name="tile",               optional=false,               order=1,               type="TileID"             }           },           return_values={             {               description="",               optional=true,               order=0,               type="LuaTilePrototype"             }           }         },         {           description="The double hidden tile name or `nil` if there isn't one for the given position.",           format={             takes_table=false           },           name="get_double_hidden_tile",           order=40,           parameters={             {               description="The tile position.",               name="position",               optional=false,               order=0,               type="TilePosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Returns all the military targets (entities with force) on this chunk for the given force.",           format={             takes_table=false           },           name="get_entities_with_force",           order=77,           parameters={             {               description="Entities of this force will be returned.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The chunk's position.",               name="position",               optional=false,               order=0,               type="ChunkPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="The hidden tile name.",           format={             takes_table=false           },           name="get_hidden_tile",           order=39,           parameters={             {               description="The tile position.",               name="position",               optional=false,               order=0,               type="TilePosition"             }           },           return_values={             {               description="`nil` if there isn't one for the given position.",               optional=true,               order=0,               type="string"             }           }         },         {           description="Gets the map exchange string for the current map generation settings of this surface.",           format={             takes_table=false           },           name="get_map_exchange_string",           order=70,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="string"             }           }         },         {           description="Get the pollution for a given position.\n\nPollution is stored per chunk, so this will return the same value for all positions in one chunk.",           examples={             "```\ngame.surfaces[1].get_pollution({1,2})\n```"           },           format={             takes_table=false           },           name="get_pollution",           order=0,           parameters={             {               description="The position to poll the chunk's pollution",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets the value of surface property on this surface.",           format={             takes_table=false           },           name="get_property",           order=80,           parameters={             {               description="Property to read.",               name="property",               optional=false,               order=0,               type="SurfacePropertyID"             }           },           return_values={             {               description="Value of the property.",               optional=false,               order=0,               type="double"             }           }         },         {           description="Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.",           format={             takes_table=false           },           name="get_random_chunk",           order=54,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="ChunkPosition"             }           }         },         {           description="Gets the resource amount of all resources on this surface",           format={             takes_table=false           },           name="get_resource_counts",           order=53,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="uint"               }             }           }         },         {           description="Gets the first script area by name or id.",           format={             takes_table=false           },           name="get_script_area",           order=61,           parameters={             {               description="The name or id of the area to get.",               name="key",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   "uint"                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ScriptArea"             }           }         },         {           description="Gets the script areas that match the given name or if no name is given all areas are returned.",           format={             takes_table=false           },           name="get_script_areas",           order=60,           parameters={             {               description="",               name="name",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="ScriptArea"               }             }           }         },         {           description="Gets the first script position by name or id.",           format={             takes_table=false           },           name="get_script_position",           order=66,           parameters={             {               description="The name or id of the position to get.",               name="key",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   "uint"                 }               }             }           },           return_values={             {               description="",               optional=true,               order=0,               type="ScriptPosition"             }           }         },         {           description="Gets the script positions that match the given name or if no name is given all positions are returned.",           format={             takes_table=false           },           name="get_script_positions",           order=65,           parameters={             {               description="",               name="name",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="ScriptPosition"               }             }           }         },         {           description="Gets the starting area radius of this surface.",           format={             takes_table=false           },           name="get_starting_area_radius",           order=71,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Get the tile at a given position. An alternative call signature for this method is passing it a single [TilePosition](runtime:TilePosition).\n\nNon-integer values will result in them being rounded down.",           format={             takes_table=false           },           name="get_tile",           order=24,           parameters={             {               description="",               name="x",               optional=false,               order=0,               type="int"             },             {               description="",               name="y",               optional=false,               order=1,               type="int"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaTile"             }           }         },         {           description="Gets the total amount of pollution on the surface by iterating over all the chunks containing pollution.",           format={             takes_table=false           },           name="get_total_pollution",           order=73,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Is a given chunk generated?",           format={             takes_table=false           },           name="is_chunk_generated",           order=28,           parameters={             {               description="The chunk's position.",               name="position",               optional=false,               order=0,               type="ChunkPosition"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Play a sound for every player on this surface.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for that player.",           format={             takes_table=false           },           name="play_sound",           order=52,           parameters={             {               description="The sound to play.",               name="sound_specification",               optional=false,               order=0,               type="PlaySoundSpecification"             }           },           return_values={}         },         {           description="Spawn pollution at the given position.",           format={             takes_table=false           },           name="pollute",           order=26,           parameters={             {               description="How much pollution to add.",               name="amount",               optional=false,               order=1,               type="double"             },             {               description="The entity prototype to attribute the pollution change to in statistics. If not defined, the pollution change will not show up in statistics.",               name="prototype",               optional=true,               order=2,               type="EntityID"             },             {               description="Where to spawn the pollution.",               name="source",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={}         },         {           description="Print text to the chat console of all players on this surface.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.",           format={             takes_table=false           },           name="print",           order=47,           parameters={             {               description="",               name="message",               optional=false,               order=0,               type="LocalisedString"             },             {               description="",               name="print_settings",               optional=true,               order=1,               type="PrintSettings"             }           },           return_values={}         },         {           description="Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.\n\nAll specified decorative prototypes must be autoplacable. If nothing is given all decoratives are generated on all chunks.",           format={             takes_table=false           },           name="regenerate_decorative",           order=46,           parameters={             {               description="The chunk positions to regenerate the decoratives on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.",               name="chunks",               optional=true,               order=1,               type={                 complex_type="array",                 value="ChunkPosition"               }             },             {               description="Prototype names of decorative or decoratives to autoplace. When `nil` all decoratives with an autoplace are used.",               name="decoratives",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   {                     complex_type="array",                     value="string"                   }                 }               }             }           },           return_values={}         },         {           description="Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.\n\nAll specified entity prototypes must be autoplacable. If nothing is given all entities are generated on all chunks.",           format={             takes_table=false           },           name="regenerate_entity",           order=45,           parameters={             {               description="The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.",               name="chunks",               optional=true,               order=1,               type={                 complex_type="array",                 value="ChunkPosition"               }             },             {               description="Prototype names of entity or entities to autoplace. When `nil` all entities with an autoplace are used.",               name="entities",               optional=true,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "string",                   {                     complex_type="array",                     value="string"                   }                 }               }             }           },           return_values={}         },         {           description="Removes the given script area.",           format={             takes_table=false           },           name="remove_script_area",           order=64,           parameters={             {               description="",               name="id",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="If the area was actually removed. False when it didn't exist.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Removes the given script position.",           format={             takes_table=false           },           name="remove_script_position",           order=69,           parameters={             {               description="",               name="id",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="If the position was actually removed. False when it didn't exist.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Generates a path with the specified constraints (as an array of [PathfinderWaypoints](runtime:PathfinderWaypoint)) using the unit pathfinding algorithm. This path can be used to emulate pathing behavior by script for non-unit entities, such as vehicles. If you want to command actual units (such as biters or spitters) to move, use [LuaCommandable::set_command](runtime:LuaCommandable::set_command) via [LuaEntity::commandable](runtime:LuaEntity::commandable) instead.\n\nThe resulting path is ultimately returned asynchronously via [on_script_path_request_finished](runtime:on_script_path_request_finished).",           format={             table_optional=false,             takes_table=true           },           name="request_path",           order=59,           parameters={             {               description="The dimensions of the object that's supposed to travel the path.",               name="bounding_box",               optional=false,               order=0,               type="BoundingBox"             },             {               description="Whether the path request can open gates. Defaults to `false`.",               name="can_open_gates",               optional=true,               order=7,               type="boolean"             },             {               description="The collision mask the `bounding_box` collides with.",               name="collision_mask",               optional=false,               order=1,               type="CollisionMask"             },             {               description="Makes the pathfinder ignore collisions with this entity if it is given.",               name="entity_to_ignore",               optional=true,               order=11,               type="LuaEntity"             },             {               description="The force for which to generate the path, determining which gates can be opened for example.",               name="force",               optional=false,               order=4,               type="ForceID"             },             {               description="The position to find a path to.",               name="goal",               optional=false,               order=3,               type="MapPosition"             },             {               description="Defines the maximum allowed distance between the last traversable path waypoint and an obstacle entity to be destroyed. Only used when finding a discontiguous path, i.e. when `max_gap_size` > 0. This field filters out paths that are blocked by obstacles that are outside the entity's attack range. Allowed values are `0` or greater. Defaults to `max_gap_size`.",               name="max_attack_distance",               optional=true,               order=10,               type="double"             },             {               description="Defines the maximum allowed distance between path waypoints. 0 means that paths must be contiguous (as they are for biters). Values greater than 0 will produce paths with \"gaps\" that are suitable for spiders. Allowed values are from `0` to `31`. Defaults to `0`.",               name="max_gap_size",               optional=true,               order=9,               type="int"             },             {               description="Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to `0`, which equals a resolution of `1x1` tiles, centered on tile centers. Values range from `-8` to `8` inclusive, where each integer increment doubles/halves the resolution. So, a resolution of `-8` equals a grid of `256x256` tiles, and a resolution of `8` equals `1/256` of a tile.",               name="path_resolution_modifier",               optional=true,               order=8,               type="int"             },             {               description="Flags that affect pathfinder behavior.",               name="pathfind_flags",               optional=true,               order=6,               type="PathfinderFlags"             },             {               description="How close the pathfinder needs to get to its `goal` (in tiles). Defaults to `1`.",               name="radius",               optional=true,               order=5,               type="double"             },             {               description="The position from which to start pathfinding.",               name="start",               optional=false,               order=2,               type="MapPosition"             }           },           raises={             {               description="",               name="on_script_path_request_finished",               optional=false,               order=0,               timeframe="future_tick"             }           },           return_values={             {               description="A unique handle to identify this call when [on_script_path_request_finished](runtime:on_script_path_request_finished) fires.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Request that the game's map generator generate chunks at the given position for the given radius on this surface. If the radius is `0`, then only the chunk at the given position is generated.",           format={             takes_table=false           },           name="request_to_generate_chunks",           order=29,           parameters={             {               description="Where to generate the new chunks.",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="The chunk radius from `position` to generate new chunks in. Defaults to `0`.",               name="radius",               optional=true,               order=1,               type="uint"             }           },           return_values={}         },         {           description="Set generated status of a chunk. Useful when copying chunks.",           format={             takes_table=false           },           name="set_chunk_generated_status",           order=31,           parameters={             {               description="The chunk's position.",               name="position",               optional=false,               order=0,               type="ChunkPosition"             },             {               description="The chunk's new status.",               name="status",               optional=false,               order=1,               type="defines.chunk_generated_status"             }           },           return_values={}         },         {           description="Sets the cover tile for the given force and tile on this surface.",           format={             takes_table=false           },           name="set_default_cover_tile",           order=87,           parameters={             {               description="",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="",               name="from_tile",               optional=false,               order=1,               type="TileID"             },             {               description="",               name="to_tile",               optional=false,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "TileID",                   "nil"                 }               }             }           },           return_values={}         },         {           description="Set double hidden tile for the specified position. During normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) tiles can become double hidden.\n\nDoes nothing if hidden tile at specified position does not exist.",           format={             takes_table=false           },           name="set_double_hidden_tile",           order=42,           parameters={             {               description="The tile position.",               name="position",               optional=false,               order=0,               type="TilePosition"             },             {               description="The new double hidden tile or `nil` to clear the double hidden tile.",               name="tile",               optional=true,               order=1,               type="TileID"             }           },           return_values={}         },         {           description="Set the hidden tile for the specified position. While during normal gameplay only [non-mineable](runtime:LuaTilePrototype::mineable_properties) or [foundation](runtime:LuaTilePrototype::is_foundation) tiles can become hidden, this method allows any kind of tile to be set as the hidden one.",           format={             takes_table=false           },           name="set_hidden_tile",           order=41,           parameters={             {               description="The tile position.",               name="position",               optional=false,               order=0,               type="TilePosition"             },             {               description="The new hidden tile or `nil` to clear the hidden tile.",               name="tile",               optional=true,               order=1,               type="TileID"             }           },           return_values={}         },         {           description="Give a command to multiple units. This will automatically select suitable units for the task.",           format={             table_optional=false,             takes_table=true           },           name="set_multi_command",           order=18,           parameters={             {               description="",               name="command",               optional=false,               order=0,               type="Command"             },             {               description="Force of the units this command is to be given to. If not specified, uses the enemy force.",               name="force",               optional=true,               order=2,               type="ForceID"             },             {               description="Number of units to give the command to.",               name="unit_count",               optional=false,               order=1,               type="uint"             },             {               description="Radius to search for units. The search area is centered on the destination of the command. If not specified uses default value of 150.",               name="unit_search_distance",               optional=true,               order=3,               type="uint"             }           },           return_values={             {               description="Number of units actually sent. May be less than `count` if not enough units were available.",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Set the pollution for a given position.\n\nPollution changes by this are not included in pollution statistics and do not affect evolution factors (as opposed to [LuaSurface::pollute](runtime:LuaSurface::pollute)).",           format={             takes_table=false           },           name="set_pollution",           order=1,           parameters={             {               description="New amount of pollution to be set on the chunk. Must be >= 0.",               name="amount",               optional=false,               order=1,               type="double"             },             {               description="The position to set the chunk's pollution",               name="position",               optional=false,               order=0,               type="MapPosition"             }           },           return_values={}         },         {           description="Sets the value of surface property on this surface.",           format={             takes_table=false           },           name="set_property",           order=81,           parameters={             {               description="Property to change.",               name="property",               optional=false,               order=0,               type="SurfacePropertyID"             },             {               description="The wanted value of the property.",               name="value",               optional=false,               order=1,               type="double"             }           },           return_values={}         },         {           description="Set tiles at specified locations. Can automatically correct the edges around modified tiles.\n\nPlacing a [mineable](runtime:LuaTilePrototype::mineable_properties) tile on top of a non-mineable or [foundation](runtime:LuaTilePrototype::is_foundation) one will turn the latter into the [LuaTile::hidden_tile](runtime:LuaTile::hidden_tile) for that tile. Placing a mineable non-foundation tile on a mineable non-foundation one or a mineable foundation tile on a mineable foundation one will not modify the hidden tile. This restriction can however be circumvented by using [LuaSurface::set_hidden_tile](runtime:LuaSurface::set_hidden_tile). Placing a non-foundation tile on top of a foundation one when there already exists a hidden tile will push hidden tile to [double hidden](runtime:LuaTile::double_hidden_tile), and foundation tile will turn into hidden. Placing a mineable foundation tile over a mineable non-foundation tile with hidden mineable foundation tile, the hidden tile will be replaced by previously double hidden tile and double hidden tile will be erased. Placing a non-mineable tile will erase hidden and double hidden tiles.\n\nIt is recommended to call this method once for all the tiles you want to change rather than calling it individually for every tile. As the tile correction is used after every step, calling it one by one could cause the tile correction logic to redo some of the changes. Also, many small API calls are generally more performance intensive than one big one.",           format={             takes_table=false           },           name="set_tiles",           order=25,           parameters={             {               description="If `false`, the correction logic is not applied to the changed tiles. Defaults to `true`.",               name="correct_tiles",               optional=true,               order=1,               type="boolean"             },             {               description="The player whose undo queue to add these actions to.",               name="player",               optional=true,               order=5,               type="PlayerIdentification"             },             {               description="Defaults to `false`.",               name="raise_event",               optional=true,               order=4,               type="boolean"             },             {               description="Defaults to `true`.",               name="remove_colliding_decoratives",               optional=true,               order=3,               type="boolean"             },             {               description="Defaults to `true`.",               name="remove_colliding_entities",               optional=true,               order=2,               type={                 complex_type="union",                 full_format=false,                 options={                   "boolean",                   {                     complex_type="literal",                     value="abort_on_collision"                   }                 }               }             },             {               description="",               name="tiles",               optional=false,               order=0,               type={                 complex_type="array",                 value="Tile"               }             },             {               description="The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",               name="undo_index",               optional=true,               order=6,               type="uint"             }           },           raises={             {               description="Raised if the `raise_event` flag was set.",               name="script_raised_set_tiles",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="Spill inventory on the ground centered at a given location.",           format={             table_optional=false,             takes_table=true           },           name="spill_inventory",           order=13,           parameters={             {               description="Whether items can be spilled onto belts. Defaults to `true`.",               name="allow_belts",               optional=true,               order=4,               type="boolean"             },             {               description="If item on ground should be made out of an entire provided stack. Defaults to `false`.",               name="drop_full_stack",               optional=true,               order=7,               type="boolean"             },             {               description="When true, each created item will be flagged with the [LuaEntity::to_be_looted](runtime:LuaEntity::to_be_looted) flag. Defaults to `false`.",               name="enable_looted",               optional=true,               order=2,               type="boolean"             },             {               description="When provided (and not `nil`) the items will be marked for deconstruction by this force.",               name="force",               optional=true,               order=3,               type="ForceID"             },             {               description="Inventory to spill",               name="inventory",               optional=false,               order=1,               type="LuaInventory"             },             {               description="Max radius from the specified `position` to spill items.",               name="max_radius",               optional=true,               order=5,               type="double"             },             {               description="Center of the spillage",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Allow spilling items at `position` if no non-colliding position is found. Note: Setting to false might cause some items not to be spilled. Defaults to `true`.",               name="use_start_position_on_failure",               optional=true,               order=6,               type="boolean"             }           },           return_values={             {               description="The created item-on-ground entities.",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Spill items on the ground centered at a given location.",           format={             table_optional=false,             takes_table=true           },           name="spill_item_stack",           order=12,           parameters={             {               description="Whether items can be spilled onto belts. Defaults to `true`.",               name="allow_belts",               optional=true,               order=4,               type="boolean"             },             {               description="If item on ground should be made out of an entire provided stack. Defaults to `false`.",               name="drop_full_stack",               optional=true,               order=7,               type="boolean"             },             {               description="When true, each created item will be flagged with the [LuaEntity::to_be_looted](runtime:LuaEntity::to_be_looted) flag. Defaults to `false`.",               name="enable_looted",               optional=true,               order=2,               type="boolean"             },             {               description="When provided (and not `nil`) the items will be marked for deconstruction by this force.",               name="force",               optional=true,               order=3,               type="ForceID"             },             {               description="Max radius from the specified `position` to spill items.",               name="max_radius",               optional=true,               order=5,               type="double"             },             {               description="Center of the spillage",               name="position",               optional=false,               order=0,               type="MapPosition"             },             {               description="Stack of items to spill",               name="stack",               optional=false,               order=1,               type="ItemStackIdentification"             },             {               description="Allow spilling items at `position` if no non-colliding position is found. Note: Setting to false might cause some items not to be spilled. Defaults to `true`.",               name="use_start_position_on_failure",               optional=true,               order=6,               type="boolean"             }           },           return_values={             {               description="The created item-on-ground entities.",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Place an upgrade request.",           format={             table_optional=false,             takes_table=true           },           name="upgrade_area",           order=37,           parameters={             {               description="The area to mark for upgrade.",               name="area",               optional=false,               order=0,               type="BoundingBox"             },             {               description="The force whose bots should perform the upgrade.",               name="force",               optional=false,               order=1,               type="ForceID"             },             {               description="The upgrade item to use.",               name="item",               optional=false,               order=4,               type="LuaItemStack"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=2,               type="PlayerIdentification"             },             {               description="If chunks covered by fog-of-war are skipped.",               name="skip_fog_of_war",               optional=true,               order=3,               type="boolean"             }           },           raises={             {               description="Raised for every entity that has been successfully marked for upgrade.",               name="on_marked_for_upgrade",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         }       },       name="LuaSurface",       operators={},       order=125     },     {       abstract=false,       attributes={         {           description="",           name="default_value",           optional=false,           order=1,           read_type="double"         },         {           description="",           name="is_time",           optional=false,           order=2,           read_type="boolean"         },         {           description="",           name="localised_unit_key",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Prototype of a surface property.",       methods={},       name="LuaSurfacePropertyPrototype",       operators={},       order=126,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=1,           read_type="LuaSurfacePrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="",           name="surface_properties",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="SurfacePropertyID",             value="double"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Prototype of a surface.",       methods={},       name="LuaSurfacePrototype",       operators={},       order=127,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="Can this technology be researched?",           name="enabled",           optional=false,           order=5,           read_type="boolean",           write_type="boolean"         },         {           description="The force this technology belongs to.",           name="force",           optional=false,           order=0,           read_type="LuaForce"         },         {           description="The current level of this technology. For level-based technology writing to this is the same as researching the technology to the previous level. Writing the level will set [LuaTechnology::enabled](runtime:LuaTechnology::enabled) to `true`.",           name="level",           optional=false,           order=15,           read_type="uint",           write_type="uint"         },         {           description="",           name="localised_description",           optional=false,           order=3,           read_type="LocalisedString"         },         {           description="Localised name of this technology.",           name="localised_name",           optional=false,           order=2,           read_type="LocalisedString"         },         {           description="Name of this technology.",           name="name",           optional=false,           order=1,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=19,           read_type="string"         },         {           description="The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.",           name="order",           optional=false,           order=14,           read_type="string"         },         {           description="Prerequisites of this technology. The result maps technology name to the [LuaTechnology](runtime:LuaTechnology) object.",           name="prerequisites",           optional=false,           order=9,           read_type={             complex_type="dictionary",             key="string",             value="LuaTechnology"           }         },         {           description="The prototype of this technology.",           name="prototype",           optional=false,           order=4,           read_type="LuaTechnologyPrototype"         },         {           description="The number of research units required for this technology.\n\nThis is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](runtime:LuaTechnologyPrototype::ignore_tech_cost_multiplier) is `true`.",           name="research_unit_count",           optional=false,           order=12,           read_type="uint"         },         {           description="The count formula, if this research has any. See [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) for details.",           name="research_unit_count_formula",           optional=true,           order=16,           read_type="MathExpression"         },         {           description="Amount of energy required to finish a unit of research.",           name="research_unit_energy",           optional=false,           order=13,           read_type="double"         },         {           description="The types of ingredients that labs will require to research this technology.",           name="research_unit_ingredients",           optional=false,           order=11,           read_type={             complex_type="array",             value="ResearchIngredient"           }         },         {           description="Has this technology been researched? Switching from `false` to `true` will trigger the technology advancement perks; switching from `true` to `false` will reverse them.",           name="researched",           optional=false,           order=8,           read_type="boolean",           write_type="boolean"         },         {           description="Saved technology progress fraction as a value in range `[0, 1)`. 0 means there is no saved progress.",           name="saved_progress",           optional=false,           order=17,           read_type="double",           write_type="double"         },         {           description="Successors of this technology, i.e. technologies which have this technology as a prerequisite.",           name="successors",           optional=false,           order=10,           read_type={             complex_type="dictionary",             key="string",             value="LuaTechnology"           }         },         {           description="Is this an upgrade-type research?",           name="upgrade",           optional=false,           order=7,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=18,           read_type="boolean"         },         {           description="If this technology will be visible in the research GUI even though it is disabled.",           name="visible_when_disabled",           optional=false,           order=6,           read_type="boolean",           write_type="boolean"         }       },       description="One research item.",       methods={         {           description="Reload this technology from its prototype.",           format={             takes_table=false           },           name="reload",           order=0,           parameters={},           return_values={}         },         {           description="Research this technology and all of its prerequisites recursively.",           format={             takes_table=false           },           name="research_recursive",           order=1,           parameters={},           return_values={}         }       },       name="LuaTechnology",       operators={},       order=128     },     {       abstract=false,       attributes={         {           description="",           name="allows_productivity",           optional=false,           order=15,           read_type="boolean"         },         {           description="Effects applied when this technology is researched.",           name="effects",           optional=false,           order=8,           read_type={             complex_type="array",             value="TechnologyModifier"           }         },         {           description="If this technology prototype is enabled by default (enabled at the beginning of a game).",           name="enabled",           optional=false,           order=0,           read_type="boolean"         },         {           description="If this technology prototype is essential, meaning it is shown in the condensed technology graph.",           name="essential",           optional=false,           order=1,           read_type="boolean"         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=16,           read_type="LuaTechnologyPrototype"         },         {           description="If this technology ignores the technology cost multiplier setting.\n\n[LuaTechnologyPrototype::research_unit_count](runtime:LuaTechnologyPrototype::research_unit_count) will already take this setting into account.",           name="ignore_tech_cost_multiplier",           optional=false,           order=3,           read_type="boolean"         },         {           description="The level of this research.",           name="level",           optional=false,           order=11,           read_type="uint"         },         {           description="The max level of this research.",           name="max_level",           optional=false,           order=12,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=18,           read_type="string"         },         {           description="Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](runtime:LuaTechnologyPrototype) object.",           name="prerequisites",           optional=false,           order=5,           read_type={             complex_type="dictionary",             key="string",             value="LuaTechnologyPrototype"           }         },         {           description="The trigger that will research this technology if any.",           name="research_trigger",           optional=true,           order=14,           read_type="ResearchTrigger"         },         {           description="The number of research units required for this technology.\n\nThis is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](runtime:LuaTechnologyPrototype::ignore_tech_cost_multiplier) is `true`.",           name="research_unit_count",           optional=false,           order=9,           read_type="uint"         },         {           description="The count formula, if this research has any. See [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) for details.",           name="research_unit_count_formula",           optional=true,           order=13,           read_type="MathExpression"         },         {           description="Amount of energy required to finish a unit of research.",           name="research_unit_energy",           optional=false,           order=10,           read_type="double"         },         {           description="The types of ingredients that labs will require to research this technology.",           name="research_unit_ingredients",           optional=false,           order=7,           read_type={             complex_type="array",             value="ResearchIngredient"           }         },         {           description="Successors of this technology, i.e. technologies which have this technology as a prerequisite.",           name="successors",           optional=false,           order=6,           read_type={             complex_type="dictionary",             key="string",             value="LuaTechnologyPrototype"           }         },         {           description="If the is technology prototype is an upgrade to some other technology.",           name="upgrade",           optional=false,           order=4,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=17,           read_type="boolean"         },         {           description="If this technology will be visible in the research GUI even though it is disabled.",           name="visible_when_disabled",           optional=false,           order=2,           read_type="boolean"         }       },       description="A Technology prototype.",       methods={},       name="LuaTechnologyPrototype",       operators={},       order=129,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The name of the [LuaTilePrototype](runtime:LuaTilePrototype) double hidden under this tile or `nil` if there is no double hidden tile.\n\nDuring normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) tiles can become double hidden. This can however be circumvented with [LuaSurface::set_double_hidden_tile](runtime:LuaSurface::set_double_hidden_tile).",           name="double_hidden_tile",           optional=true,           order=4,           read_type="string"         },         {           description="The name of the [LuaTilePrototype](runtime:LuaTilePrototype) hidden under this tile, if any.\n\nDuring normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) or [foundation](runtime:LuaTilePrototype::is_foundation) tiles can become hidden. This can however be circumvented with [LuaSurface::set_hidden_tile](runtime:LuaSurface::set_hidden_tile).",           name="hidden_tile",           optional=true,           order=3,           read_type="string"         },         {           description="Prototype name of this tile. E.g. `\"sand-3\"` or `\"grass-2\"`.",           name="name",           optional=false,           order=0,           read_type="string"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=7,           read_type="string"         },         {           description="The position this tile references.",           name="position",           optional=false,           order=2,           read_type="TilePosition"         },         {           description="",           name="prototype",           optional=false,           order=1,           read_type="LuaTilePrototype"         },         {           description="The surface this tile is on.",           name="surface",           optional=false,           order=5,           read_type="LuaSurface"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=6,           read_type="boolean"         }       },       description="A single \"square\" on the map.",       methods={         {           description="Cancels deconstruction if it is scheduled, does nothing otherwise.",           format={             takes_table=false           },           name="cancel_deconstruction",           order=3,           parameters={             {               description="The force who did the deconstruction order.",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=1,               type="PlayerIdentification"             }           },           raises={             {               description="Raised if the tile's deconstruction was successfully cancelled.",               name="on_cancelled_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={}         },         {           description="What type of things can collide with this tile?",           examples={             "```\n-- Check if the character would collide with a tile\ngame.player.print(tostring(game.player.surface.get_tile(1, 1).collides_with(\"player\")))\n```"           },           format={             takes_table=false           },           name="collides_with",           order=0,           parameters={             {               description="",               name="layer",               optional=false,               order=0,               type="CollisionLayerID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Gets all tile ghosts on this tile.",           format={             takes_table=false           },           name="get_tile_ghosts",           order=5,           parameters={             {               description="Get tile ghosts of this force.",               name="force",               optional=true,               order=0,               type="ForceID"             }           },           return_values={             {               description="The tile ghosts.",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Does this tile have any tile ghosts on it.",           format={             takes_table=false           },           name="has_tile_ghost",           order=4,           parameters={             {               description="Check for tile ghosts of this force.",               name="force",               optional=true,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Orders deconstruction of this tile by the given force.",           format={             takes_table=false           },           name="order_deconstruction",           order=2,           parameters={             {               description="The force whose robots are supposed to do the deconstruction.",               name="force",               optional=false,               order=0,               type="ForceID"             },             {               description="The player to set the last_user to if any.",               name="player",               optional=true,               order=1,               type="PlayerIdentification"             }           },           raises={             {               description="Raised if the tile was successfully marked for deconstruction.",               name="on_marked_for_deconstruction",               optional=true,               order=0,               timeframe="instantly"             }           },           return_values={             {               description="The deconstructible tile proxy created, if any.",               optional=true,               order=0,               type="LuaEntity"             }           }         },         {           description="Is this tile marked for deconstruction?",           format={             takes_table=false           },           name="to_be_deconstructed",           order=1,           parameters={             {               description="The force whose robots are supposed to do the deconstruction. If not given, checks if to be deconstructed by any force.",               name="force",               optional=true,               order=0,               type="ForceID"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaTile",       operators={},       order=130     },     {       abstract=false,       attributes={         {           description="A table of pollution emissions per second this tile will absorb, indexed by the name of each absorbed pollution type.",           name="absorptions_per_second",           optional=false,           order=15,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="",           name="allowed_neighbors",           optional=false,           order=8,           read_type={             complex_type="dictionary",             key="string",             value="LuaTilePrototype"           }         },         {           description="True if this tile can be [hidden](runtime:LuaTile::hidden_tile) or replaced by another tile through player actions.",           name="allows_being_covered",           optional=false,           order=17,           read_type="boolean"         },         {           description="",           name="ambient_sounds_group",           optional=true,           order=29,           read_type="LuaTilePrototype"         },         {           description="",           name="automatic_neighbors",           optional=false,           order=7,           read_type="boolean"         },         {           description="Autoplace specification for this prototype, if any.",           name="autoplace_specification",           optional=true,           order=2,           read_type="AutoplaceSpecification"         },         {           description="",           name="bound_decoratives",           optional=true,           order=28,           read_type={             complex_type="array",             value="LuaDecorativePrototype"           }         },         {           description="False if this tile is not allowed in blueprints regardless of the ability to build it.",           name="can_be_part_of_blueprint",           optional=false,           order=14,           read_type="boolean"         },         {           description="True if building this tile should check for colliding entities above and prevent building if such are found. Also during mining tiles above this tile checks for entities colliding with this tile and prevents mining if such are found.",           name="check_collision_with_entities",           optional=false,           order=18,           read_type="boolean"         },         {           description="The collision mask this tile uses",           name="collision_mask",           optional=false,           order=0,           read_type="CollisionMask"         },         {           description="The probability that decorative entities will be removed from on top of this tile when this tile is generated.",           name="decorative_removal_probability",           optional=false,           order=6,           read_type="float"         },         {           description="",           name="default_cover_tile",           optional=true,           order=22,           read_type="LuaTilePrototype"         },         {           description="",           name="default_destroyed_dropped_item_trigger",           optional=true,           order=26,           read_type={             complex_type="array",             value="TriggerItem"           }         },         {           description="",           name="destroys_dropped_items",           optional=false,           order=19,           read_type="boolean"         },         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=30,           read_type="LuaTilePrototype"         },         {           description="The fluid offshore pump produces on this tile, if any.",           name="fluid",           optional=true,           order=11,           read_type="LuaFluidPrototype"         },         {           description="",           name="frozen_variant",           optional=true,           order=23,           read_type="LuaTilePrototype"         },         {           description="True if this tile can be used as a foundation for other tiles, false otherwise. Foundation tiles can be [hidden](runtime:LuaTile::hidden_tile).",           name="is_foundation",           optional=false,           order=16,           read_type="boolean"         },         {           description="Items that when placed will produce this tile, if any. Construction bots will choose the first item in the list to build this tile.",           name="items_to_place_this",           optional=true,           order=13,           read_type={             complex_type="array",             value="ItemWithCount"           }         },         {           description="",           name="layer",           optional=false,           order=1,           read_type="uint"         },         {           description="",           name="map_color",           optional=false,           order=5,           read_type="Color"         },         {           description="",           name="max_health",           optional=false,           order=20,           read_type="float"         },         {           description="",           name="mineable_properties",           optional=false,           order=10,           read_type={             complex_type="table",             parameters={               {                 description="Is this tile mineable at all?",                 name="minable",                 optional=false,                 order=0,                 type="boolean"               },               {                 description="Prototype name of the particle produced when mining this tile. Will only be present if this tile produces any particle during mining.",                 name="mining_particle",                 optional=true,                 order=2,                 type="string"               },               {                 description="Energy required to mine a tile.",                 name="mining_time",                 optional=false,                 order=1,                 type="double"               },               {                 description="Products obtained by mining this tile.",                 name="products",                 optional=false,                 order=3,                 type={                   complex_type="array",                   value="Product"                 }               }             }           }         },         {           description="If this tile needs correction logic applied when it's generated in the world.",           name="needs_correction",           optional=false,           order=9,           read_type="boolean"         },         {           description="The next direction of this tile, if any. Used when a tile has multiple directions (such as hazard concrete)",           name="next_direction",           optional=true,           order=12,           read_type="LuaTilePrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=32,           read_type="string"         },         {           description="",           name="scorch_mark_color",           optional=true,           order=27,           read_type="Color"         },         {           description="",           name="thawed_variant",           optional=true,           order=24,           read_type="LuaTilePrototype"         },         {           description="",           name="trigger_effect",           optional=true,           order=25,           read_type={             complex_type="array",             value="TriggerEffectItem"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=31,           read_type="boolean"         },         {           description="",           name="vehicle_friction_modifier",           optional=false,           order=4,           read_type="float"         },         {           description="",           name="walking_speed_modifier",           optional=false,           order=3,           read_type="float"         },         {           description="",           name="weight",           optional=false,           order=21,           read_type="Weight"         }       },       description="Prototype of a tile.",       methods={},       name="LuaTilePrototype",       operators={},       order=131,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="Back end of the train: Rail and direction on that rail where the train will go when moving backward",           name="back_end",           optional=false,           order=26,           read_type="LuaRailEnd"         },         {           description="The back stock of this train, if any. The back of the train is at the opposite end of the [front](runtime:LuaTrain::front_stock).",           name="back_stock",           optional=true,           order=12,           read_type="LuaEntity"         },         {           description="The cargo carriages the train contains.",           name="cargo_wagons",           optional=false,           order=7,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The rolling stocks this train is composed of, with the numbering starting at the [front](runtime:LuaTrain::front_stock) of the train.",           name="carriages",           optional=false,           order=5,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The fluid carriages the train contains.",           name="fluid_wagons",           optional=false,           order=8,           read_type={             complex_type="array",             value="LuaEntity"           }         },         {           description="Front end of the train: Rail and direction on that rail where the train will go when moving forward",           name="front_end",           optional=false,           order=25,           read_type="LuaRailEnd"         },         {           description="The front stock of this train, if any. The front of the train is in the direction that a majority of locomotives are pointing in. If it's a tie, the North and West directions take precedence.",           name="front_stock",           optional=true,           order=11,           read_type="LuaEntity"         },         {           description="The group this train belongs to.\n\nSetting the group will apply the schedule of the group to this train.",           name="group",           optional=false,           order=24,           read_type="string",           write_type="string"         },         {           description="If this train has a path.",           name="has_path",           optional=false,           order=14,           read_type="boolean"         },         {           description="The unique train ID.",           name="id",           optional=false,           order=17,           read_type="uint"         },         {           description="The total number of kills by this train.",           name="kill_count",           optional=false,           order=21,           read_type="uint"         },         {           description="The players killed by this train.\n\nThe keys are the player indices, the values are how often this train killed that player.",           name="killed_players",           optional=false,           order=20,           read_type={             complex_type="dictionary",             key="uint",             value="uint"           }         },         {           description="Locomotives of the train.",           examples={             "```\n-- called on a LuaTrain with 3 locomotives, it returns 3 LuaEntities:\ntrain.locomotives -- => {front_movers = {loco1, loco2}, back_movers = {loco3}}\n```"           },           name="locomotives",           optional=false,           order=6,           read_type={             complex_type="table",             parameters={               {                 description="Array of locomotives.",                 name="back_movers",                 optional=false,                 order=1,                 type={                   complex_type="array",                   value="LuaEntity"                 }               },               {                 description="Array of locomotives.",                 name="front_movers",                 optional=false,                 order=0,                 type={                   complex_type="array",                   value="LuaEntity"                 }               }             }           }         },         {           description="When `true`, the train is explicitly controlled by the player or script. When `false`, the train moves autonomously according to its schedule.",           name="manual_mode",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Current max speed when moving backwards, depends on locomotive prototype and fuel.",           name="max_backward_speed",           optional=false,           order=3,           read_type="double"         },         {           description="Current max speed when moving forward, depends on locomotive prototype and fuel.",           name="max_forward_speed",           optional=false,           order=2,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=28,           read_type="string"         },         {           description="The player passengers on the train\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index.",           name="passengers",           optional=false,           order=18,           read_type={             complex_type="array",             value="LuaPlayer"           }         },         {           description="The path this train is using, if any.",           name="path",           optional=true,           order=22,           read_type="LuaRailPath"         },         {           description="The destination rail this train is currently pathing to, if any.",           name="path_end_rail",           optional=true,           order=15,           read_type="LuaEntity"         },         {           description="The destination train stop this train is currently pathing to, if any.",           name="path_end_stop",           optional=true,           order=16,           read_type="LuaEntity"         },         {           description="The riding state of this train.",           name="riding_state",           optional=false,           order=19,           read_type="RidingState"         },         {           description="This train's current schedule, if any. Set to `nil` to clear.\n\nThe schedule can't be changed by modifying the returned table. Instead, changes must be made by assigning a new table to this attribute.",           name="schedule",           optional=true,           order=9,           read_type="TrainSchedule",           write_type="TrainSchedule"         },         {           description="The signal this train is arriving or waiting at, if any.",           name="signal",           optional=true,           order=23,           read_type="LuaEntity"         },         {           description="Current speed.\n\nChanging the speed of the train is potentially an unsafe operation because train uses the speed for its internal calculations of break distances, etc.",           name="speed",           optional=false,           order=1,           read_type="double",           write_type="double"         },         {           description="This train's current state.",           name="state",           optional=false,           order=10,           read_type="defines.train_state"         },         {           description="The train stop this train is stopped at, if any.",           name="station",           optional=true,           order=13,           read_type="LuaEntity"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=27,           read_type="boolean"         },         {           description="The weight of this train.",           name="weight",           optional=false,           order=4,           read_type="double"         }       },       description="A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.",       methods={         {           description="Clears all fluids in this train.",           format={             takes_table=false           },           name="clear_fluids_inside",           order=10,           parameters={},           return_values={}         },         {           description="Clear all items in this train.",           format={             takes_table=false           },           name="clear_items_inside",           order=4,           parameters={},           return_values={}         },         {           description="Get a mapping of the train's inventory.",           format={             takes_table=false           },           name="get_contents",           order=1,           parameters={},           return_values={             {               description="List of all items in the train.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         },         {           description="Gets a mapping of the train's fluid inventory.",           format={             takes_table=false           },           name="get_fluid_contents",           order=7,           parameters={},           return_values={             {               description="The counts, indexed by fluid names.",               optional=false,               order=0,               type={                 complex_type="dictionary",                 key="string",                 value="double"               }             }           }         },         {           description="Get the amount of a particular fluid stored in the train.",           format={             takes_table=false           },           name="get_fluid_count",           order=6,           parameters={             {               description="Fluid name to count. If not given, counts all fluids.",               name="fluid",               optional=true,               order=0,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="double"             }           }         },         {           description="Get the amount of a particular item stored in the train.",           format={             takes_table=false           },           name="get_item_count",           order=0,           parameters={             {               description="If not given, counts all items.",               name="item",               optional=true,               order=0,               type="ItemFilter"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Gets a LuaRailEnd object pointing away from the train at specified end of the train",           format={             takes_table=false           },           name="get_rail_end",           order=13,           parameters={             {               description="",               name="direction",               optional=false,               order=0,               type="defines.rail_direction"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="LuaRailEnd"             }           }         },         {           description="Gets all rails under the train.",           format={             takes_table=false           },           name="get_rails",           order=12,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="",           format={             takes_table=false           },           name="get_schedule",           order=14,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="LuaSchedule"             }           }         },         {           description="Go to the station specified by the index in the train's schedule.",           format={             takes_table=false           },           name="go_to_station",           order=11,           parameters={             {               description="",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Insert a stack into the train.",           format={             takes_table=false           },           name="insert",           order=3,           parameters={             {               description="",               name="stack",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={}         },         {           description="Inserts the given fluid into the first available location in this train.",           format={             takes_table=false           },           name="insert_fluid",           order=9,           parameters={             {               description="",               name="fluid",               optional=false,               order=0,               type="Fluid"             }           },           return_values={             {               description="The amount inserted.",               optional=false,               order=0,               type="double"             }           }         },         {           description="Checks if the path is invalid and tries to re-path if it isn't.",           format={             takes_table=false           },           name="recalculate_path",           order=5,           parameters={             {               description="Forces the train to re-path regardless of the current path being valid or not.",               name="force",               optional=true,               order=0,               type="boolean"             }           },           return_values={             {               description="If the train has a path after the repath attempt.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Remove some fluid from the train.",           format={             takes_table=false           },           name="remove_fluid",           order=8,           parameters={             {               description="",               name="fluid",               optional=false,               order=0,               type="Fluid"             }           },           return_values={             {               description="The amount of fluid actually removed.",               optional=false,               order=0,               type="double"             }           }         },         {           description="Remove some items from the train.",           format={             takes_table=false           },           name="remove_item",           order=2,           parameters={             {               description="The amount and type of items to remove",               name="stack",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Number of items actually removed.",               optional=false,               order=0,               type="uint"             }           }         }       },       name="LuaTrain",       operators={},       order=132     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=1,           read_type="string"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=0,           read_type="boolean"         }       },       description="The train manager manages all the train in the game. LuaTrainManager allows to perform some direct queries to the train manager.\n\nThere is always exactly one train manager instance in a game, it can be obtained from [LuaGameScript::train_manager](runtime:LuaGameScript::train_manager). This object is always valid and is equal to any other instance of LuaTrainManager from this game.",       methods={         {           description="Searches for a train with given ID.",           format={             takes_table=false           },           name="get_train_by_id",           order=0,           parameters={             {               description="Train ID to search",               name="train_id",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="Train if found",               optional=true,               order=0,               type="LuaTrain"             }           }         },         {           description="Gets all train stops that pass given filter",           format={             takes_table=false           },           name="get_train_stops",           order=2,           parameters={             {               description="Filters the train stop must pass in order to be returned here",               name="filter",               optional=false,               order=0,               type="TrainStopFilter"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaEntity"               }             }           }         },         {           description="Gets all trains that pass given filter",           format={             takes_table=false           },           name="get_trains",           order=1,           parameters={             {               description="Filters the train must pass in order to be returned here",               name="filter",               optional=false,               order=0,               type="TrainFilter"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="LuaTrain"               }             }           }         },         {           description="Direct access to train pathfinder. Allows to search rail paths or querying which stops are accessible",           format={             table_optional=false,             takes_table=true           },           name="request_train_path",           order=3,           parameters={             {               description="",               name="goals",               optional=false,               order=2,               type={                 complex_type="array",                 value="TrainPathFinderGoal"               }             },             {               description="Defaults to `false`. If set to true, pathfinder will not return a path that cannot have its start immediately reserved. A path that cannot have its start immediately reserved could cause a train to stop inside of an intersection.",               name="in_chain_signal_section",               optional=true,               order=6,               type="boolean"             },             {               description="Only relevant if request type is `\"path\"`. Returning a full path is expensive due to multiple LuaEntity created. In order for path to be returned, true must be provided here. Defaults to false in which case a path will not be provided.",               name="return_path",               optional=true,               order=3,               type="boolean"             },             {               description="Only relevant if `starts` was not provided in which case 2 starts (front and back) are deduced from the train. Selects which train ends should be considered as starts. Defaults to `\"any-direction-with-locomotives\"`.",               name="search_direction",               optional=true,               order=5,               type={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="respect-movement-direction"                   },                   {                     complex_type="literal",                     value="any-direction-with-locomotives"                   }                 }               }             },             {               description="Defaults to `false`. If set to true, only length of rails is added to penalties causing search to look for shortest path (not smallest penalty)",               name="shortest_path",               optional=true,               order=8,               type="boolean"             },             {               description="Manually provided starting positions.",               name="starts",               optional=true,               order=4,               type={                 complex_type="array",                 value="RailEndStart"               }             },             {               description="Maximum amount of steps pathfinder is allowed to perform.",               name="steps_limit",               optional=true,               order=7,               type="uint"             },             {               description="Mandatory if `starts` is not provided, optional otherwise. Selects a context for the pathfinder to decide which train to exclude from penalties and which signals are considered possible to reacquire. If `starts` is not provided, then it is also used to collect front and back ends for the search",               name="train",               optional=true,               order=1,               type="LuaTrain"             },             {               description="Request type. Determines the return type of the method. Defaults to `\"path\"`.",               name="type",               optional=true,               order=0,               type="TrainPathRequestType"             }           },           return_values={             {               description="The type of the returned value depends on `type`.",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "TrainPathFinderOneGoalResult",                   "TrainPathAllGoalsResult"                 }               }             }           }         }       },       name="LuaTrainManager",       operators={},       order=133     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=11,           read_type="string"         },         {           description="The signal to be used by set-priority change priority of the train stop",           name="priority_signal",           optional=true,           order=9,           read_type="SignalID",           write_type="SignalID"         },         {           description="`true` if the train stop should send the train contents to the circuit network.",           name="read_from_train",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the train stop should send the stopped train id to the circuit network.",           name="read_stopped_train",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the train stop should send amount of incoming trains to the circuit network.",           name="read_trains_count",           optional=false,           order=4,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the train stop should send the circuit network contents to the train to use.",           name="send_to_train",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the priority_signal is used to set a priority of the train stop.",           name="set_priority",           optional=false,           order=8,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the trains_limit_signal is used to set a limit of trains incoming for train stop.",           name="set_trains_limit",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="The signal that will be sent when using the send-train-id option.",           name="stopped_train_signal",           optional=true,           order=5,           read_type="SignalID",           write_type="SignalID"         },         {           description="The signal that will be sent when using the read-trains-count option.",           name="trains_count_signal",           optional=true,           order=6,           read_type="SignalID",           write_type="SignalID"         },         {           description="The signal to be used by set-trains-limit to limit amount of incoming trains",           name="trains_limit_signal",           optional=true,           order=7,           read_type="SignalID",           write_type="SignalID"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=10,           read_type="boolean"         }       },       description="Control behavior for train stops.",       methods={},       name="LuaTrainStopControlBehavior",       operators={},       order=134,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="If the belt will read the contents and send them to the circuit network.",           name="read_contents",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="The read mode for the belt.",           name="read_contents_mode",           optional=false,           order=1,           read_type="defines.control_behavior.transport_belt.content_read_mode",           write_type="defines.control_behavior.transport_belt.content_read_mode"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Control behavior for transport belts.",       methods={},       name="LuaTransportBeltControlBehavior",       operators={},       order=135,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="The transport lines that this transport line is fed by or an empty table if none.",           name="input_lines",           optional=false,           order=2,           read_type={             complex_type="array",             value="LuaTransportLine"           }         },         {           description="Length of the transport line. Items can be inserted at line position from 0 up to returned value",           name="line_length",           optional=false,           order=3,           read_type="float"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=6,           read_type="string"         },         {           description="The transport lines that this transport line outputs items to or an empty table if none.",           name="output_lines",           optional=false,           order=1,           read_type={             complex_type="array",             value="LuaTransportLine"           }         },         {           description="The entity this transport line belongs to.",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="Total length of segment which consists of this line, all lines in front and lines in the back directly connected.",           name="total_segment_length",           optional=false,           order=4,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=5,           read_type="boolean"         }       },       description="One line on a transport belt.",       methods={         {           description="Can an item be inserted at a given position?",           format={             takes_table=false           },           name="can_insert_at",           order=3,           parameters={             {               description="Where to insert an item.",               name="position",               optional=false,               order=0,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Can an item be inserted at the back of this line?",           format={             takes_table=false           },           name="can_insert_at_back",           order=4,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Remove all items from this transport line.",           format={             takes_table=false           },           name="clear",           order=0,           parameters={},           return_values={}         },         {           description="Force insert item at a given position. Inserts item onto a transport line. If a position is out of range, it is clamped to a closest valid position on the transport line. Item will be inserted regardless of other items nearby, possibly forcing items to become squashed.",           format={             takes_table=false           },           name="force_insert_at",           order=7,           parameters={             {               description="Maximum size of stack created on belt",               name="belt_stack_size",               optional=true,               order=2,               type="uint8"             },             {               description="Items to insert.",               name="items",               optional=false,               order=1,               type="ItemStackIdentification"             },             {               description="Where on the line to insert the items.",               name="position",               optional=false,               order=0,               type="float"             }           },           return_values={}         },         {           description="Get counts of all items on this line, similar to how [LuaInventory::get_contents](runtime:LuaInventory::get_contents) does.",           format={             takes_table=false           },           name="get_contents",           order=8,           parameters={},           return_values={             {               description="List of all items on this line.",               optional=false,               order=0,               type={                 complex_type="array",                 value="ItemWithQualityCounts"               }             }           }         },         {           description="Get detailed information of items on this line, such as their position.",           format={             takes_table=false           },           name="get_detailed_contents",           order=9,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="DetailedItemOnLine"               }             }           }         },         {           description="Count some or all items on this line, similar to how [LuaInventory::get_item_count](runtime:LuaInventory::get_item_count) does.",           format={             takes_table=false           },           name="get_item_count",           order=1,           parameters={             {               description="If not specified, count all items.",               name="item",               optional=true,               order=0,               type="ItemFilter"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Get a map position related to a position on a transport line.",           format={             takes_table=false           },           name="get_line_item_position",           order=11,           parameters={             {               description="Linear position along the transport line. Clamped to the transport line range.",               name="position",               optional=false,               order=0,               type="float"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="MapPosition"             }           }         },         {           description="Insert items at a given position.",           format={             takes_table=false           },           name="insert_at",           order=5,           parameters={             {               description="Maximum size of stack created on belt",               name="belt_stack_size",               optional=true,               order=2,               type="uint8"             },             {               description="Items to insert.",               name="items",               optional=false,               order=1,               type="ItemStackIdentification"             },             {               description="Where on the line to insert the items.",               name="position",               optional=false,               order=0,               type="float"             }           },           return_values={             {               description="Were the items inserted successfully?",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Insert items at the back of this line.",           format={             takes_table=false           },           name="insert_at_back",           order=6,           parameters={             {               description="Maximum size of stack created on belt",               name="belt_stack_size",               optional=true,               order=1,               type="uint8"             },             {               description="",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Were the items inserted successfully?",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.\n\nThis can return true even when the [LuaTransportLine::owner](runtime:LuaTransportLine::owner)s are different (so `this == other` is false), because the internal transport lines can span multiple tiles.",           format={             takes_table=false           },           name="line_equals",           order=10,           parameters={             {               description="",               name="other",               optional=false,               order=0,               type="LuaTransportLine"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Remove some items from this line.",           format={             takes_table=false           },           name="remove_item",           order=2,           parameters={             {               description="Items to remove.",               name="items",               optional=false,               order=0,               type="ItemStackIdentification"             }           },           return_values={             {               description="Number of items actually removed.",               optional=false,               order=0,               type="uint"             }           }         }       },       name="LuaTransportLine",       operators={         {           description="The indexing operator.",           name="index",           optional=false,           order=0,           read_type="LuaItemStack"         },         {           description="Get the number of items on this transport line.",           name="length",           optional=false,           order=1,           read_type="uint"         }       },       order=136     },     {       abstract=false,       attributes={         {           description="",           name="affected_by_wind",           optional=false,           order=10,           read_type="boolean"         },         {           description="",           name="color",           optional=false,           order=0,           read_type="Color"         },         {           description="",           name="cyclic",           optional=false,           order=9,           read_type="boolean"         },         {           description="",           name="duration",           optional=false,           order=4,           read_type="uint"         },         {           description="",           name="end_scale",           optional=false,           order=2,           read_type="double"         },         {           description="",           name="fade_away_duration",           optional=false,           order=6,           read_type="uint"         },         {           description="",           name="fade_in_duration",           optional=false,           order=7,           read_type="uint"         },         {           description="",           name="glow_animation",           optional=false,           order=12,           read_type="boolean"         },         {           description="",           name="glow_fade_away_duration",           optional=false,           order=8,           read_type="uint"         },         {           description="",           name="movement_slow_down_factor",           optional=false,           order=3,           read_type="double"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=15,           read_type="string"         },         {           description="",           name="render_layer",           optional=false,           order=13,           read_type="RenderLayer"         },         {           description="",           name="show_when_smoke_off",           optional=false,           order=11,           read_type="boolean"         },         {           description="",           name="spread_duration",           optional=false,           order=5,           read_type="uint"         },         {           description="",           name="start_scale",           optional=false,           order=1,           read_type="double"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=14,           read_type="boolean"         }       },       description="Prototype of a trivial smoke.",       methods={},       name="LuaTrivialSmokePrototype",       operators={},       order=137,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The condition under which the turret will ignore targets not on its priority list.",           name="ignore_unlisted_targets_condition",           optional=false,           order=2,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=5,           read_type="string"         },         {           description="`true` if the turret will send the ammunition or fluid it contains to the circuit network.",           name="read_ammo",           optional=false,           order=3,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the turret will ignore targets not on its priority list if a circuit condition is met.",           name="set_ignore_unlisted_targets",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="`true` if the turret's target priority list will be determined from the signals on the circuit network.",           name="set_priority_list",           optional=false,           order=0,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=4,           read_type="boolean"         }       },       description="Control behavior for turrets.",       methods={},       name="LuaTurretControlBehavior",       operators={},       order=138,       parent="LuaGenericOnOffControlBehavior"     },     {       abstract=false,       attributes={         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=2,           read_type="string"         },         {           description="The index of the player to whom this stack belongs to.",           name="player_index",           optional=false,           order=0,           read_type="uint"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=1,           read_type="boolean"         }       },       description="The undo queue for a player. The term `item_index` refers to the index of an undo item in the queue, while `action_index` refers to the index of one of the individual actions that make up an undo item.\n\nItems are added to the undo queue through player actions and Lua methods that emulate player actions like [LuaEntity::order_upgrade](runtime:LuaEntity::order_upgrade).",       methods={         {           description="Gets an undo item from the redo stack.",           format={             takes_table=false           },           name="get_redo_item",           order=4,           parameters={             {               description="The index of the item to get, ordered from most recent to oldest.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="UndoRedoAction"               }             }           }         },         {           description="The number of undo items in the redo stack.",           format={             takes_table=false           },           name="get_redo_item_count",           order=5,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Gets the tag with the given name from a specific redo item action, or `nil` if it doesn't exist.",           format={             takes_table=false           },           name="get_redo_tag",           order=13,           parameters={             {               description="The index of the redo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the redo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The name of the tag to get.",               name="tag_name",               optional=false,               order=2,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="AnyBasic"             }           }         },         {           description="Gets all tags for the given redo action.",           format={             takes_table=false           },           name="get_redo_tags",           order=12,           parameters={             {               description="The index of the redo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the redo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="Tags"             }           }         },         {           description="Gets an undo item from the undo stack.",           format={             takes_table=false           },           name="get_undo_item",           order=0,           parameters={             {               description="The index of the undo item to get, ordered from most recent to oldest.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type={                 complex_type="array",                 value="UndoRedoAction"               }             }           }         },         {           description="The number undo items in the undo stack.",           format={             takes_table=false           },           name="get_undo_item_count",           order=1,           parameters={},           return_values={             {               description="",               optional=false,               order=0,               type="uint"             }           }         },         {           description="Gets the tag with the given name from a specific undo item action, or `nil` if it doesn't exist.",           format={             takes_table=false           },           name="get_undo_tag",           order=9,           parameters={             {               description="The index of the undo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The name of the tag to get.",               name="tag_name",               optional=false,               order=2,               type="string"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="AnyBasic"             }           }         },         {           description="Gets all tags for the given undo action.",           format={             takes_table=false           },           name="get_undo_tags",           order=8,           parameters={             {               description="The index of the undo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="Tags"             }           }         },         {           description="Removes an undo action from the specified undo item on the redo stack.",           format={             takes_table=false           },           name="remove_redo_action",           order=7,           parameters={             {               description="The index of the undo action to remove.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item to change, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes an undo item from the redo stack.",           format={             takes_table=false           },           name="remove_redo_item",           order=6,           parameters={             {               description="The index of the undo item to remove, ordered from most recent to oldest.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes a tag with the given name from the specified redo item.",           format={             takes_table=false           },           name="remove_redo_tag",           order=15,           parameters={             {               description="The index of the redo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the redo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The name of the tag to remove.",               name="tag",               optional=false,               order=2,               type="string"             }           },           return_values={             {               description="Whether the tag existed and was successfully removed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Removes an undo action from the specified undo item on the undo stack.",           format={             takes_table=false           },           name="remove_undo_action",           order=3,           parameters={             {               description="The index of the undo action to remove.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item to change, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes an undo item from the undo stack.",           format={             takes_table=false           },           name="remove_undo_item",           order=2,           parameters={             {               description="The index of the undo item to remove, ordered from most recent to oldest.",               name="index",               optional=false,               order=0,               type="uint"             }           },           return_values={}         },         {           description="Removes a tag with the given name from the specified undo item.",           format={             takes_table=false           },           name="remove_undo_tag",           order=11,           parameters={             {               description="The index of the undo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The name of the tag to remove.",               name="tag",               optional=false,               order=2,               type="string"             }           },           return_values={             {               description="Whether the tag existed and was successfully removed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Sets a new tag with the given name and value on the specified redo item action.",           format={             takes_table=false           },           name="set_redo_tag",           order=14,           parameters={             {               description="The index of the redo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the redo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The contents of the new tag.",               name="tag",               optional=false,               order=3,               type="AnyBasic"             },             {               description="The name of the tag to set.",               name="tag_name",               optional=false,               order=2,               type="string"             }           },           return_values={}         },         {           description="Sets a new tag with the given name and value on the specified undo item action.",           format={             takes_table=false           },           name="set_undo_tag",           order=10,           parameters={             {               description="The index of the undo action.",               name="action_index",               optional=false,               order=1,               type="uint"             },             {               description="The index of the undo item, ordered from most recent to oldest.",               name="item_index",               optional=false,               order=0,               type="uint"             },             {               description="The contents of the new tag.",               name="tag",               optional=false,               order=3,               type="AnyBasic"             },             {               description="The name of the tag to set.",               name="tag_name",               optional=false,               order=2,               type="string"             }           },           return_values={}         }       },       name="LuaUndoRedoStack",       operators={},       order=139     },     {       abstract=false,       attributes={         {           description="An alternative prototype that will be used to display info about this prototype in Factoriopedia.",           name="factoriopedia_alternative",           optional=true,           order=1,           read_type="LuaVirtualSignalPrototype"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=3,           read_type="string"         },         {           description="Whether this is a special signal. The `everything`, `anything`, `each`, and `unknown` signals are considered special.",           name="special",           optional=false,           order=0,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=2,           read_type="boolean"         }       },       description="Prototype of a virtual signal.",       methods={},       name="LuaVirtualSignalPrototype",       operators={},       order=140,       parent="LuaPrototypeBase"     },     {       abstract=false,       attributes={         {           description="The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",           name="emissions_per_joule",           optional=false,           order=0,           read_type={             complex_type="dictionary",             key="string",             value="double"           }         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=4,           read_type="string"         },         {           description="",           name="render_no_network_icon",           optional=false,           order=1,           read_type="boolean"         },         {           description="",           name="render_no_power_icon",           optional=false,           order=2,           read_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=3,           read_type="boolean"         }       },       description="Prototype of a void energy source.",       methods={},       name="LuaVoidEnergySourcePrototype",       operators={},       order=141     },     {       abstract=false,       attributes={         {           description="The circuit condition.",           name="circuit_condition",           optional=false,           order=0,           read_type="CircuitConditionDefinition",           write_type="CircuitConditionDefinition"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=5,           read_type="string"         },         {           description="",           name="open_gate",           optional=false,           order=1,           read_type="boolean",           write_type="boolean"         },         {           description="",           name="output_signal",           optional=true,           order=3,           read_type="SignalID",           write_type="SignalID"         },         {           description="",           name="read_sensor",           optional=false,           order=2,           read_type="boolean",           write_type="boolean"         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=4,           read_type="boolean"         }       },       description="Control behavior for walls.",       methods={},       name="LuaWallControlBehavior",       operators={},       order=142,       parent="LuaControlBehavior"     },     {       abstract=false,       attributes={         {           description="Amount of wires going out of this connector. It includes all wires (ghost wires and real wires).",           name="connection_count",           optional=false,           order=4,           read_type="uint"         },         {           description="All wire connectors this connector is connected to.",           name="connections",           optional=false,           order=5,           read_type={             complex_type="array",             value="WireConnection"           }         },         {           description="If this connector is owned by an entity inside of a ghost. If any of 2 ends of a wire attaches to a ghost connector, then a wire is considered to be a ghost.",           name="is_ghost",           optional=false,           order=3,           read_type="boolean"         },         {           description="Index of a CircuitNetwork or ElectricSubNetwork which is going through this wire connector. Returns 0 if there is no network associated with this wire connector right now. CircuitNetwork indexes are independent of indexes of ElectricSubNetwork so they may collide with each other.",           name="network_id",           optional=false,           order=8,           read_type="uint"         },         {           description="The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.",           name="object_name",           optional=false,           order=10,           read_type="string"         },         {           description="The entity this wire connector belongs to. May return entity ghost instead if this wire connector belongs to inner entity.",           name="owner",           optional=false,           order=0,           read_type="LuaEntity"         },         {           description="Amount of real wires going out of this connector. It only includes wires for which both wire connectors are real.",           name="real_connection_count",           optional=false,           order=6,           read_type="uint"         },         {           description="All wire connectors this connector is connected to with real wires.",           name="real_connections",           optional=false,           order=7,           read_type={             complex_type="array",             value="WireConnection"           }         },         {           description="Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",           name="valid",           optional=false,           order=9,           read_type="boolean"         },         {           description="Identifier of this connector in the entity this connector belongs to.",           name="wire_connector_id",           optional=false,           order=2,           read_type="defines.wire_connector_id"         },         {           description="The type of wires that can be connected to this connector.",           name="wire_type",           optional=false,           order=1,           read_type="defines.wire_type"         }       },       description="A wire connector of a given entity. Allows to find wires, add or remove wires and do some basic operations specific to those connectors.",       methods={         {           description="Checks if a wire can reach from this connector to the other connector.",           format={             takes_table=false           },           name="can_wire_reach",           order=4,           parameters={             {               description="Target to which a wire reach is to be checked.",               name="other_connector",               optional=false,               order=0,               type={                 complex_type="union",                 full_format=false,                 options={                   "LuaWireConnector",                   "LuaEntity"                 }               }             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Connects this connector to other wire connector.",           format={             takes_table=false           },           name="connect_to",           order=1,           parameters={             {               description="Origin of the wire. Defaults to `defines.wire_origin.player`.",               name="origin",               optional=true,               order=2,               type="defines.wire_origin"             },             {               description="True by default. For wires out of reach or on different surfaces, `false` must be provided.",               name="reach_check",               optional=true,               order=1,               type="boolean"             },             {               description="Other connector to which a wire should be added.",               name="target",               optional=false,               order=0,               type="LuaWireConnector"             }           },           return_values={             {               description="Whether a connection was made.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Removes all wires going out of this wire connector.",           format={             takes_table=false           },           name="disconnect_all",           order=3,           parameters={             {               description="Origin of the wires to remove. Defaults to `defines.wire_origin.player`.",               name="origin",               optional=true,               order=0,               type="defines.wire_origin"             }           },           return_values={             {               description="True if any wire was removed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Disconnects this connector from other wire connector.",           format={             takes_table=false           },           name="disconnect_from",           order=2,           parameters={             {               description="Origin of the wire. Defaults to `defines.wire_origin.player`.",               name="origin",               optional=true,               order=1,               type="defines.wire_origin"             },             {               description="Other connector to which wire to be removed should be removed.",               name="target",               optional=false,               order=0,               type="LuaWireConnector"             }           },           return_values={             {               description="Whether a connection was removed.",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Checks if this and other wire connector have a common neighbour.",           format={             takes_table=false           },           name="have_common_neighbour",           order=5,           parameters={             {               description="",               name="ignore_ghost_neighbours",               optional=true,               order=1,               type="boolean"             },             {               description="Other connector to check for common neighbour.",               name="other_connector",               optional=false,               order=0,               type="LuaWireConnector"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         },         {           description="Checks if this connector has any wire going to the other connector.",           format={             takes_table=false           },           name="is_connected_to",           order=0,           parameters={             {               description="Origin of the wire. Defaults to `defines.wire_origin.player`.",               name="origin",               optional=true,               order=1,               type="defines.wire_origin"             },             {               description="Other connector to check for a connection to.",               name="target",               optional=false,               order=0,               type="LuaWireConnector"             }           },           return_values={             {               description="",               optional=false,               order=0,               type="boolean"             }           }         }       },       name="LuaWireConnector",       operators={},       order=143     }   },   concepts={     {       description="",       name="AchievementPrototypeFilter",       order=326,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="allowed-without-fight"                 },                 {                   complex_type="literal",                   value="type"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="",       name="AddRecordData",       order=207,       type={         complex_type="table",         parameters={           {             description="",             name="allows_unloading",             optional=true,             order=5,             type="boolean"           },           {             description="",             name="created_by_interrupt",             optional=true,             order=4,             type="boolean"           },           {             description="If index is not given, the record is appended.",             name="index",             optional=true,             order=7,             type="ScheduleRecordPosition"           },           {             description="",             name="rail",             optional=true,             order=1,             type="LuaEntity"           },           {             description="When `rail` is given, this can be provided to further narrow down direction from which that rail should be approached.",             name="rail_direction",             optional=true,             order=2,             type="defines.rail_direction"           },           {             description="One of station or rail must be given.",             name="station",             optional=true,             order=0,             type="string"           },           {             description="",             name="temporary",             optional=true,             order=3,             type="boolean"           },           {             description="",             name="wait_conditions",             optional=true,             order=6,             type={               complex_type="array",               value="WaitCondition"             }           }         }       }     },     {       description="",       name="AdvancedMapGenSettings",       order=179,       type={         complex_type="table",         parameters={           {             description="",             name="asteroids",             optional=false,             order=0,             type="AsteroidMapSettings"           },           {             description="",             name="difficulty_settings",             optional=false,             order=4,             type="DifficultySettings"           },           {             description="",             name="enemy_evolution",             optional=false,             order=2,             type="EnemyEvolutionMapSettings"           },           {             description="",             name="enemy_expansion",             optional=false,             order=3,             type="EnemyExpansionMapSettings"           },           {             description="",             name="pollution",             optional=false,             order=1,             type="PollutionMapSettings"           }         }       }     },     {       description="",       name="Alert",       order=236,       type={         complex_type="table",         parameters={           {             description="The SignalID used for a custom alert. Only present for custom alerts.",             name="icon",             optional=true,             order=4,             type="SignalID"           },           {             description="The message for a custom alert. Only present for custom alerts.",             name="message",             optional=true,             order=5,             type="LocalisedString"           },           {             description="",             name="position",             optional=true,             order=3,             type="MapPosition"           },           {             description="",             name="prototype",             optional=true,             order=2,             type="LuaEntityPrototype"           },           {             description="",             name="target",             optional=true,             order=1,             type="LuaEntity"           },           {             description="The tick this alert was created.",             name="tick",             optional=false,             order=0,             type="uint"           }         }       }     },     {       description="A string that specifies where a GUI element should be.",       name="Alignment",       order=285,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="top-left"           },           {             complex_type="literal",             description="",             value="middle-left"           },           {             complex_type="literal",             description="The same as `\"middle-left\"`",             value="left"           },           {             complex_type="literal",             description="",             value="bottom-left"           },           {             complex_type="literal",             description="",             value="top-center"           },           {             complex_type="literal",             description="",             value="middle-center"           },           {             complex_type="literal",             description="The same as `\"middle-center\"`",             value="center"           },           {             complex_type="literal",             description="",             value="bottom-center"           },           {             complex_type="literal",             description="",             value="top-right"           },           {             complex_type="literal",             description="The same as `\"middle-right\"`",             value="right"           },           {             complex_type="literal",             description="",             value="bottom-right"           }         }       }     },     {       description="",       name="AmmoType",       order=122,       type={         complex_type="table",         parameters={           {             description="",             name="action",             optional=true,             order=0,             type={               complex_type="array",               value="TriggerItem"             }           },           {             description="When `true`, the gun will be able to shoot even when the target is out of range. Only applies when `target_type` is `position`. The gun will fire at the maximum range in the direction of the target position. Defaults to `false`.",             name="clamp_position",             optional=true,             order=2,             type="boolean"           },           {             description="",             name="consumption_modifier",             optional=true,             order=6,             type="float"           },           {             description="",             name="cooldown_modifier",             optional=true,             order=5,             type="double"           },           {             description="Energy consumption of a single shot, if applicable. Defaults to `0`.",             name="energy_consumption",             optional=true,             order=3,             type="double"           },           {             description="",             name="range_modifier",             optional=true,             order=4,             type="double"           },           {             description="The entity prototype filter names.",             name="target_filter",             optional=true,             order=7,             type={               complex_type="array",               value="string"             }           },           {             description="",             name="target_type",             optional=false,             order=1,             type="TargetType"           }         }       }     },     {       description="Any basic type (string, number, boolean), table, or LuaObject.",       name="Any",       order=316,       type={         complex_type="union",         full_format=false,         options={           "string",           "boolean",           "number",           "table",           "LuaObject"         }       }     },     {       description="Any basic type (string, number, boolean) or table.",       name="AnyBasic",       order=315,       type={         complex_type="union",         full_format=false,         options={           "string",           "boolean",           "number",           "table"         }       }     },     {       description="",       name="ArithmeticCombinatorParameterOperation",       order=138,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="*"           },           {             complex_type="literal",             description="",             value="/"           },           {             complex_type="literal",             description="",             value="+"           },           {             complex_type="literal",             description="",             value="-"           },           {             complex_type="literal",             description="",             value="%"           },           {             complex_type="literal",             description="",             value="^"           },           {             complex_type="literal",             description="",             value="<<"           },           {             complex_type="literal",             description="",             value=">>"           },           {             complex_type="literal",             description="",             value="AND"           },           {             complex_type="literal",             description="",             value="OR"           },           {             complex_type="literal",             description="",             value="XOR"           }         }       }     },     {       description="",       name="ArithmeticCombinatorParameters",       order=137,       type={         complex_type="table",         parameters={           {             description="Constant to use as the first argument of the operation. Has no effect when `first_signal` is set. Defaults to `0`.",             name="first_constant",             optional=true,             order=2,             type="int"           },           {             description="First signal to use in an operation. If not specified, the second argument will be the value of `first_constant`.",             name="first_signal",             optional=true,             order=0,             type="SignalID"           },           {             description="Which circuit networks (red/green) to read `first_signal` from. Defaults to both.",             name="first_signal_networks",             optional=true,             order=1,             type="CircuitNetworkSelection"           },           {             description="When not specified, defaults to `\"*\"`.",             name="operation",             optional=true,             order=3,             type="ArithmeticCombinatorParameterOperation"           },           {             description="Specifies the signal to output.",             name="output_signal",             optional=true,             order=7,             type="SignalID"           },           {             description="Constant to use as the second argument of the operation. Has no effect when `second_signal` is set. Defaults to `0`.",             name="second_constant",             optional=true,             order=6,             type="int"           },           {             description="Second signal to use in an operation. If not specified, the second argument will be the value of `second_constant`.",             name="second_signal",             optional=true,             order=4,             type="SignalID"           },           {             description="Which circuit networks (red/green) to read `second_signal` from. Defaults to both.",             name="second_signal_networks",             optional=true,             order=5,             type="CircuitNetworkSelection"           }         }       }     },     {       description="",       name="AsteroidChunk",       order=197,       type={         complex_type="table",         parameters={           {             description="",             name="movement",             optional=false,             order=2,             type="Vector"           },           {             description="The name of the asteroid chunk prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="",             name="position",             optional=false,             order=1,             type="MapPosition"           }         }       }     },     {       description="An asteroid chunk prototype may be specified in one of two ways.",       name="AsteroidChunkID",       order=77,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The asteroid chunk prototype.",             value="LuaAsteroidChunkPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="AsteroidChunkPrototypeFilter",       order=322,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="minable"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:"       }     },     {       description="",       name="AsteroidMapSettings",       order=162,       type={         complex_type="table",         parameters={           {             description="",             name="max_ray_portals_expanded_per_tick",             optional=false,             order=1,             type="uint"           },           {             description="",             name="spawning_rate",             optional=false,             order=0,             type="double"           }         }       }     },     {       description="",       name="AttackParameterFluid",       order=286,       type={         complex_type="table",         parameters={           {             description="Multiplier applied to the damage of an attack.",             name="damage_modifier",             optional=false,             order=1,             type="double"           },           {             description="Name of the [LuaFluidPrototype](runtime:LuaFluidPrototype).",             name="type",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="AttackParameters",       order=297,       type={         complex_type="table",         parameters={           {             description="List of the names of compatible [LuaAmmoCategoryPrototypes](runtime:LuaAmmoCategoryPrototype).",             name="ammo_categories",             optional=true,             order=16,             type={               complex_type="array",               value="string"             }           },           {             description="Multiplier applied to the ammo consumption of an attack.",             name="ammo_consumption_modifier",             optional=false,             order=10,             type="float"           },           {             description="",             name="ammo_type",             optional=true,             order=15,             type="AmmoType"           },           {             description="Minimum amount of ticks between shots. If this is less than `1`, multiple shots can be performed per tick.",             name="cooldown",             optional=false,             order=11,             type="float"           },           {             description="Multiplier applied to the damage of an attack.",             name="damage_modifier",             optional=false,             order=9,             type="float"           },           {             description="When searching for the nearest enemy to attack, `fire_penalty` is added to the enemy's distance if they are on fire.",             name="fire_penalty",             optional=false,             order=4,             type="float"           },           {             description="When searching for an enemy to attack, a higher `health_penalty` will discourage targeting enemies with high health. A negative penalty will do the opposite.",             name="health_penalty",             optional=false,             order=6,             type="float"           },           {             description="If less than `range`, the entity will choose a random distance between `range` and `min_attack_distance` and attack from that distance. Used for spitters.",             name="min_attack_distance",             optional=false,             order=7,             type="float"           },           {             description="Minimum range of attack. Used with flamethrower turrets to prevent self-immolation.",             name="min_range",             optional=false,             order=2,             type="float"           },           {             description="",             name="movement_slow_down_cooldown",             optional=false,             order=14,             type="float"           },           {             description="",             name="movement_slow_down_factor",             optional=false,             order=13,             type="double"           },           {             description="Maximum range of attack.",             name="range",             optional=false,             order=1,             type="float"           },           {             description="Defines how the range is determined.",             name="range_mode",             optional=false,             order=3,             type="RangeMode"           },           {             description="When searching for an enemy to attack, a higher `rotate_penalty` will discourage targeting enemies that would take longer to turn to face.",             name="rotate_penalty",             optional=false,             order=5,             type="float"           },           {             description="The arc that the entity can attack in as a fraction of a circle. A value of `1` means the full 360 degrees.",             name="turn_range",             optional=false,             order=8,             type="float"           },           {             description="The type of AttackParameter.",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="projectile"                 },                 {                   complex_type="literal",                   value="stream"                 },                 {                   complex_type="literal",                   value="beam"                 }               }             }           },           {             description="Number of ticks it takes for the weapon to actually shoot after it has been ordered to do so.",             name="warmup",             optional=false,             order=12,             type="uint"           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="projectile",             order=0,             parameters={               {                 description="",                 name="projectile_center",                 optional=false,                 order=0,                 type="Vector"               },               {                 description="",                 name="projectile_creation_distance",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="projectile_creation_parameters",                 optional=true,                 order=4,                 type="CircularProjectileCreationSpecification"               },               {                 description="",                 name="projectile_orientation_offset",                 optional=false,                 order=2,                 type="float"               },               {                 description="",                 name="shell_particle",                 optional=true,                 order=3,                 type="CircularParticleCreationSpecification"               }             }           },           {             description="",             name="stream",             order=1,             parameters={               {                 description="",                 name="fluid_consumption",                 optional=false,                 order=2,                 type="float"               },               {                 description="",                 name="fluids",                 optional=true,                 order=3,                 type={                   complex_type="array",                   value="AttackParameterFluid"                 }               },               {                 description="",                 name="gun_barrel_length",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="gun_center_shift",                 optional=false,                 order=1,                 type="GunShift4Way"               },               {                 description="",                 name="projectile_creation_parameters",                 optional=true,                 order=4,                 type="CircularProjectileCreationSpecification"               }             }           }         }       }     },     {       description="",       name="AttackReactionItem",       order=292,       type={         complex_type="table",         parameters={           {             description="",             name="action",             optional=true,             order=1,             type="TriggerItem"           },           {             description="",             name="damage_type",             optional=true,             order=3,             type="LuaDamagePrototype"           },           {             description="",             name="range",             optional=false,             order=0,             type="float"           },           {             description="",             name="reaction_modifier",             optional=false,             order=2,             type="float"           }         }       }     },     {       description="",       name="AutoplaceControl",       order=173,       type={         complex_type="table",         parameters={           {             description="For things that are placed as spots such as ores and enemy bases, frequency is generally proportional to number of spots placed per unit area. For continuous features such as forests, frequency is how compressed the probability function is over distance, i.e. the inverse of 'scale'. When the [LuaAutoplaceControlPrototype](runtime:LuaAutoplaceControlPrototype) is of the category `\"terrain\"`, then scale is shown in the map generator GUI instead of frequency.",             name="frequency",             optional=false,             order=0,             type="MapGenSize"           },           {             description="Has different effects for different things, but generally affects the 'health' or density of a thing that is placed without affecting where it is placed. For trees, richness affects tree health.  For ores, richness multiplies the amount of ore at any given tile in a patch. Metadata about autoplace controls (such as whether or not 'richness' does anything for them) can be found in the [LuaAutoplaceControlPrototype](runtime:LuaAutoplaceControlPrototype) by looking up `prototypes.autoplace_control[(control prototype name)]`, e.g. `prototypes.autoplace_control[\"enemy-base\"].richness` is false, because enemy base autoplacement doesn't use richness.",             name="richness",             optional=false,             order=2,             type="MapGenSize"           },           {             description="For things that are placed as spots, size is proportional to the area of each spot. For continuous features, size affects how much of the map is covered with the thing, and is called 'coverage' in the GUI.",             name="size",             optional=false,             order=1,             type="MapGenSize"           }         }       }     },     {       description="",       name="AutoplaceSettings",       order=175,       type={         complex_type="table",         parameters={           {             description="Always defined when reading autoplace settings.",             name="settings",             optional=true,             order=1,             type={               complex_type="dictionary",               key="string",               value="AutoplaceControl"             }           },           {             description="Whether missing autoplace names for this type should be default enabled. Always defined when reading autoplace settings.",             name="treat_missing_as_default",             optional=true,             order=0,             type="boolean"           }         }       }     },     {       description="Specifies how probability and richness are calculated when placing something on the map.",       name="AutoplaceSpecification",       order=182,       type={         complex_type="table",         parameters={           {             description="Control prototype name.",             name="control",             optional=true,             order=1,             type="string"           },           {             description="",             name="default_enabled",             optional=false,             order=5,             type="boolean"           },           {             description="",             name="force",             optional=false,             order=7,             type="string"           },           {             description="",             name="order",             optional=false,             order=4,             type="string"           },           {             description="",             name="placement_density",             optional=false,             order=0,             type="uint"           },           {             description="",             name="probability_expression",             optional=false,             order=2,             type="NoiseExpressionSourceString"           },           {             description="",             name="richness_expression",             optional=true,             order=3,             type="NoiseExpressionSourceString"           },           {             description="",             name="tile_restriction",             optional=true,             order=6,             type={               complex_type="array",               value="AutoplaceSpecificationRestriction"             }           }         }       }     },     {       description="",       name="AutoplaceSpecificationRestriction",       order=180,       type={         complex_type="table",         parameters={           {             description="Tile prototype name.",             name="first",             optional=true,             order=0,             type="string"           },           {             description="Second prototype name.",             name="second",             optional=true,             order=1,             type="string"           }         }       }     },     {       description="",       name="BeamTarget",       order=239,       type={         complex_type="table",         parameters={           {             description="The target entity.",             name="entity",             optional=true,             order=0,             type="LuaEntity"           },           {             description="The target position.",             name="position",             optional=true,             order=1,             type="MapPosition"           }         }       }     },     {       description="The representation of an entity inside of a blueprint. It has at least these fields, but can contain additional ones depending on the kind of entity.",       name="BlueprintEntity",       order=102,       type={         complex_type="table",         parameters={           {             description="The control behavior of the entity, if it has one. The format of the control behavior depends on the entity's type. Only relevant for entities that support control behaviors.",             name="control_behavior",             optional=true,             order=6,             type="BlueprintControlBehavior"           },           {             description="The direction the entity is facing. Only present for entities that can face in different directions and when the entity is not facing north.",             name="direction",             optional=true,             order=3,             type="defines.direction"           },           {             description="The entity's unique identifier in the blueprint.",             name="entity_number",             optional=false,             order=0,             type="uint"           },           {             description="The items that the entity will request when revived, if any.",             name="items",             optional=true,             order=7,             type={               complex_type="array",               value="BlueprintInsertPlan"             }           },           {             description="Whether this entity is mirrored.",             name="mirror",             optional=true,             order=4,             type="boolean"           },           {             description="The prototype name of the entity.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="The position of the entity.",             name="position",             optional=false,             order=2,             type="MapPosition"           },           {             description="The prototype name of the entity's quality.",             name="quality",             optional=true,             order=5,             type="string"           },           {             description="The schedule of the entity, if it has one. Only relevant for locomotives.",             name="schedule",             optional=true,             order=9,             type="BlueprintSchedule"           },           {             description="The entity tags of the entity, if there are any.",             name="tags",             optional=true,             order=8,             type="Tags"           },           {             description="Wires connected to this entity in the blueprint.",             name="wires",             optional=true,             order=10,             type={               complex_type="array",               value="BlueprintWire"             }           }         }       }     },     {       description="Defines an item type that a blueprint entity will request.",       name="BlueprintInsertPlan",       order=265,       type={         complex_type="table",         parameters={           {             description="The prototype name and quality of the item to request.",             name="id",             optional=false,             order=0,             type="ItemIDAndQualityIDPair"           },           {             description="Describes the inventories to insert these items into.",             name="items",             optional=false,             order=1,             type="ItemInventoryPositions"           }         }       }     },     {       description="",       name="BlueprintLogisticFilter",       order=279,       type={         complex_type="table",         parameters={           {             description="The comparator for quality. `nil` if any quality.",             name="comparator",             optional=true,             order=4,             type="ComparatorString"           },           {             description="",             name="count",             optional=false,             order=5,             type="int"           },           {             description="",             name="import_from",             optional=true,             order=8,             type="string"           },           {             description="",             name="index",             optional=false,             order=0,             type="LogisticFilterIndex"           },           {             description="",             name="max_count",             optional=true,             order=6,             type="ItemCountType"           },           {             description="Defaults to 0.",             name="minimum_delivery_count",             optional=true,             order=7,             type="ItemCountType"           },           {             description="Name of the logistic filter.",             name="name",             optional=true,             order=2,             type="string"           },           {             description="The prototype name of the quality. `nil` for any quality.",             name="quality",             optional=true,             order=3,             type="string"           },           {             description="The type of the logistic filter.",             name="type",             optional=true,             order=1,             type="SignalIDType"           }         }       }     },     {       description="",       name="BlueprintSchedule",       order=155,       type={         complex_type="table",         parameters={           {             description="",             name="group",             optional=true,             order=1,             type="string"           },           {             description="",             name="interrupts",             optional=true,             order=2,             type={               complex_type="array",               value="BlueprintScheduleInterrupt"             }           },           {             description="",             name="records",             optional=true,             order=0,             type={               complex_type="array",               value="BlueprintScheduleRecord"             }           }         }       }     },     {       description="",       name="BlueprintScheduleInterrupt",       order=151,       type={         complex_type="table",         parameters={           {             description="",             name="conditions",             optional=true,             order=1,             type={               complex_type="array",               value="WaitCondition"             }           },           {             description="Defaults to `false`.",             name="inside_interrupt",             optional=true,             order=3,             type="boolean"           },           {             description="Defaults to an empty string.",             name="name",             optional=true,             order=0,             type="string"           },           {             description="",             name="targets",             optional=true,             order=2,             type={               complex_type="array",               value="BlueprintScheduleRecord"             }           }         }       }     },     {       description="",       name="BlueprintScheduleRecord",       order=149,       type={         complex_type="table",         parameters={           {             description="",             name="allows_unloading",             optional=true,             order=4,             type="boolean"           },           {             description="",             name="created_by_interrupt",             optional=true,             order=3,             type="boolean"           },           {             description="Name of the station.",             name="station",             optional=true,             order=0,             type="string"           },           {             description="",             name="temporary",             optional=true,             order=2,             type="boolean"           },           {             description="",             name="wait_conditions",             optional=true,             order=1,             type={               complex_type="array",               value="WaitCondition"             }           }         }       }     },     {       description="",       name="BlueprintSignalIcon",       order=16,       type={         complex_type="table",         parameters={           {             description="Index of the icon in the blueprint icons slots. An integer in the range [1, 4].",             name="index",             optional=false,             order=1,             type="uint"           },           {             description="The icon to use.",             name="signal",             optional=false,             order=0,             type="SignalID"           }         }       }     },     {       description="Describes a single wire in the blueprint. The members of the tuple are, in order:\n\n- `source_entity_number`\n\n- `source_wire_connector_id`\n\n- `target_entity_number`\n\n- `target_wire_connector_id`",       name="BlueprintWire",       order=103,       type={         complex_type="tuple",         values={           "uint",           "defines.wire_connector_id",           "uint",           "defines.wire_connector_id"         }       }     },     {       description="",       name="BlueprintWireEnd",       order=106,       type={         complex_type="table",         parameters={           {             description="",             name="connector",             optional=false,             order=1,             type="defines.wire_connector_id"           },           {             description="",             name="entity",             optional=false,             order=0,             type="BlueprintEntity"           }         }       }     },     {       description="Two positions, specifying the top-left and bottom-right corner of the box respectively. Like with [MapPosition](runtime:MapPosition), the names of the members may be omitted. When read from the game, the third member `orientation` is present if it is non-zero.",       examples={         "```\n-- Explicit definition\n{left_top = {x = -2, y = -3}, right_bottom = {x = 5, y = 8}}\n```",         "```\n-- Shorthand\n{{-2, -3}, {5, 8}}\n```"       },       name="BoundingBox",       order=70,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="left_top",                 optional=false,                 order=0,                 type="MapPosition"               },               {                 description="",                 name="orientation",                 optional=true,                 order=2,                 type="RealOrientation"               },               {                 description="",                 name="right_bottom",                 optional=false,                 order=1,                 type="MapPosition"               }             }           },           {             complex_type="tuple",             values={               "MapPosition",               "MapPosition"             }           }         }       }     },     {       description="",       name="CapsuleAction",       order=117,       type={         complex_type="table",         parameters={           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="throw"                 },                 {                   complex_type="literal",                   value="equipment-remote"                 },                 {                   complex_type="literal",                   value="use-on-self"                 },                 {                   complex_type="literal",                   value="artillery-remote"                 },                 {                   complex_type="literal",                   value="destroy-cliffs"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="artillery-remote",             order=3,             parameters={               {                 description="Name of the [flare prototype](runtime:LuaEntityPrototype).",                 name="flare",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="destroy-cliffs",             order=4,             parameters={               {                 description="",                 name="attack_parameters",                 optional=false,                 order=0,                 type="AttackParameters"               },               {                 description="",                 name="radius",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="timeout",                 optional=false,                 order=2,                 type="uint"               }             }           },           {             description="",             name="equipment-remote",             order=1,             parameters={               {                 description="Name of the [LuaEquipmentPrototype](runtime:LuaEquipmentPrototype).",                 name="equipment",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="throw",             order=0,             parameters={               {                 description="",                 name="attack_parameters",                 optional=false,                 order=0,                 type="AttackParameters"               },               {                 description="Whether using the capsule consumes an item from the stack.",                 name="uses_stack",                 optional=false,                 order=1,                 type="boolean"               }             }           },           {             description="",             name="use-on-self",             order=2,             parameters={               {                 description="",                 name="attack_parameters",                 optional=false,                 order=0,                 type="AttackParameters"               }             }           }         }       }     },     {       description="The destination of a cargo pod.",       name="CargoDestination",       order=89,       type={         complex_type="table",         parameters={           {             description="Only used if `type` is [station](runtime:defines.cargo_destination.station). Must be connected to the station and not reserved.",             name="hatch",             optional=true,             order=2,             type="LuaCargoHatch"           },           {             description="Only used if `type` is [surface](runtime:defines.cargo_destination.surface) and `position` is specified. Determines whether to land at `position` exactly or at a random location nearby. Defaults to `false`.",             name="land_at_exact_position",             optional=true,             order=6,             type="boolean"           },           {             description="Only used if `type` is [surface](runtime:defines.cargo_destination.surface). Determines the position on the surface to land near. If not provided, cargo pod will switch destination type from [surface](runtime:defines.cargo_destination.surface) to [station](runtime:defines.cargo_destination.station) before starting descent if there is a station available, and will land at {0, 0} if there is no station available.",             name="position",             optional=true,             order=5,             type="MapPosition"           },           {             description="Only used if `type` is [space_platform](runtime:defines.cargo_destination.space_platform). Only used for sending space platform starter packs to a platform that is waiting for a starter pack.",             name="space_platform",             optional=true,             order=7,             type="SpacePlatformIdentification"           },           {             description="Only used if `type` is [station](runtime:defines.cargo_destination.station). Must be entity of type `cargo-landing-pad` or `space-platform-hub`.",             name="station",             optional=true,             order=1,             type="LuaEntity"           },           {             description="Only used if `type` is [surface](runtime:defines.cargo_destination.surface).",             name="surface",             optional=true,             order=4,             type="SurfaceIdentification"           },           {             description="Only used if `type` is [station](runtime:defines.cargo_destination.station) or [surface](runtime:defines.cargo_destination.surface). If true, items with [rocket_launch_products](prototype:ItemPrototype::rocket_launch_products) defined will be transformed into their products before starting descent. Defaults to `false`.",             name="transform_launch_products",             optional=true,             order=3,             type="boolean"           },           {             description="The type of destination.",             name="type",             optional=false,             order=0,             type="defines.cargo_destination"           }         }       }     },     {       description="Either `icon`, `text`, or both must be provided.",       name="ChartTagSpec",       order=221,       type={         complex_type="table",         parameters={           {             description="",             name="icon",             optional=true,             order=1,             type="SignalID"           },           {             description="",             name="last_user",             optional=true,             order=3,             type="PlayerIdentification"           },           {             description="",             name="position",             optional=false,             order=0,             type="MapPosition"           },           {             description="",             name="text",             optional=true,             order=2,             type="string"           }         }       }     },     {       description="Coordinates of a chunk in a [LuaSurface](runtime:LuaSurface) where each integer `x`/`y` represents a different chunk. This uses the same format as [MapPosition](runtime:MapPosition), meaning it can be specified either with or without explicit keys. A [MapPosition](runtime:MapPosition) can be translated to a ChunkPosition by dividing the `x`/`y` values by 32.",       name="ChunkPosition",       order=29,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="int"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="int"               }             }           },           {             complex_type="tuple",             values={               "int",               "int"             }           }         }       }     },     {       description="A [ChunkPosition](runtime:ChunkPosition) with an added bounding box for the area of the chunk.",       name="ChunkPositionAndArea",       order=201,       type={         complex_type="table",         parameters={           {             description="",             name="area",             optional=false,             order=2,             type="BoundingBox"           },           {             description="",             name="x",             optional=false,             order=0,             type="int"           },           {             description="",             name="y",             optional=false,             order=1,             type="int"           }         }       }     },     {       description="",       name="CircuitCondition",       order=130,       type={         complex_type="table",         parameters={           {             description="Specifies how the inputs should be compared. If not specified, defaults to `\"<\"`.",             name="comparator",             optional=true,             order=0,             type="ComparatorString"           },           {             description="Constant to compare `first_signal` to. Has no effect when `second_signal` is set. When neither `second_signal` nor `constant` are specified, the effect is as though `constant` were specified with the value `0`.",             name="constant",             optional=true,             order=3,             type="int"           },           {             description="Defaults to blank.",             name="first_signal",             optional=true,             order=1,             type="SignalID"           },           {             description="What to compare `first_signal` to. If not specified, `first_signal` will be compared to `constant`.",             name="second_signal",             optional=true,             order=2,             type="SignalID"           }         }       }     },     {       description="",       name="CircuitConditionDefinition",       order=242,       type={         complex_type="table",         parameters={           {             description="Specifies how the inputs should be compared. If not specified, defaults to `\"<\"`.",             name="comparator",             optional=true,             order=0,             type="ComparatorString"           },           {             description="Constant to compare `first_signal` to. Has no effect when `second_signal` is set. When neither `second_signal` nor `constant` are specified, the effect is as though `constant` were specified with the value `0`.",             name="constant",             optional=true,             order=3,             type="int"           },           {             description="Defaults to blank.",             name="first_signal",             optional=true,             order=1,             type="SignalID"           },           {             description="Whether the condition is currently fulfilled.",             name="fulfilled",             optional=true,             order=4,             type="boolean"           },           {             description="What to compare `first_signal` to. If not specified, `first_signal` will be compared to `constant`.",             name="second_signal",             optional=true,             order=2,             type="SignalID"           }         }       }     },     {       description="",       name="CircuitNetworkSelection",       order=129,       type={         complex_type="table",         parameters={           {             description="Defaults to `true`.",             name="green",             optional=true,             order=1,             type="boolean"           },           {             description="Defaults to `true`.",             name="red",             optional=true,             order=0,             type="boolean"           }         }       }     },     {       description="",       name="CircularParticleCreationSpecification",       order=1,       type={         complex_type="table",         parameters={           {             description="",             name="center",             optional=false,             order=11,             type="Vector"           },           {             description="",             name="creation_distance",             optional=false,             order=12,             type="double"           },           {             description="",             name="creation_distance_orientation",             optional=false,             order=13,             type="double"           },           {             description="",             name="direction",             optional=false,             order=1,             type="float"           },           {             description="",             name="direction_deviation",             optional=false,             order=2,             type="float"           },           {             description="",             name="height",             optional=false,             order=7,             type="float"           },           {             description="",             name="height_deviation",             optional=false,             order=8,             type="float"           },           {             description="Name of the [LuaEntityPrototype](runtime:LuaEntityPrototype).",             name="name",             optional=false,             order=0,             type="string"           },           {             description="",             name="speed",             optional=false,             order=3,             type="float"           },           {             description="",             name="speed_deviation",             optional=false,             order=4,             type="float"           },           {             description="",             name="starting_frame_speed",             optional=false,             order=5,             type="float"           },           {             description="",             name="starting_frame_speed_deviation",             optional=false,             order=6,             type="float"           },           {             description="",             name="use_source_position",             optional=false,             order=14,             type="boolean"           },           {             description="",             name="vertical_speed",             optional=false,             order=9,             type="float"           },           {             description="",             name="vertical_speed_deviation",             optional=false,             order=10,             type="float"           }         }       }     },     {       description="",       name="CircularProjectileCreationSpecification",       order=289,       type={         complex_type="array",         value={           complex_type="tuple",           values={             "RealOrientation",             "Vector"           }         }       }     },     {       description="",       name="CliffOrientation",       order=258,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="west-to-east"           },           {             complex_type="literal",             description="",             value="north-to-south"           },           {             complex_type="literal",             description="",             value="east-to-west"           },           {             complex_type="literal",             description="",             value="south-to-north"           },           {             complex_type="literal",             description="",             value="west-to-north"           },           {             complex_type="literal",             description="",             value="north-to-east"           },           {             complex_type="literal",             description="",             value="east-to-south"           },           {             complex_type="literal",             description="",             value="south-to-west"           },           {             complex_type="literal",             description="",             value="west-to-south"           },           {             complex_type="literal",             description="",             value="north-to-west"           },           {             complex_type="literal",             description="",             value="east-to-north"           },           {             complex_type="literal",             description="",             value="south-to-east"           },           {             complex_type="literal",             description="",             value="west-to-none"           },           {             complex_type="literal",             description="",             value="none-to-east"           },           {             complex_type="literal",             description="",             value="east-to-none"           },           {             complex_type="literal",             description="",             value="none-to-west"           },           {             complex_type="literal",             description="",             value="north-to-none"           },           {             complex_type="literal",             description="",             value="none-to-south"           },           {             complex_type="literal",             description="",             value="south-to-none"           },           {             complex_type="literal",             description="",             value="none-to-north"           }         }       }     },     {       description="",       name="CliffPlacementSettings",       order=174,       type={         complex_type="table",         parameters={           {             description="Elevation at which the first row of cliffs is placed. The default is `10`, and this cannot be set from the map generation GUI.",             name="cliff_elevation_0",             optional=false,             order=2,             type="float"           },           {             description="Elevation difference between successive rows of cliffs. This is inversely proportional to 'frequency' in the map generation GUI. Specifically, when set from the GUI the value is `40 / frequency`.",             name="cliff_elevation_interval",             optional=false,             order=3,             type="float"           },           {             description="Smoothing makes cliffs straighter on rough elevation but makes placement inaccurate. 0 is no smoothing, 1 is full smoothing. Values outside of 0-1 are possible for specific effects but not recommended.",             name="cliff_smoothing",             optional=false,             order=4,             type="float"           },           {             description="Name of the autoplace control prototype.",             name="control",             optional=false,             order=1,             type="string"           },           {             description="Name of the cliff prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Corresponds to 'continuity' in the GUI. This value is not used directly, but is used by the 'cliffiness' noise expression, which in combination with elevation and the two cliff elevation properties drives cliff placement (cliffs are placed when elevation crosses the elevation contours defined by `cliff_elevation_0` and `cliff_elevation_interval` when 'cliffiness' is greater than `0.5`). The default 'cliffiness' expression interprets this value such that larger values result in longer unbroken walls of cliffs, and smaller values (between `0` and `1`) result in larger gaps in cliff walls.",             name="richness",             optional=false,             order=5,             type="MapGenSize"           }         }       }     },     {       description="The name of a [LuaCollisionLayerPrototype](runtime:LuaCollisionLayerPrototype).",       examples={         "```\n\"is_lower_object\"\n```"       },       name="CollisionLayerID",       order=20,       type="string"     },     {       description="",       examples={         "```\n-- Most common collision mask of buildings:\ncollision_mask = {layers = {item = true, meltable = true, object = true, player = true, water_tile = true, is_object = true, is_lower_object = true}}\n```"       },       name="CollisionMask",       order=11,       type={         complex_type="table",         parameters={           {             description="Any prototype with this collision option will only be checked for collision with other prototype's collision masks if they are a tile. Defaults to `false`.",             name="colliding_with_tiles_only",             optional=true,             order=3,             type="boolean"           },           {             description="Uses the prototypes position rather than its collision box when doing collision checks with tile prototypes. Allows the prototype to overlap colliding tiles up until its center point. This is only respected for character movement and cars driven by players. Defaults to `false`.",             name="consider_tile_transitions",             optional=true,             order=2,             type="boolean"           },           {             description="Every key in the dictionary is the name of one [layer](runtime:LuaCollisionLayerPrototype) the object collides with. The value is meaningless and always `true`. An empty table means that no layers are set.",             name="layers",             optional=false,             order=0,             type={               complex_type="dictionary",               key="string",               value={                 complex_type="literal",                 value=true               }             }           },           {             description="Any two entities that both have this option enabled on their prototype and have an identical collision mask layers list will not collide. Other collision mask options are not included in the identical layer list check. This does mean that two different prototypes with the same collision mask layers and this option enabled will not collide. Defaults to `false`.",             name="not_colliding_with_itself",             optional=true,             order=1,             type="boolean"           }         }       }     },     {       description="Red, green, blue and alpha values, all in range [0, 1] or all in range [0, 255] if any value is > 1. All values here are optional. Color channels default to `0`, the alpha channel defaults to `1`.\n\nSimilar to [MapPosition](runtime:MapPosition), Color allows the short-hand notation of passing an array of exactly 3 or 4 numbers. The game usually expects colors to be in pre-multiplied form (color channels are pre-multiplied by alpha).",       examples={         "```\nred1 = {r = 0.5, g = 0, b = 0, a = 0.5}  -- Half-opacity red\nred2 = {r = 0.5, a = 0.5}                -- Same color as red1\nblack = {}                               -- All channels omitted: black\nred1_short = {0.5, 0, 0, 0.5}            -- Same color as red1 in short-hand notation\n```"       },       name="Color",       order=100,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="a",                 optional=true,                 order=3,                 type="float"               },               {                 description="",                 name="b",                 optional=true,                 order=2,                 type="float"               },               {                 description="",                 name="g",                 optional=true,                 order=1,                 type="float"               },               {                 description="",                 name="r",                 optional=true,                 order=0,                 type="float"               }             }           },           {             complex_type="tuple",             values={               "float",               "float",               "float",               "float"             }           }         }       }     },     {       description="Same as [Color](runtime:Color), but red, green, blue and alpha values can be any floating point number, without any special handling of the range [1, 255].",       name="ColorModifier",       order=212,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="a",                 optional=true,                 order=3,                 type="float"               },               {                 description="",                 name="b",                 optional=true,                 order=2,                 type="float"               },               {                 description="",                 name="g",                 optional=true,                 order=1,                 type="float"               },               {                 description="",                 name="r",                 optional=true,                 order=0,                 type="float"               }             }           },           {             complex_type="tuple",             values={               "float",               "float",               "float",               "float"             }           }         }       }     },     {       description="Commands can be given to enemies and unit groups.",       name="Command",       order=33,       type={         complex_type="table",         parameters={           {             description="Type of command. The remaining fields depend on the value of this field.",             name="type",             optional=false,             order=0,             type="defines.command"           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="defines.command.attack",             order=0,             parameters={               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=1,                 type="defines.distraction"               },               {                 description="",                 name="target",                 optional=false,                 order=0,                 type="LuaEntity"               }             }           },           {             description="",             name="defines.command.attack_area",             order=4,             parameters={               {                 description="Center of the attack area.",                 name="destination",                 optional=false,                 order=0,                 type="MapPosition"               },               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=2,                 type="defines.distraction"               },               {                 description="Radius of the attack area.",                 name="radius",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="defines.command.build_base",             order=8,             parameters={               {                 description="Where to build the base.",                 name="destination",                 optional=false,                 order=0,                 type="MapPosition"               },               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=1,                 type="defines.distraction"               },               {                 description="Whether the units should ignore expansion candidate chunks. When `false`, they will obey and not build a base in a non-candidate chunk. Defaults to `false`.",                 name="ignore_planner",                 optional=true,                 order=2,                 type="boolean"               }             }           },           {             description="",             name="defines.command.compound",             order=2,             parameters={               {                 description="The sub-commands.",                 name="commands",                 optional=false,                 order=1,                 type={                   complex_type="array",                   value="Command"                 }               },               {                 description="How the commands should be chained together.",                 name="structure_type",                 optional=false,                 order=0,                 type="defines.compound_command"               }             }           },           {             description="",             name="defines.command.flee",             order=7,             parameters={               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=1,                 type="defines.distraction"               },               {                 description="The entity to flee from",                 name="from",                 optional=false,                 order=0,                 type="LuaEntity"               }             }           },           {             description="",             name="defines.command.go_to_location",             order=1,             parameters={               {                 description="The position to path to. Either this or `destination_entity` need to be specified. If both are, `destination_entity` is used.",                 name="destination",                 optional=true,                 order=0,                 type="MapPosition"               },               {                 description="The entity to path to. Either this or `destination` need to be specified. If both are, `destination_entity` is used.",                 name="destination_entity",                 optional=true,                 order=1,                 type="LuaEntity"               },               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=2,                 type="defines.distraction"               },               {                 description="Flags that affect pathfinder behavior.",                 name="pathfind_flags",                 optional=true,                 order=3,                 type="PathfinderFlags"               },               {                 description="How close the pathfinder needs to get to its destination (in tiles). Defaults to `3`.",                 name="radius",                 optional=true,                 order=4,                 type="double"               }             }           },           {             description="",             name="defines.command.group",             order=3,             parameters={               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=1,                 type="defines.distraction"               },               {                 description="The group whose command to follow.",                 name="group",                 optional=false,                 order=0,                 type="LuaCommandable"               },               {                 description="Whether the unit will use the group distraction or the commands distraction. Defaults to true.",                 name="use_group_distraction",                 optional=true,                 order=2,                 type="boolean"               }             }           },           {             description="",             name="defines.command.stop",             order=6,             parameters={               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=0,                 type="defines.distraction"               },               {                 description="Ticks to wander before successfully completing the command. Default is max uint, which means stop forever.",                 name="ticks_to_wait",                 optional=true,                 order=1,                 type="uint"               }             }           },           {             description="",             name="defines.command.wander",             order=5,             parameters={               {                 description="Defaults to `defines.distraction.by_enemy`.",                 name="distraction",                 optional=true,                 order=0,                 type="defines.distraction"               },               {                 description="Defaults to 10. Does not apply when `wander_in_group` is `true`.",                 name="radius",                 optional=true,                 order=1,                 type="double"               },               {                 description="Ticks to wander before successfully completing the command. Default is max uint, which means wander forever.",                 name="ticks_to_wait",                 optional=true,                 order=3,                 type="uint"               },               {                 description="When commanding a group, defines how the group will wander. When `true`, the units in the group will wander around inside the group's radius, just like gathering biters. When `false`, the units will wander as a group, ie they will all walk together in the same random direction. Default is true for groups. Passing true for a single unit is an error.",                 name="wander_in_group",                 optional=true,                 order=2,                 type="boolean"               }             }           }         }       }     },     {       description="A string that specifies how the inputs should be compared.\n\nWhile the API accepts both versions for `\"less/greater than or equal to\"` and `\"not equal\"`, it'll always return `\"≥\"`, `\"≤\"` or `\"≠\"` respectively when reading them back.",       name="ComparatorString",       order=7,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="\"equal to\"",             value="="           },           {             complex_type="literal",             description="\"greater than\"",             value=">"           },           {             complex_type="literal",             description="\"lesser than\"",             value="<"           },           {             complex_type="literal",             description="\"greater than or equal to\"",             value="≥"           },           {             complex_type="literal",             description="\"greater than or equal to\"",             value=">="           },           {             complex_type="literal",             description="\"lesser than or equal to\"",             value="≤"           },           {             complex_type="literal",             description="\"lesser than or equal to\"",             value="<="           },           {             complex_type="literal",             description="\"not equal to\"",             value="≠"           },           {             complex_type="literal",             description="\"not equal to\"",             value="!="           }         }       }     },     {       description="",       name="CompiledLogisticFilter",       order=278,       type={         complex_type="table",         parameters={           {             description="The comparator for quality. `nil` if any quality.",             name="comparator",             optional=true,             order=4,             type="ComparatorString"           },           {             description="",             name="count",             optional=false,             order=5,             type="int"           },           {             description="",             name="index",             optional=false,             order=0,             type="LogisticFilterIndex"           },           {             description="",             name="max_count",             optional=true,             order=6,             type="ItemCountType"           },           {             description="Defaults to 0.",             name="minimum_delivery_count",             optional=true,             order=7,             type="ItemCountType"           },           {             description="Name of the logistic filter.",             name="name",             optional=true,             order=2,             type="string"           },           {             description="The prototype name of the quality. `nil` for any quality.",             name="quality",             optional=true,             order=3,             type="string"           },           {             description="The type of the logistic filter.",             name="type",             optional=true,             order=1,             type="SignalIDType"           }         }       }     },     {       description="",       name="ConfigurationChangedData",       order=191,       type={         complex_type="table",         parameters={           {             description="`true` when mod prototype migrations have been applied since the last time this save was loaded.",             name="migration_applied",             optional=false,             order=4,             type="boolean"           },           {             description="Dictionary of prototype changes due to [migrations](runtime:migrations). The inner dictionary maps the old prototype name to the new prototype name. The new name will be an empty string if the prototype was removed. Entries are omitted if the old and new prototype name are the same.",             name="migrations",             optional=false,             order=5,             type={               complex_type="dictionary",               key="IDType",               value={                 complex_type="dictionary",                 key="string",                 value="string"               }             }           },           {             description="Dictionary of mod changes. It is indexed by mod name.",             name="mod_changes",             optional=false,             order=2,             type={               complex_type="dictionary",               key="string",               value="ModChangeData"             }           },           {             description="`true` when mod startup settings have changed since the last time this save was loaded.",             name="mod_startup_settings_changed",             optional=false,             order=3,             type="boolean"           },           {             description="New version of the map. Present only when loading map version other than the current version.",             name="new_version",             optional=true,             order=1,             type="string"           },           {             description="Old version of the map. Present only when loading map version other than the current version.",             name="old_version",             optional=true,             order=0,             type="string"           }         }       }     },     {       description="",       name="CraftingQueueItem",       order=184,       type={         complex_type="table",         parameters={           {             description="The amount of items being crafted.",             name="count",             optional=false,             order=2,             type="uint"           },           {             description="The index of the item in the crafting queue.",             name="index",             optional=false,             order=0,             type="uint"           },           {             description="The item is a prerequisite for another item in the queue.",             name="prerequisite",             optional=false,             order=3,             type="boolean"           },           {             description="The recipe being crafted.",             name="recipe",             optional=false,             order=1,             type="string"           }         }       }     },     {       description="",       name="CursorBoxRenderType",       order=19,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="The normal entity selection box. Yellow by default.",             value="entity"           },           {             complex_type="literal",             description="The multiplayer entity selection box which gets tinted using [LuaPlayer::chat_color](runtime:LuaPlayer::chat_color). White by default.",             value="multiplayer-entity"           },           {             complex_type="literal",             description="The selection box used to specify electric poles an entity is connected to. Light blue by default.",             value="electricity"           },           {             complex_type="literal",             description="The selection box used when doing entity copy-paste. Green by default.",             value="copy"           },           {             complex_type="literal",             description="The selection box used when specifying colliding entities. Red by default.",             value="not-allowed"           },           {             complex_type="literal",             description="Light blue by default.",             value="pair"           },           {             complex_type="literal",             description="Light blue by default.",             value="logistics"           },           {             complex_type="literal",             description="White by default.",             value="train-visualization"           },           {             complex_type="literal",             description="Green by default.",             value="blueprint-snap-rectangle"           },           {             complex_type="literal",             description="",             value="spidertron-remote-selected"           },           {             complex_type="literal",             description="",             value="spidertron-remote-to-be-selected"           }         }       }     },     {       description="",       name="CustomCommandData",       order=202,       type={         complex_type="table",         parameters={           {             description="The name of the command.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="The parameter passed after the command, if there is one.",             name="parameter",             optional=true,             order=3,             type="string"           },           {             description="The player who issued the command, or `nil` if it was issued from the server console.",             name="player_index",             optional=true,             order=2,             type="uint"           },           {             description="The tick the command was used in.",             name="tick",             optional=false,             order=1,             type="uint"           }         }       }     },     {       description="",       name="CustomEntityStatus",       order=270,       type={         complex_type="table",         parameters={           {             description="",             name="diode",             optional=false,             order=0,             type="defines.entity_status_diode"           },           {             description="",             name="label",             optional=false,             order=1,             type="LocalisedString"           }         }       }     },     {       description="",       name="CutsceneWaypoint",       order=235,       type={         complex_type="table",         parameters={           {             description="Position to pan the camera to.",             name="position",             optional=true,             order=0,             type="MapPosition"           },           {             description="Entity or unit group to pan the camera to.",             name="target",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 "LuaEntity",                 "LuaCommandable"               }             }           },           {             description="Time in ticks to wait before moving to the next waypoint.",             name="time_to_wait",             optional=false,             order=3,             type="uint"           },           {             description="How many ticks it will take to reach this waypoint from the previous one.",             name="transition_time",             optional=false,             order=2,             type="uint"           },           {             description="Zoom level to be set when the waypoint is reached. When not specified, the previous waypoint's zoom is used.",             name="zoom",             optional=true,             order=4,             type="double"           }         }       }     },     {       description="",       name="DamageTypeFilters",       order=294,       type={         complex_type="table",         parameters={           {             description="The damage types to filter for. The value in the dictionary is meaningless and exists just to allow for easy lookup.",             name="types",             optional=false,             order=1,             type={               complex_type="dictionary",               key="string",               value={                 complex_type="literal",                 value=true               }             }           },           {             description="Whether this is a whitelist or a blacklist of damage types. `true` means whitelist.",             name="whitelist",             optional=false,             order=0,             type="boolean"           }         }       }     },     {       description="A damage type prototype may be specified in one of two ways.",       name="DamageTypeID",       order=57,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The damage type prototype.",             value="LuaDamagePrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="DeciderCombinatorCondition",       order=135,       type={         complex_type="table",         parameters={           {             description="Specifies how the inputs should be compared. If not specified, defaults to `\"<\"`.",             name="comparator",             optional=true,             order=5,             type="ComparatorString"           },           {             description="Tells how this condition is compared with the preceding conditions in the corresponding `conditions` array. Defaults to `\"or\"`.",             name="compare_type",             optional=true,             order=6,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="and"                 },                 {                   complex_type="literal",                   value="or"                 }               }             }           },           {             description="Constant to compare `first_signal` to. Has no effect when `second_signal` is set. When neither `second_signal` nor `constant` are specified, the effect is as though `constant` were specified with the value `0`.",             name="constant",             optional=true,             order=4,             type="int"           },           {             description="Defaults to blank",             name="first_signal",             optional=true,             order=0,             type="SignalID"           },           {             description="Which circuit networks (red/green) to read `first_signal` from. Defaults to both.",             name="first_signal_networks",             optional=true,             order=1,             type="CircuitNetworkSelection"           },           {             description="What to compare `first_signal` to. If not specified, `first_signal` will be compared to `constant`.",             name="second_signal",             optional=true,             order=2,             type="SignalID"           },           {             description="Which circuit networks (red/green) to read `second_signal` from. Defaults to both.",             name="second_signal_networks",             optional=true,             order=3,             type="CircuitNetworkSelection"           }         }       }     },     {       description="",       name="DeciderCombinatorOutput",       order=136,       type={         complex_type="table",         parameters={           {             description="Defaults to `true`. When `false`, will output a value of `1` for the given `output_signal`.",             name="copy_count_from_input",             optional=true,             order=1,             type="boolean"           },           {             description="Sets which input network to read the value of `signal` from if `copy_count_from_input` is `true`. Defaults to both.",             name="networks",             optional=true,             order=2,             type="CircuitNetworkSelection"           },           {             description="Specifies a signal to output.",             name="signal",             optional=false,             order=0,             type="SignalID"           }         }       }     },     {       description="",       name="DeciderCombinatorParameters",       order=134,       type={         complex_type="table",         parameters={           {             description="List of conditions.",             name="conditions",             optional=false,             order=0,             type={               complex_type="array",               value="DeciderCombinatorCondition"             }           },           {             description="List of outputs.",             name="outputs",             optional=false,             order=1,             type={               complex_type="array",               value="DeciderCombinatorOutput"             }           }         }       }     },     {       description="",       name="Decorative",       order=213,       type={         complex_type="table",         parameters={           {             description="",             name="amount",             optional=false,             order=2,             type="uint8"           },           {             description="The name of the decorative prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="",             name="position",             optional=false,             order=1,             type="TilePosition"           }         }       }     },     {       description="A decorative prototype may be specified in one of two ways.",       name="DecorativeID",       order=76,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The decorative prototype.",             value="LuaDecorativePrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="DecorativePrototypeFilter",       order=320,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="decal"                 },                 {                   complex_type="literal",                   value="autoplace"                 },                 {                   complex_type="literal",                   value="collision-mask"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="collision-mask",             order=0,             parameters={               {                 description="Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.",                 name="mask",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "CollisionLayerID",                     "CollisionMask"                   }                 }               },               {                 description="How to filter.",                 name="mask_mode",                 optional=false,                 order=1,                 type={                   complex_type="union",                   full_format=false,                   options={                     {                       complex_type="literal",                       value="collides"                     },                     {                       complex_type="literal",                       value="layers-equals"                     },                     {                       complex_type="literal",                       value="contains-any"                     },                     {                       complex_type="literal",                       value="contains-all"                     }                   }                 }               }             }           }         }       }     },     {       description="",       name="DecorativeResult",       order=214,       type={         complex_type="table",         parameters={           {             description="",             name="amount",             optional=false,             order=2,             type="uint"           },           {             description="",             name="decorative",             optional=false,             order=1,             type="LuaDecorativePrototype"           },           {             description="",             name="position",             optional=false,             order=0,             type="TilePosition"           }         }       }     },     {       description="",       name="DetailedItemOnLine",       order=199,       type={         complex_type="table",         parameters={           {             description="Linear position of this stack on this line.",             name="position",             optional=false,             order=1,             type="float"           },           {             description="",             name="stack",             optional=false,             order=0,             type="LuaItemStack"           },           {             description="Unique identifier of this item while it is on transport lines.",             name="unique_id",             optional=false,             order=2,             type="uint"           }         }       }     },     {       description="Technology difficulty settings. Updating any of the attributes will immediately take effect in the game engine.",       name="DifficultySettings",       order=192,       type={         attributes={           {             description="A value in range [0.01, 100].",             name="spoil_time_modifier",             optional=false,             order=1,             read_type="double",             write_type="double"           },           {             description="A value in range [0.001, 1000].",             name="technology_price_multiplier",             optional=false,             order=0,             read_type="double",             write_type="double"           }         },         complex_type="LuaStruct"       }     },     {       description="",       name="DisplayPanelMessageDefinition",       order=128,       type={         complex_type="table",         parameters={           {             description="The circuit condition under which to show the message.",             name="condition",             optional=false,             order=2,             type="CircuitConditionDefinition"           },           {             description="The icon to show alongside the message.",             name="icon",             optional=false,             order=1,             type="SignalID"           },           {             description="The message to show.",             name="text",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="DisplayResolution",       order=238,       type={         complex_type="table",         parameters={           {             description="",             name="height",             optional=false,             order=1,             type="uint"           },           {             description="",             name="width",             optional=false,             order=0,             type="uint"           }         }       }     },     {       description="",       name="DragTarget",       order=237,       type={         complex_type="table",         parameters={           {             description="",             name="target_entity",             optional=false,             order=0,             type="LuaEntity"           },           {             description="Identifier of the wire connector from which the wire is being dragged.",             name="wire_connector_id",             optional=false,             order=1,             type="defines.wire_connector_id"           }         }       }     },     {       description="",       name="EffectReceiver",       order=43,       type={         complex_type="table",         parameters={           {             description="",             name="base_effect",             optional=false,             order=0,             type="ModuleEffects"           },           {             description="",             name="uses_beacon_effects",             optional=false,             order=2,             type="boolean"           },           {             description="",             name="uses_module_effects",             optional=false,             order=1,             type="boolean"           },           {             description="Controls whether [LuaSurface::global_effect](runtime:LuaSurface::global_effect) affects this receiver.",             name="uses_surface_effects",             optional=false,             order=3,             type="boolean"           }         }       }     },     {       description="An item thrown overboard on a space platform.",       name="EjectedItem",       order=144,       type={         complex_type="table",         parameters={           {             description="",             name="creation_tick",             optional=false,             order=4,             type="MapTick"           },           {             description="",             name="expiration_tick",             optional=false,             order=5,             type="MapTick"           },           {             description="",             name="item",             optional=false,             order=0,             type="ItemWithQualityID"           },           {             description="",             name="movement",             optional=false,             order=2,             type="Vector"           },           {             description="",             name="platform_speed_at_creation",             optional=false,             order=3,             type="double"           },           {             description="",             name="position",             optional=false,             order=1,             type="MapPosition"           }         }       }     },     {       description="",       name="ElemID",       order=27,       type={         complex_type="table",         parameters={           {             description="Name of a prototype as defined by `type`.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="Name of a quality prototype if `type` use quality.",             name="quality",             optional=true,             order=2,             type="string"           },           {             description="",             name="type",             optional=false,             order=0,             type="ElemType"           }         }       }     },     {       description="A [string](runtime:string) specifying a type for [choose elem buttons](runtime:LuaGuiElement::elem_type). It's also used by [ElemID](runtime:ElemID) for [LuaGuiElement::elem_tooltip](runtime:LuaGuiElement::elem_tooltip).",       name="ElemType",       order=26,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="achievement"           },           {             complex_type="literal",             description="",             value="decorative"           },           {             complex_type="literal",             description="",             value="entity"           },           {             complex_type="literal",             description="",             value="equipment"           },           {             complex_type="literal",             description="",             value="fluid"           },           {             complex_type="literal",             description="",             value="item"           },           {             complex_type="literal",             description="",             value="item-group"           },           {             complex_type="literal",             description="",             value="recipe"           },           {             complex_type="literal",             description="",             value="signal"           },           {             complex_type="literal",             description="",             value="technology"           },           {             complex_type="literal",             description="",             value="tile"           },           {             complex_type="literal",             description="",             value="asteroid-chunk"           },           {             complex_type="literal",             description="",             value="space-location"           },           {             complex_type="literal",             description="",             value="item-with-quality"           },           {             complex_type="literal",             description="",             value="entity-with-quality"           },           {             complex_type="literal",             description="",             value="recipe-with-quality"           },           {             complex_type="literal",             description="",             value="equipment-with-quality"           }         }       }     },     {       description="These values represent a percentual increase in evolution. This means a value of `0.1` would increase evolution by 10%.",       name="EnemyEvolutionMapSettings",       order=172,       type={         complex_type="table",         parameters={           {             description="The amount evolution progresses for every destroyed spawner. Defaults to `0.002`.",             name="destroy_factor",             optional=false,             order=2,             type="double"           },           {             description="Whether enemy evolution is enabled at all.",             name="enabled",             optional=false,             order=0,             type="boolean"           },           {             description="The amount evolution progresses for every unit of pollution. Defaults to `0.0000009`.",             name="pollution_factor",             optional=false,             order=3,             type="double"           },           {             description="The amount evolution naturally progresses by every second. Defaults to `0.000004`.",             name="time_factor",             optional=false,             order=1,             type="double"           }         }       }     },     {       description="Candidate chunks are given scores to determine which one of them should be expanded into. This score takes into account various settings noted below. The iteration is over a square region centered around the chunk for which the calculation is done, and includes the central chunk as well. Distances are calculated as [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry).\n\nThe pseudocode algorithm to determine a chunk's score is as follows:\n\n```\nplayer = 0\nfor neighbour in all chunks within enemy_building_influence_radius from chunk:\n  player += number of player buildings on neighbour\n    * building_coefficient\n    * neighbouring_chunk_coefficient^distance(chunk, neighbour)\nbase = 0\nfor neighbour in all chunk within friendly_base_influence_radius from chunk:\n  base += num of enemy bases on neighbour\n    * other_base_coefficient\n    * neighbouring_base_chunk_coefficient^distance(chunk, neighbour)\nscore(chunk) = 1 / (1 + player + base)\n```",       name="EnemyExpansionMapSettings",       order=161,       type={         complex_type="table",         parameters={           {             description="Defaults to `0.1`.",             name="building_coefficient",             optional=false,             order=4,             type="double"           },           {             description="Whether enemy expansion is enabled at all.",             name="enabled",             optional=false,             order=0,             type="boolean"           },           {             description="Defaults to `2`.",             name="enemy_building_influence_radius",             optional=false,             order=3,             type="uint"           },           {             description="Defaults to `2`.",             name="friendly_base_influence_radius",             optional=false,             order=2,             type="uint"           },           {             description="A chunk has to have at most this high of a percentage of unbuildable tiles for it to be considered a candidate to avoid chunks full of water as candidates. Defaults to `0.9`, or 90%.",             name="max_colliding_tiles_coefficient",             optional=false,             order=8,             type="double"           },           {             description="The maximum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `60*3 600=216 000` ticks.",             name="max_expansion_cooldown",             optional=false,             order=12,             type="uint"           },           {             description="Distance in chunks from the furthest base around to prevent expansions from reaching too far into the player's territory. Defaults to `7`.",             name="max_expansion_distance",             optional=false,             order=1,             type="uint"           },           {             description="The minimum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `4*3 600=14 400` ticks.",             name="min_expansion_cooldown",             optional=false,             order=11,             type="uint"           },           {             description="Defaults to `0.4`.",             name="neighbouring_base_chunk_coefficient",             optional=false,             order=7,             type="double"           },           {             description="Defaults to `0.5`.",             name="neighbouring_chunk_coefficient",             optional=false,             order=6,             type="double"           },           {             description="Defaults to `2.0`.",             name="other_base_coefficient",             optional=false,             order=5,             type="double"           },           {             description="The maximum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `20`.",             name="settler_group_max_size",             optional=false,             order=10,             type="uint"           },           {             description="The minimum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `5`.",             name="settler_group_min_size",             optional=false,             order=9,             type="uint"           }         }       }     },     {       description="An entity prototype may be specified in one of three ways.",       name="EntityID",       order=53,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The entity prototype.",             value="LuaEntityPrototype"           },           {             complex_type="type",             description="The entity.",             value="LuaEntity"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="An entity prototype with optional quality specification.",       name="EntityIDAndQualityIDPair",       order=49,       type={         complex_type="table",         parameters={           {             description="Entity prototype.",             name="name",             optional=false,             order=0,             type="EntityID"           },           {             description="Quality prototype. Normal quality will be used if not specified.",             name="quality",             optional=true,             order=1,             type="QualityID"           }         }       }     },     {       description="",       name="EntityIDFilter",       order=246,       type={         complex_type="table",         parameters={           {             description="The quality comparison type.",             name="comparator",             optional=true,             order=2,             type="ComparatorString"           },           {             description="The entity name.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="The name of the quality.",             name="quality",             optional=true,             order=1,             type="string"           }         }       }     },     {       description="",       name="EntityPrototypeFilter",       order=329,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="flying-robot"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="explosion"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="buildable"                 },                 {                   complex_type="literal",                   value="placable-in-editor"                 },                 {                   complex_type="literal",                   value="clonable"                 },                 {                   complex_type="literal",                   value="selectable"                 },                 {                   complex_type="literal",                   value="hidden"                 },                 {                   complex_type="literal",                   value="entity-with-health"                 },                 {                   complex_type="literal",                   value="building"                 },                 {                   complex_type="literal",                   value="fast-replaceable"                 },                 {                   complex_type="literal",                   value="uses-direction"                 },                 {                   complex_type="literal",                   value="minable"                 },                 {                   complex_type="literal",                   value="circuit-connectable"                 },                 {                   complex_type="literal",                   value="autoplace"                 },                 {                   complex_type="literal",                   value="blueprintable"                 },                 {                   complex_type="literal",                   value="item-to-place"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="collision-mask"                 },                 {                   complex_type="literal",                   value="flag"                 },                 {                   complex_type="literal",                   value="build-base-evolution-requirement"                 },                 {                   complex_type="literal",                   value="selection-priority"                 },                 {                   complex_type="literal",                   value="emissions-per-second"                 },                 {                   complex_type="literal",                   value="crafting-category"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="build-base-evolution-requirement",             order=4,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="Usage example:\n\n```\nprototypes.get_entity_filtered({{filter = \"collision-mask\", mask = \"player\", mask_mode = \"collides\"}})\n```",             name="collision-mask",             order=2,             parameters={               {                 description="Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.",                 name="mask",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "CollisionLayerID",                     "CollisionMask"                   }                 }               },               {                 description="",                 name="mask_mode",                 optional=false,                 order=1,                 type={                   complex_type="union",                   full_format=false,                   options={                     {                       complex_type="literal",                       value="collides"                     },                     {                       complex_type="literal",                       value="layers-equals"                     },                     {                       complex_type="literal",                       value="contains-any"                     },                     {                       complex_type="literal",                       value="contains-all"                     }                   }                 }               }             }           },           {             description="",             name="crafting-category",             order=7,             parameters={               {                 description="Matches if the prototype is for a crafting machine with this [crafting category](runtime:LuaEntityPrototype::crafting_categories).",                 name="crafting_category",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="emissions-per-second",             order=6,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=1,                 type="ComparatorString"               },               {                 description="The name of a pollutant type to check.",                 name="pollutant",                 optional=false,                 order=0,                 type="string"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=2,                 type="double"               }             }           },           {             description="Usage example:\n\n```\nprototypes.get_entity_filtered({{filter = \"flag\", flag = \"placeable-player\"}, {filter = \"flag\", flag = \"placeable-enemy\", mode = \"and\"}})\n```",             name="flag",             order=3,             parameters={               {                 description="",                 name="flag",                 optional=false,                 order=0,                 type="EntityPrototypeFlag"               }             }           },           {             description="For use within nested filters such as the `place-result` filter of array[[ItemPrototypeFilter](runtime:ItemPrototypeFilter)].\n\nTo get a specific prototype by name, see [LuaPrototypes::entity](runtime:LuaPrototypes::entity).",             name="name",             order=0,             parameters={               {                 description="The prototype name, or list of acceptable names.",                 name="name",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           },           {             description="",             name="selection-priority",             order=5,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint8"               }             }           },           {             description="Usage example: \n```\nprototypes.get_entity_filtered({{filter = \"type\", type = \"unit\"}})\n```",             name="type",             order=1,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="A [string](runtime:string) specifying an entity prototype flag.",       name="EntityPrototypeFlag",       order=249,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="Prevents the entity from being rotated before or after placement.",             value="not-rotatable"           },           {             complex_type="literal",             description="Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.",             value="placeable-neutral"           },           {             complex_type="literal",             description="Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.",             value="placeable-player"           },           {             complex_type="literal",             description="Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.",             value="placeable-enemy"           },           {             complex_type="literal",             description="Determines whether the entity needs to be aligned with the invisible grid within the world. Most entities are confined in this way, with a few exceptions such as trees and land mines.",             value="placeable-off-grid"           },           {             complex_type="literal",             description="Makes it possible to blueprint, deconstruct, and repair the entity (which can be turned off again using the specific flags). Makes it possible for the biter AI to target the entity as a distraction. Enables dust to automatically be created when building the entity. If the entity does not have a `map_color` set, this flag makes the entity appear on the map with the default color specified by the UtilityConstants.",             value="player-creation"           },           {             complex_type="literal",             description="Uses 45 degree angle increments when selecting direction.",             value="building-direction-8-way"           },           {             complex_type="literal",             description="Used to automatically detect the proper direction of the entity if possible. Used by the pump, train stop, and train signal by default.",             value="filter-directions"           },           {             complex_type="literal",             description="When set, entity will be possible to obtain by using [LuaGameScript::get_entity_by_unit_number](runtime:LuaGameScript::get_entity_by_unit_number).",             value="get-by-unit-number"           },           {             complex_type="literal",             description="Used to specify that the entity breathes air, and is thus affected by poison.",             value="breaths-air"           },           {             complex_type="literal",             description="Used to specify that the entity can not be 'healed' by repair packs.",             value="not-repairable"           },           {             complex_type="literal",             description="Prevents the entity from being drawn on the map.",             value="not-on-map"           },           {             complex_type="literal",             description="Prevents the entity from being deconstructed.",             value="not-deconstructable"           },           {             complex_type="literal",             description="Prevents the entity from being part of a blueprint.",             value="not-blueprintable"           },           {             complex_type="literal",             description="Hides the alt-info of this entity when in alt-mode.",             value="hide-alt-info"           },           {             complex_type="literal",             description="Does not apply fire stickers to the entity.",             value="not-flammable"           },           {             complex_type="literal",             description="Prevents inserters and loaders from taking items from this entity.",             value="no-automated-item-removal"           },           {             complex_type="literal",             description="Prevents inserters and loaders from inserting items into this entity.",             value="no-automated-item-insertion"           },           {             complex_type="literal",             description="Prevents the entity from being copy-pasted.",             value="no-copy-paste"           },           {             complex_type="literal",             description="Disallows selection of the entity even when a selection box is specified for other reasons. For example, selection boxes are used to determine the size of outlines to be shown when highlighting entities inside electric pole ranges.",             value="not-selectable-in-game"           },           {             complex_type="literal",             description="Prevents the entity from being selected by the upgrade planner.",             value="not-upgradable"           },           {             complex_type="literal",             description="Prevents the entity from being shown in the kill statistics.",             value="not-in-kill-statistics"           },           {             complex_type="literal",             description="",             value="building-direction-16-way"           },           {             complex_type="literal",             description="",             value="snap-to-rail-support-spot"           },           {             complex_type="literal",             description="Prevents the entity from being shown in the \"made in\" list in recipe tooltips.",             value="not-in-made-in"           }         }       }     },     {       description="A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.\n\nBy default, none of these flags are set.",       name="EntityPrototypeFlags",       order=248,       type={         complex_type="dictionary",         key="EntityPrototypeFlag",         value={           complex_type="literal",           value=true         }       }     },     {       description="",       name="EntitySearchFilters",       order=208,       type={         complex_type="table",         parameters={           {             description="",             name="area",             optional=true,             order=0,             type="BoundingBox"           },           {             description="",             name="collision_mask",             optional=true,             order=8,             type={               complex_type="union",               full_format=false,               options={                 "CollisionLayerID",                 {                   complex_type="array",                   value="CollisionLayerID"                 },                 {                   complex_type="dictionary",                   key="CollisionLayerID",                   value={                     complex_type="literal",                     value=true                   }                 }               }             }           },           {             description="",             name="direction",             optional=true,             order=7,             type={               complex_type="union",               full_format=false,               options={                 "defines.direction",                 {                   complex_type="array",                   value="defines.direction"                 }               }             }           },           {             description="",             name="force",             optional=true,             order=9,             type="ForceSet"           },           {             description="An empty array means nothing matches the ghost_name filter.",             name="ghost_name",             optional=true,             order=5,             type={               complex_type="union",               full_format=false,               options={                 "EntityID",                 {                   complex_type="array",                   value="EntityID"                 }               }             }           },           {             description="An empty array means nothing matches the ghost_type filter.",             name="ghost_type",             optional=true,             order=6,             type={               complex_type="union",               full_format=false,               options={                 "string",                 {                   complex_type="array",                   value="string"                 }               }             }           },           {             description="",             name="has_item_inside",             optional=true,             order=14,             type="ItemWithQualityID"           },           {             description="Whether the filters should be inverted.",             name="invert",             optional=true,             order=16,             type="boolean"           },           {             description="",             name="is_military_target",             optional=true,             order=13,             type="boolean"           },           {             description="",             name="limit",             optional=true,             order=12,             type="uint"           },           {             description="An empty array means nothing matches the name filter.",             name="name",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 "EntityID",                 {                   complex_type="array",                   value="EntityID"                 }               }             }           },           {             description="Has precedence over area field.",             name="position",             optional=true,             order=1,             type="MapPosition"           },           {             description="",             name="quality",             optional=true,             order=15,             type="QualityCondition"           },           {             description="If given with position, will return all entities within the radius of the position.",             name="radius",             optional=true,             order=2,             type="double"           },           {             description="",             name="to_be_deconstructed",             optional=true,             order=10,             type="boolean"           },           {             description="",             name="to_be_upgraded",             optional=true,             order=11,             type="boolean"           },           {             description="An empty array means nothing matches the type filter.",             name="type",             optional=true,             order=4,             type={               complex_type="union",               full_format=false,               options={                 "string",                 {                   complex_type="array",                   value="string"                 }               }             }           }         }       }     },     {       description="An entity prototype with optional quality specification. Can be specified in one of four ways.",       name="EntityWithQualityID",       order=48,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The entity. Both prototype and quality of the entity will be used.",             value="LuaEntity"           },           {             complex_type="type",             description="The entity prototype. Normal quality will be used.",             value="LuaEntityPrototype"           },           {             complex_type="type",             description="The prototype name. Normal quality will be used.",             value="string"           },           {             complex_type="type",             description="A table of entity prototype and quality.",             value="EntityIDAndQualityIDPair"           }         }       }     },     {       description="An equipment prototype may be specified in one of three ways.",       name="EquipmentID",       order=66,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The equipment prototype.",             value="LuaEquipmentPrototype"           },           {             complex_type="type",             description="The equipment.",             value="LuaEquipment"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="An equipment prototype with optional quality specification.",       name="EquipmentIDAndQualityIDPair",       order=68,       type={         complex_type="table",         parameters={           {             description="Equipment prototype.",             name="name",             optional=false,             order=0,             type="EquipmentID"           },           {             description="Quality prototype. Normal quality will be used if not specified.",             name="quality",             optional=true,             order=1,             type="QualityID"           }         }       }     },     {       description="A table used to define a manual shape for a piece of equipment.",       name="EquipmentPoint",       order=217,       type={         complex_type="table",         parameters={           {             description="",             name="x",             optional=false,             order=0,             type="uint"           },           {             description="",             name="y",             optional=false,             order=1,             type="uint"           }         }       }     },     {       description="Position inside an equipment grid. This uses the same format as [MapPosition](runtime:MapPosition), meaning it can be specified either with or without explicit keys.",       examples={         "```\n-- Explicit definition\n{x = 5, y = 2}\n{y = 2, x = 5}\n```",         "```\n-- Shorthand\n{1, 2}\n```"       },       name="EquipmentPosition",       order=125,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="int"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="int"               }             }           },           {             complex_type="tuple",             values={               "int",               "int"             }           }         }       }     },     {       description="",       name="EquipmentPrototypeFilter",       order=327,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="item-to-place"                 },                 {                   complex_type="literal",                   value="type"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="",       name="EquipmentWithQualityCounts",       order=39,       type={         complex_type="table",         parameters={           {             description="The number of equipment items.",             name="count",             optional=false,             order=1,             type="uint"           },           {             description="Name of the equipment prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Name of the equipment's quality prototype.",             name="quality",             optional=false,             order=2,             type="string"           }         }       }     },     {       description="An equipment prototype with optional quality specification.",       name="EquipmentWithQualityID",       order=67,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The equipment prototype. Normal quality will be used.",             value="LuaEquipmentPrototype"           },           {             complex_type="type",             description="The equipment. Both prototype and quality of the provided equipment will be used.",             value="LuaEquipment"           },           {             complex_type="type",             description="The prototype name. Normal quality will be used.",             value="string"           },           {             complex_type="type",             description="A table of equipment prototype and quality.",             value="EquipmentIDAndQualityIDPair"           }         }       }     },     {       description="Information about the event that has been raised. The table can also contain other fields depending on the type of event. See [the list of Factorio events](runtime:events) for more information on these.",       name="EventData",       order=186,       type={         complex_type="table",         parameters={           {             description="The name of the mod that raised the event if it was raised using [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event).",             name="mod_name",             optional=true,             order=2,             type="string"           },           {             description="The identifier of the event this handler was registered to.",             name="name",             optional=false,             order=0,             type="defines.events"           },           {             description="The tick during which the event happened.",             name="tick",             optional=false,             order=1,             type="uint"           }         }       }     },     {       description="Used to filter out irrelevant event callbacks in a performant way.\n\nFilters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.",       name="EventFilter",       order=241,       type={         complex_type="array",         value={           complex_type="union",           full_format=true,           options={             {               complex_type="type",               description="",               value="LuaScriptRaisedTeleportedEventFilter"             },             {               complex_type="type",               description="",               value="LuaPreRobotMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaScriptRaisedBuiltEventFilter"             },             {               complex_type="type",               description="",               value="LuaPlatformMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaRobotBuiltEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaPrePlayerMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityDeconstructionCancelledEventFilter"             },             {               complex_type="type",               description="",               value="LuaPreGhostUpgradedEventFilter"             },             {               complex_type="type",               description="",               value="LuaPlatformBuiltEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaPrePlatformMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityClonedEventFilter"             },             {               complex_type="type",               description="",               value="LuaPlayerRepairedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaPostEntityDiedEventFilter"             },             {               complex_type="type",               description="",               value="LuaPreGhostDeconstructedEventFilter"             },             {               complex_type="type",               description="",               value="LuaPlayerMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaSectorScannedEventFilter"             },             {               complex_type="type",               description="",               value="LuaRobotMinedEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityMarkedForDeconstructionEventFilter"             },             {               complex_type="type",               description="",               value="LuaScriptRaisedReviveEventFilter"             },             {               complex_type="type",               description="",               value="LuaPlayerBuiltEntityEventFilter"             },             {               complex_type="type",               description="",               value="LuaUpgradeCancelledEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityDamagedEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityDiedEventFilter"             },             {               complex_type="type",               description="",               value="LuaEntityMarkedForUpgradeEventFilter"             },             {               complex_type="type",               description="",               value="LuaScriptRaisedDestroyEventFilter"             }           }         }       }     },     {       description="",       name="ExplosionDefinition",       order=252,       type={         complex_type="table",         parameters={           {             description="",             name="name",             optional=false,             order=0,             type="LuaEntityPrototype"           },           {             description="",             name="offset",             optional=false,             order=1,             type="Vector"           }         }       }     },     {       description="",       name="FactoriopediaID",       order=283,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="",             value="LuaItemPrototype"           },           {             complex_type="type",             description="",             value="LuaFluidPrototype"           },           {             complex_type="type",             description="",             value="LuaRecipePrototype"           },           {             complex_type="type",             description="",             value="LuaEntityPrototype"           },           {             complex_type="type",             description="",             value="LuaTilePrototype"           },           {             complex_type="type",             description="",             value="LuaSpaceLocationPrototype"           },           {             complex_type="type",             description="Does not actually have an entry in Factoriopedia.",             value="LuaTechnologyPrototype"           },           {             complex_type="type",             description="",             value="LuaAmmoCategoryPrototype"           },           {             complex_type="type",             description="",             value="LuaSpaceConnectionPrototype"           },           {             complex_type="type",             description="",             value="LuaAsteroidChunkPrototype"           },           {             complex_type="type",             description="",             value="LuaVirtualSignalPrototype"           },           {             complex_type="type",             description="",             value="LuaSurfacePrototype"           }         }       }     },     {       description="Identifies a statistics prototype, depending on the statistics type.",       name="FlowStatisticsID",       order=2,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Used with item production statistics.",             value="ItemWithQualityID"           },           {             complex_type="type",             description="Used with fluid production statistics.",             value="FluidID"           },           {             complex_type="type",             description="Used with electric network, entity build count, and kill count statistics.",             value="EntityWithQualityID"           },           {             complex_type="type",             description="Used with pollution statistics.",             value="EntityID"           }         }       }     },     {       description="",       name="Fluid",       order=65,       type={         complex_type="table",         parameters={           {             description="Amount of the fluid.",             name="amount",             optional=false,             order=1,             type="double"           },           {             description="Fluid prototype name of the fluid.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="The temperature. When reading from [LuaFluidBox](runtime:LuaFluidBox), this field will always be present. It is not necessary to specify it when writing, however. When not specified, the fluid will be set to the fluid's default temperature as specified in the fluid's prototype.",             name="temperature",             optional=true,             order=2,             type="float"           }         }       }     },     {       description="",       name="FluidBoxConnectionRecord",       order=196,       type={         complex_type="table",         parameters={           {             description="",             name="other_entity",             optional=false,             order=1,             type="LuaEntity"           },           {             description="",             name="other_linked_connection_id",             optional=false,             order=2,             type="uint"           },           {             description="",             name="this_linked_connection_id",             optional=false,             order=0,             type="uint"           }         }       }     },     {       description="",       name="FluidBoxFilter",       order=194,       type={         complex_type="table",         parameters={           {             description="The maximum temperature allowed into the fluidbox.",             name="maximum_temperature",             optional=false,             order=2,             type="float"           },           {             description="The minimum temperature allowed into the fluidbox.",             name="minimum_temperature",             optional=false,             order=1,             type="float"           },           {             description="Fluid prototype name of the filtered fluid.",             name="name",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="FluidBoxFilterSpec",       order=195,       type={         complex_type="table",         parameters={           {             description="Force the filter to be set, regardless of current fluid content.",             name="force",             optional=true,             order=3,             type="boolean"           },           {             description="The maximum temperature allowed into the fluidbox.",             name="maximum_temperature",             optional=true,             order=2,             type="float"           },           {             description="The minimum temperature allowed into the fluidbox.",             name="minimum_temperature",             optional=true,             order=1,             type="float"           },           {             description="Fluid prototype name of the filtered fluid.",             name="name",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="A fluid may be specified in one of three ways.",       name="FluidID",       order=47,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The fluid name.",             value="string"           },           {             complex_type="type",             description="The fluid prototype.",             value="LuaFluidPrototype"           },           {             complex_type="type",             description="The fluid.",             value="Fluid"           }         }       }     },     {       description="",       examples={         "```\n-- Products of the \"advanced-oil-processing\" recipe\n{{type=\"fluid\", name=\"heavy-oil\", amount=1},\n  {type=\"fluid\", name=\"light-oil\", amount=4.5},\n  {type=\"fluid\", name=\"petroleum-gas\", amount=5.5}}\n```"       },       name="FluidProduct",       order=147,       type={         complex_type="table",         parameters={           {             description="Amount of the fluid to give. If not returned, `amount_min` and `amount_max` will be present instead.",             name="amount",             optional=true,             order=2,             type="double"           },           {             description="Maximum amount of the fluid to give. Not returned if `amount` is returned.",             name="amount_max",             optional=true,             order=4,             type="double"           },           {             description="Minimal amount of the fluid to give. Not returned if `amount` is returned.",             name="amount_min",             optional=true,             order=3,             type="double"           },           {             description="",             name="fluidbox_index",             optional=true,             order=9,             type="uint"           },           {             description="How much of this product is ignored by productivity.",             name="ignored_by_productivity",             optional=true,             order=7,             type="double"           },           {             description="How much of this product is ignored by statistics.",             name="ignored_by_stats",             optional=true,             order=6,             type="double"           },           {             description="Prototype name of the result.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="A value in range `[0, 1]`. Fluid is only given with this probability; otherwise no product is produced.",             name="probability",             optional=false,             order=5,             type="double"           },           {             description="The fluid temperature of this product.",             name="temperature",             optional=true,             order=8,             type="float"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="literal",               value="fluid"             }           }         }       }     },     {       description="",       name="FluidPrototypeFilter",       order=328,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="hidden"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="subgroup"                 },                 {                   complex_type="literal",                   value="default-temperature"                 },                 {                   complex_type="literal",                   value="max-temperature"                 },                 {                   complex_type="literal",                   value="heat-capacity"                 },                 {                   complex_type="literal",                   value="fuel-value"                 },                 {                   complex_type="literal",                   value="emissions-multiplier"                 },                 {                   complex_type="literal",                   value="gas-temperature"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="default-temperature",             order=2,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="emissions-multiplier",             order=6,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="fuel-value",             order=5,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="gas-temperature",             order=7,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="heat-capacity",             order=4,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="max-temperature",             order=3,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="For use within nested filters such as the `has-product-fluid` filter of array[[RecipePrototypeFilter](runtime:RecipePrototypeFilter)].\n\nTo get a specific prototype by name, see [LuaPrototypes::fluid](runtime:LuaPrototypes::fluid).",             name="name",             order=0,             parameters={               {                 description="The prototype name, or list of acceptable names.",                 name="name",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           },           {             description="",             name="subgroup",             order=1,             parameters={               {                 description="A [LuaGroup](runtime:LuaGroup) (subgroup) name",                 name="subgroup",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="ForceCondition",       order=109,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="All forces pass.",             value="all"           },           {             complex_type="literal",             description="Forces which will attack pass.",             value="enemy"           },           {             complex_type="literal",             description="Forces which won't attack pass.",             value="ally"           },           {             complex_type="literal",             description="Forces which are friends pass.",             value="friend"           },           {             complex_type="literal",             description="Forces which are not friends pass.",             value="not-friend"           },           {             complex_type="literal",             description="The same force pass.",             value="same"           },           {             complex_type="literal",             description="The non-same forces pass.",             value="not-same"           }         }       }     },     {       description="A force may be specified in one of three ways.",       name="ForceID",       order=46,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Name of the force, same as [LuaForce::name](runtime:LuaForce::name).",             value="string"           },           {             complex_type="type",             description="Index of the force, same as [LuaForce::index](runtime:LuaForce::index).",             value="uint8"           },           {             complex_type="type",             description="A reference to [LuaForce](runtime:LuaForce) may be passed directly.",             value="LuaForce"           }         }       }     },     {       description="Set of forces. Can be specified in one of two ways.",       name="ForceSet",       order=75,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Array of many forces.",             value={               complex_type="array",               value="ForceID"             }           },           {             complex_type="type",             description="A single force.",             value="ForceID"           }         }       }     },     {       description="Parameters that affect the look and control of the game. Updating any of the member attributes here will immediately take effect in the game engine.",       name="GameViewSettings",       order=9,       type={         attributes={           {             description="Show the flashing alert icons next to the player's toolbar.",             name="show_alert_gui",             optional=false,             order=4,             read_type="boolean",             write_type="boolean"           },           {             description="Show the controller GUI elements. This includes the toolbar, the selected tool slot, the armour slot, and the gun and ammunition slots.",             name="show_controller_gui",             optional=false,             order=0,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the crafting queue.",             name="show_crafting_queue",             optional=false,             order=12,             read_type="boolean",             write_type="boolean"           },           {             description="Show overlay icons on entities. Also known as \"alt-mode\".",             name="show_entity_info",             optional=false,             order=3,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the tooltip that is displayed when selecting an entity.",             name="show_entity_tooltip",             optional=false,             order=9,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the mouse and keyboard/controller button hints in the bottom left corner if they are enabled in the interface settings.",             name="show_hotkey_suggestions",             optional=false,             order=14,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the view options when map is opened.",             name="show_map_view_options",             optional=false,             order=8,             read_type="boolean",             write_type="boolean"           },           {             description="Show the chart in the upper right-hand corner of the screen.",             name="show_minimap",             optional=false,             order=1,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides quickbar of shortcuts.",             name="show_quickbar",             optional=false,             order=10,             read_type="boolean",             write_type="boolean"           },           {             description="When `true` (`false` is default), the rails will always show the rail block visualisation.",             name="show_rail_block_visualisation",             optional=false,             order=6,             read_type="boolean",             write_type="boolean"           },           {             description="Show research progress and name in the upper right-hand corner of the screen.",             name="show_research_info",             optional=false,             order=2,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the shortcut bar.",             name="show_shortcut_bar",             optional=false,             order=11,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the buttons row.",             name="show_side_menu",             optional=false,             order=7,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the surface list while in Remote View.",             name="show_surface_list",             optional=false,             order=15,             read_type="boolean",             write_type="boolean"           },           {             description="Shows or hides the tool window with the weapons and armor.",             name="show_tool_bar",             optional=false,             order=13,             read_type="boolean",             write_type="boolean"           },           {             description="When `true` (the default), mousing over an entity will select it. Otherwise, moving the mouse won't update entity selection.",             name="update_entity_selection",             optional=false,             order=5,             read_type="boolean",             write_type="boolean"           }         },         complex_type="LuaStruct"       }     },     {       description="",       name="GuiAnchor",       order=220,       type={         complex_type="table",         parameters={           {             description="One of `'both'`, `'only_ghosts'`, or `'only_real'`",             name="ghost_mode",             optional=true,             order=5,             type="string"           },           {             description="",             name="gui",             optional=false,             order=0,             type="defines.relative_gui_type"           },           {             description="If provided, only anchors the GUI element when the opened thing matches the name. `name` takes precedence over `names`.",             name="name",             optional=true,             order=3,             type="string"           },           {             description="If provided, only anchors the GUI element when the opened thing matches one of the names. When reading an anchor, `names` is always populated.",             name="names",             optional=true,             order=4,             type={               complex_type="array",               value="string"             }           },           {             description="",             name="position",             optional=false,             order=1,             type="defines.relative_gui_position"           },           {             description="If provided, only anchors the GUI element when the opened things type matches the type.",             name="type",             optional=true,             order=2,             type="string"           }         }       }     },     {       description="Used for specifying where a GUI arrow should point to.",       name="GuiArrowSpecification",       order=34,       type={         complex_type="table",         parameters={           {             description="",             name="margin",             optional=false,             order=0,             type="uint"           },           {             description="This determines which of the following fields will be required.",             name="type",             optional=false,             order=1,             type="GuiArrowType"           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="crafting_queue",             order=2,             parameters={               {                 description="Index in the crafting queue to point to.",                 name="crafting_queueindex",                 optional=false,                 order=0,                 type="uint"               }             }           },           {             description="",             name="entity",             order=0,             parameters={               {                 description="",                 name="entity",                 optional=false,                 order=0,                 type="LuaEntity"               }             }           },           {             description="",             name="item_stack",             order=3,             parameters={               {                 description="Which inventory the stack is in.",                 name="inventory_index",                 optional=false,                 order=0,                 type="defines.inventory"               },               {                 description="Which stack to point to.",                 name="item_stack_index",                 optional=false,                 order=1,                 type="uint"               },               {                 description="",                 name="source",                 optional=false,                 order=2,                 type={                   complex_type="union",                   full_format=false,                   options={                     {                       complex_type="literal",                       value="player"                     },                     {                       complex_type="literal",                       value="target"                     },                     {                       complex_type="literal",                       value="player-quickbar"                     }                   }                 }               }             }           },           {             description="",             name="position",             order=1,             parameters={               {                 description="",                 name="position",                 optional=false,                 order=0,                 type="MapPosition"               }             }           }         }       }     },     {       description="Used by [GuiArrowSpecification](runtime:GuiArrowSpecification).",       name="GuiArrowType",       order=35,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="Will remove the arrow entirely.",             value="nowhere"           },           {             complex_type="literal",             description="Will point to the current goal.",             value="goal"           },           {             complex_type="literal",             description="",             value="entity_info"           },           {             complex_type="literal",             description="",             value="active_window"           },           {             complex_type="literal",             description="",             value="entity"           },           {             complex_type="literal",             description="",             value="position"           },           {             complex_type="literal",             description="",             value="crafting_queue"           },           {             complex_type="literal",             description="Will point to a given item stack in an inventory.",             value="item_stack"           }         }       }     },     {       description="Direction of a [LuaGuiElement's](runtime:LuaGuiElement::direction) layout.",       name="GuiDirection",       order=284,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="horizontal"           },           {             complex_type="literal",             description="",             value="vertical"           }         }       }     },     {       description="",       name="GuiElementType",       order=24,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="A clickable element. Relevant event: [on_gui_click](runtime:on_gui_click)",             value="button"           },           {             complex_type="literal",             description="A `button` that displays a sprite rather than text. Relevant event: [on_gui_click](runtime:on_gui_click)",             value="sprite-button"           },           {             complex_type="literal",             description="A clickable element with a check mark that can be turned off or on. Relevant event: [on_gui_checked_state_changed](runtime:on_gui_checked_state_changed)",             value="checkbox"           },           {             complex_type="literal",             description="An invisible container that lays out its children either horizontally or vertically.",             value="flow"           },           {             complex_type="literal",             description="A non-transparent box that contains other elements. It can have a title (set via the `caption` attribute). Just like a `flow`, it lays out its children either horizontally or vertically. Relevant event: [on_gui_location_changed](runtime:on_gui_location_changed)",             value="frame"           },           {             complex_type="literal",             description="A piece of text.",             value="label"           },           {             complex_type="literal",             description="A horizontal or vertical separation line.",             value="line"           },           {             complex_type="literal",             description="A partially filled bar that can be used to indicate progress.",             value="progressbar"           },           {             complex_type="literal",             description="An invisible container that lays out its children in a specific number of columns. The width of each column is determined by the widest element it contains.",             value="table"           },           {             complex_type="literal",             description="A single-line box the user can type into. Relevant events: [on_gui_text_changed](runtime:on_gui_text_changed), [on_gui_confirmed](runtime:on_gui_confirmed)",             value="textfield"           },           {             complex_type="literal",             description="An element that is similar to a `checkbox`, but with a circular appearance. Clicking a selected radio button will not unselect it. Radio buttons are not linked to each other in any way. Relevant event: [on_gui_checked_state_changed](runtime:on_gui_checked_state_changed)",             value="radiobutton"           },           {             complex_type="literal",             description="An element that shows an image.",             value="sprite"           },           {             complex_type="literal",             description="An invisible element that is similar to a `flow`, but has the ability to show and use scroll bars.",             value="scroll-pane"           },           {             complex_type="literal",             description="A drop-down containing strings of text. Relevant event: [on_gui_selection_state_changed](runtime:on_gui_selection_state_changed)",             value="drop-down"           },           {             complex_type="literal",             description="A list of strings, only one of which can be selected at a time. Shows a scroll bar if necessary. Relevant event: [on_gui_selection_state_changed](runtime:on_gui_selection_state_changed)",             value="list-box"           },           {             complex_type="literal",             description="A camera that shows the game at the given position on the given surface. It can visually track an [entity](runtime:LuaGuiElement::entity) that is set after the element has been created.",             value="camera"           },           {             complex_type="literal",             description="A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: [on_gui_elem_changed](runtime:on_gui_elem_changed)",             value="choose-elem-button"           },           {             complex_type="literal",             description="A multi-line `textfield`. Relevant event: [on_gui_text_changed](runtime:on_gui_text_changed)",             value="text-box"           },           {             complex_type="literal",             description="A horizontal number line which can be used to choose a number. Relevant event: [on_gui_value_changed](runtime:on_gui_value_changed)",             value="slider"           },           {             complex_type="literal",             description="A minimap preview, similar to the normal player minimap. It can visually track an [entity](runtime:LuaGuiElement::entity) that is set after the element has been created.",             value="minimap"           },           {             complex_type="literal",             description="A preview of an entity. The [entity](runtime:LuaGuiElement::entity) has to be set after the element has been created.",             value="entity-preview"           },           {             complex_type="literal",             description="An empty element that just exists. The root GUI elements `screen` and `relative` are `empty-widget`s.",             value="empty-widget"           },           {             complex_type="literal",             description="A collection of `tab`s and their contents. Relevant event: [on_gui_selected_tab_changed](runtime:on_gui_selected_tab_changed)",             value="tabbed-pane"           },           {             complex_type="literal",             description="A tab for use in a `tabbed-pane`.",             value="tab"           },           {             complex_type="literal",             description="A switch with three possible states. Can have labels attached to either side. Relevant event: [on_gui_switch_state_changed](runtime:on_gui_switch_state_changed)",             value="switch"           }         }       }     },     {       description="Screen coordinates of a GUI element in a [LuaGui](runtime:LuaGui). This uses the same format as [TilePosition](runtime:TilePosition), meaning it can be specified either with or without explicit keys.",       name="GuiLocation",       order=218,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="int"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="int"               }             }           },           {             complex_type="tuple",             values={               "int",               "int"             }           }         }       }     },     {       description="",       name="GunShift4Way",       order=287,       type={         complex_type="table",         parameters={           {             description="",             name="east",             optional=false,             order=1,             type="Vector"           },           {             description="",             name="north",             optional=false,             order=0,             type="Vector"           },           {             description="",             name="south",             optional=false,             order=2,             type="Vector"           },           {             description="",             name="west",             optional=false,             order=3,             type="Vector"           }         }       }     },     {       description="",       name="HeatConnection",       order=10,       type={         complex_type="table",         parameters={           {             description="",             name="direction",             optional=false,             order=1,             type="defines.direction"           },           {             description="",             name="position",             optional=false,             order=0,             type="Vector"           }         }       }     },     {       description="The settings used by a heat-interface type entity.",       name="HeatSetting",       order=257,       type={         complex_type="table",         parameters={           {             description="Defaults to `\"at-least\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="at-least"                 },                 {                   complex_type="literal",                   value="at-most"                 },                 {                   complex_type="literal",                   value="exactly"                 },                 {                   complex_type="literal",                   value="add"                 },                 {                   complex_type="literal",                   value="remove"                 }               }             }           },           {             description="The target temperature. Defaults to the minimum temperature of the heat buffer.",             name="temperature",             optional=true,             order=0,             type="double"           }         }       }     },     {       description="All base prototype types.",       name="IDType",       order=244,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="custom-input"           },           {             complex_type="literal",             description="",             value="equipment-grid"           },           {             complex_type="literal",             description="",             value="entity"           },           {             complex_type="literal",             description="",             value="particle"           },           {             complex_type="literal",             description="",             value="item"           },           {             complex_type="literal",             description="",             value="collision-layer"           },           {             complex_type="literal",             description="",             value="airborne-pollutant"           },           {             complex_type="literal",             description="",             value="tile"           },           {             complex_type="literal",             description="",             value="decorative"           },           {             complex_type="literal",             description="",             value="recipe-category"           },           {             complex_type="literal",             description="",             value="item-group"           },           {             complex_type="literal",             description="",             value="item-subgroup"           },           {             complex_type="literal",             description="",             value="recipe"           },           {             complex_type="literal",             description="",             value="fluid"           },           {             complex_type="literal",             description="",             value="ammo-category"           },           {             complex_type="literal",             description="",             value="fuel-category"           },           {             complex_type="literal",             description="",             value="resource-category"           },           {             complex_type="literal",             description="",             value="technology"           },           {             complex_type="literal",             description="",             value="noise-function"           },           {             complex_type="literal",             description="",             value="noise-expression"           },           {             complex_type="literal",             description="",             value="autoplace-control"           },           {             complex_type="literal",             description="",             value="equipment"           },           {             complex_type="literal",             description="",             value="damage-type"           },           {             complex_type="literal",             description="",             value="virtual-signal"           },           {             complex_type="literal",             description="",             value="achievement"           },           {             complex_type="literal",             description="",             value="module-category"           },           {             complex_type="literal",             description="",             value="equipment-category"           },           {             complex_type="literal",             description="",             value="mod-setting"           },           {             complex_type="literal",             description="",             value="trivial-smoke"           },           {             complex_type="literal",             description="",             value="asteroid-chunk"           },           {             complex_type="literal",             description="",             value="quality"           },           {             complex_type="literal",             description="",             value="surface-property"           },           {             complex_type="literal",             description="",             value="procession-layer-inheritance-group"           },           {             complex_type="literal",             description="",             value="procession"           },           {             complex_type="literal",             description="",             value="space-location"           },           {             complex_type="literal",             description="",             value="space-connection"           },           {             complex_type="literal",             description="",             value="active-trigger"           },           {             complex_type="literal",             description="",             value="shortcut"           },           {             complex_type="literal",             description="",             value="burner-usage"           },           {             complex_type="literal",             description="",             value="surface"           },           {             complex_type="literal",             description="",             value="mod-data"           },           {             complex_type="literal",             description="",             value="custom-event"           }         }       }     },     {       description="A single filter used by an infinity-filters instance.",       name="InfinityInventoryFilter",       order=273,       type={         complex_type="table",         parameters={           {             description="The count of the filter. Defaults to 0.",             name="count",             optional=true,             order=2,             type="ItemCountType"           },           {             description="The index of this filter in the filters list. Not required when writing a filter.",             name="index",             optional=true,             order=4,             type="uint"           },           {             description="Defaults to `\"at-least\"`.",             name="mode",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="at-least"                 },                 {                   complex_type="literal",                   value="at-most"                 },                 {                   complex_type="literal",                   value="exactly"                 }               }             }           },           {             description="Name of the item. When reading a filter, this is a string.",             name="name",             optional=false,             order=0,             type="ItemID"           },           {             description="Quality of the item. Defaults to `\"normal\"`. When reading a filter, this is a string.",             name="quality",             optional=true,             order=1,             type="QualityID"           }         }       }     },     {       description="A single filter used by an infinity-pipe type entity.",       name="InfinityPipeFilter",       order=250,       type={         complex_type="table",         parameters={           {             description="Defaults to `\"at-least\"`.",             name="mode",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="at-least"                 },                 {                   complex_type="literal",                   value="at-most"                 },                 {                   complex_type="literal",                   value="exactly"                 },                 {                   complex_type="literal",                   value="add"                 },                 {                   complex_type="literal",                   value="remove"                 }               }             }           },           {             description="Name of the fluid.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="The fill percentage the pipe (for example `0.5` for 50%). Can't be negative.",             name="percentage",             optional=true,             order=1,             type="double"           },           {             description="The temperature of the fluid. Defaults to the default/minimum temperature of the fluid.",             name="temperature",             optional=true,             order=2,             type="double"           }         }       }     },     {       description="",       name="Ingredient",       order=160,       type={         complex_type="table",         parameters={           {             description="Amount of the item or fluid.",             name="amount",             optional=false,             order=2,             type="double"           },           {             description="How much of this ingredient is ignored by statistics.",             name="ignored_by_stats",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 "uint",                 "double"               }             }           },           {             description="Prototype name of the required item or fluid.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="item"                 },                 {                   complex_type="literal",                   value="fluid"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="fluid",             order=0,             parameters={               {                 description="",                 name="fluidbox_index",                 optional=true,                 order=3,                 type="uint"               },               {                 description="",                 name="fluidbox_multiplier",                 optional=true,                 order=4,                 type="uint8"               },               {                 description="The maximum fluid temperature allowed.",                 name="maximum_temperature",                 optional=true,                 order=1,                 type="float"               },               {                 description="The minimum fluid temperature required.",                 name="minimum_temperature",                 optional=true,                 order=0,                 type="float"               },               {                 description="When minimum and maximum temperature are the same, this property will be present instead of the other two.",                 name="temperature",                 optional=true,                 order=2,                 type="float"               }             }           }         }       }     },     {       description="",       name="InserterCircuitConditions",       order=210,       type={         complex_type="table",         parameters={           {             description="",             name="circuit",             optional=true,             order=0,             type="CircuitCondition"           },           {             description="",             name="logistics",             optional=true,             order=1,             type="CircuitCondition"           }         }       }     },     {       description="",       name="InserterItemFilter",       order=260,       type={         complex_type="table",         parameters={           {             description="Quality comparator to use for the quality filter.",             name="comparator",             optional=true,             order=3,             type="string"           },           {             description="Position of the corresponding filter slot.",             name="index",             optional=false,             order=0,             type="uint"           },           {             description="Item prototype name of the item to filter.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="Quality prototype name of the item to filter.",             name="quality",             optional=true,             order=2,             type="string"           }         }       }     },     {       description="",       name="InventoryFilter",       order=211,       type={         complex_type="table",         parameters={           {             description="Position of the corresponding filter slot.",             name="index",             optional=false,             order=0,             type="uint"           },           {             description="Item prototype name of the item to filter.",             name="name",             optional=false,             order=1,             type="string"           }         }       }     },     {       description="",       name="InventoryIndex",       order=6,       type="uint8"     },     {       description="",       name="InventoryPosition",       order=263,       type={         complex_type="table",         parameters={           {             description="How many items to insert. Defaults to `1`.",             name="count",             optional=true,             order=2,             type="ItemCountType"           },           {             description="The ID of the inventory to insert into.",             name="inventory",             optional=false,             order=0,             type="defines.inventory"           },           {             description="The stack index of the inventory to insert into. Uses 0-based indexing, in contrast to the 1-based indexing of most other inventory-related functions.",             name="stack",             optional=false,             order=1,             type="ItemStackIndex"           }         }       }     },     {       description="",       name="InventoryWithCustomStackSizeSpecification",       order=225,       type={         complex_type="table",         parameters={           {             description="",             name="stack_size_max",             optional=false,             order=2,             type="ItemCountType"           },           {             description="",             name="stack_size_min",             optional=false,             order=1,             type="ItemCountType"           },           {             description="",             name="stack_size_multiplier",             optional=false,             order=0,             type="double"           },           {             description="",             name="stack_size_override",             optional=false,             order=3,             type={               complex_type="dictionary",               key="string",               value="ItemCountType"             }           },           {             description="",             name="with_bar",             optional=false,             order=4,             type="boolean"           }         }       }     },     {       description="",       name="ItemCountType",       order=5,       type="uint"     },     {       description="An item filter may be specified in two ways, either as a string which is an item prototype name or as a table.",       name="ItemFilter",       order=32,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="The quality comparison type.",                 name="comparator",                 optional=true,                 order=2,                 type="ComparatorString"               },               {                 description="The item.",                 name="name",                 optional=true,                 order=0,                 type="ItemID"               },               {                 description="The quality.",                 name="quality",                 optional=true,                 order=1,                 type="QualityID"               }             }           },           "string"         }       }     },     {       description="An item prototype may be specified in one of four ways.",       name="ItemID",       order=52,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Item prototype.",             value="LuaItemPrototype"           },           {             complex_type="type",             description="Non empty item stack.",             value="LuaItemStack"           },           {             complex_type="type",             description="The item.",             value="LuaItem"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="An item prototype with optional quality specification.",       name="ItemIDAndQualityIDPair",       order=51,       type={         complex_type="table",         parameters={           {             description="Item prototype. Returns `LuaItemPrototype` when read.",             name="name",             optional=false,             order=0,             type="ItemID"           },           {             description="Quality prototype. Normal quality will be used if not specified. Returns `LuaQualityPrototype` when read.",             name="quality",             optional=true,             order=1,             type="QualityID"           }         }       }     },     {       description="",       name="ItemIDFilter",       order=245,       type={         complex_type="table",         parameters={           {             description="The quality comparison type.",             name="comparator",             optional=true,             order=2,             type="ComparatorString"           },           {             description="The item name.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="The name of the quality.",             name="quality",             optional=true,             order=1,             type="string"           }         }       }     },     {       description="",       name="ItemInventoryPositions",       order=262,       type={         complex_type="table",         parameters={           {             description="Defaults to `0`. Number of items to request for the equipment grid. When the items arrive they will be used to revive the first matching ghost equipment.",             name="grid_count",             optional=true,             order=1,             type="ItemCountType"           },           {             description="A list of stacks into which items should be inserted.",             name="in_inventory",             optional=true,             order=0,             type={               complex_type="array",               value="InventoryPosition"             }           }         }       }     },     {       description="",       name="ItemLocationData",       order=200,       type={         complex_type="table",         parameters={           {             description="",             name="entity",             optional=true,             order=1,             type="LuaEntity"           },           {             description="",             name="force",             optional=false,             order=4,             type="LuaForce"           },           {             description="",             name="player",             optional=true,             order=2,             type="LuaPlayer"           },           {             description="",             name="position",             optional=false,             order=3,             type="MapPosition"           },           {             description="",             name="surface",             optional=false,             order=0,             type="LuaSurface"           }         }       }     },     {       description="",       examples={         "```\n-- Products of the \"steel-chest\" recipe (an array of Product)\n{{type=\"item\", name=\"steel-chest\", amount=1}}\n```",         "```\n-- What a custom recipe would look like that had a probability of 0.5 to return a\n-- minimum amount of 1 and a maximum amount of 5\n{{type=\"item\", name=\"custom-item\", probability=0.5, amount_min=1, amount_max=5}}\n```"       },       name="ItemProduct",       order=146,       type={         complex_type="table",         parameters={           {             description="Amount of the item to give. If not returned, `amount_min` and `amount_max` will be present instead.",             name="amount",             optional=true,             order=2,             type="uint16"           },           {             description="Maximum amount of the item to give. Not returned if `amount` is returned.",             name="amount_max",             optional=true,             order=4,             type="uint16"           },           {             description="Minimal amount of the item to give. Not returned if `amount` is returned.",             name="amount_min",             optional=true,             order=3,             type="uint16"           },           {             description="Probability that a craft will yield one additional product. Also applies to bonus crafts caused by productivity.",             name="extra_count_fraction",             optional=true,             order=8,             type="float"           },           {             description="How much of this product is ignored by productivity.",             name="ignored_by_productivity",             optional=true,             order=7,             type="uint16"           },           {             description="How much of this product is ignored by statistics.",             name="ignored_by_stats",             optional=true,             order=6,             type="uint16"           },           {             description="Prototype name of the result.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="",             name="percent_spoiled",             optional=true,             order=9,             type="float"           },           {             description="A value in range `[0, 1]`. Item is only given with this probability; otherwise no product is produced.",             name="probability",             optional=false,             order=5,             type="double"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="literal",               value="item"             }           }         }       }     },     {       description="",       name="ItemPrototypeFilter",       order=323,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="tool"                 },                 {                   complex_type="literal",                   value="mergeable"                 },                 {                   complex_type="literal",                   value="hidden"                 },                 {                   complex_type="literal",                   value="hidden-in-factoriopedia"                 },                 {                   complex_type="literal",                   value="is-parameter"                 },                 {                   complex_type="literal",                   value="item-with-inventory"                 },                 {                   complex_type="literal",                   value="selection-tool"                 },                 {                   complex_type="literal",                   value="item-with-label"                 },                 {                   complex_type="literal",                   value="has-rocket-launch-products"                 },                 {                   complex_type="literal",                   value="fuel"                 },                 {                   complex_type="literal",                   value="place-result"                 },                 {                   complex_type="literal",                   value="burnt-result"                 },                 {                   complex_type="literal",                   value="place-as-tile"                 },                 {                   complex_type="literal",                   value="placed-as-equipment-result"                 },                 {                   complex_type="literal",                   value="plant-result"                 },                 {                   complex_type="literal",                   value="spoil-result"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="flag"                 },                 {                   complex_type="literal",                   value="subgroup"                 },                 {                   complex_type="literal",                   value="fuel-category"                 },                 {                   complex_type="literal",                   value="stack-size"                 },                 {                   complex_type="literal",                   value="fuel-value"                 },                 {                   complex_type="literal",                   value="fuel-acceleration-multiplier"                 },                 {                   complex_type="literal",                   value="fuel-top-speed-multiplier"                 },                 {                   complex_type="literal",                   value="fuel-emissions-multiplier"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="burnt-result",             order=1,             parameters={               {                 description="Filters for the burnt result.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="ItemPrototypeFilter"                 }               }             }           },           {             description="",             name="flag",             order=8,             parameters={               {                 description="",                 name="flag",                 optional=false,                 order=0,                 type="ItemPrototypeFlag"               }             }           },           {             description="",             name="fuel-acceleration-multiplier",             order=13,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="fuel-category",             order=10,             parameters={               {                 description="A [LuaFuelCategoryPrototype](runtime:LuaFuelCategoryPrototype) name",                 name="fuel-category",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="fuel-emissions-multiplier",             order=15,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="fuel-top-speed-multiplier",             order=14,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="fuel-value",             order=12,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="For use within nested filters such as the `has-product-item` filter of array[[RecipePrototypeFilter](runtime:RecipePrototypeFilter)].\n\nTo get a specific prototype by name, see [LuaPrototypes::item](runtime:LuaPrototypes::item).",             name="name",             order=6,             parameters={               {                 description="The prototype name, or list of acceptable names.",                 name="name",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           },           {             description="",             name="place-as-tile",             order=2,             parameters={               {                 description="Filters for the placed tile.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="TilePrototypeFilter"                 }               }             }           },           {             description="",             name="place-result",             order=0,             parameters={               {                 description="Filters for the place result.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="EntityPrototypeFilter"                 }               }             }           },           {             description="",             name="placed-as-equipment-result",             order=3,             parameters={               {                 description="Filters for the placed equipment.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="EquipmentPrototypeFilter"                 }               }             }           },           {             description="",             name="plant-result",             order=4,             parameters={               {                 description="Filters for the plant result.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="EntityPrototypeFilter"                 }               }             }           },           {             description="",             name="spoil-result",             order=5,             parameters={               {                 description="Filters for the spoil result.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="ItemPrototypeFilter"                 }               }             }           },           {             description="Usage example:\n\n```\nprototypes.get_item_filtered({{filter = \"stack-size\", comparison = \">\", value = 20}, {filter = \"stack-size\", comparison = \"<\", value = 100, mode = \"and\"}})\n```",             name="stack-size",             order=11,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="subgroup",             order=9,             parameters={               {                 description="A [LuaGroup](runtime:LuaGroup) (subgroup) name",                 name="subgroup",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="Usage example: \n```\nprototypes.get_item_filtered({{filter = \"type\", type = \"armor\"}})\n```",             name="type",             order=7,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="A [string](runtime:string) specifying an item prototype flag.",       name="ItemPrototypeFlag",       order=113,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="Determines whether the logistics areas of roboports should be drawn when holding this item. Used by the deconstruction planner by default.",             value="draw-logistic-overlay"           },           {             complex_type="literal",             description="If this item is skipped by the trash-unrequested logic.",             value="excluded-from-trash-unrequested"           },           {             complex_type="literal",             description="Always shows the item in the logistic requests and filters GUIs (among others) even when the recipe for that item is locked.",             value="always-show"           },           {             complex_type="literal",             description="Hides the item from the bonus GUI.",             value="hide-from-bonus-gui"           },           {             complex_type="literal",             description="Hides the item from the tooltip that's shown when hovering over a burner inventory.",             value="hide-from-fuel-tooltip"           },           {             complex_type="literal",             description="Prevents the item from being stacked. It also prevents the item from stacking in assembling machine input slots, which can otherwise exceed the item stack size if required by the recipe. Additionally, the item does not show an item count when in the cursor.",             value="not-stackable"           },           {             complex_type="literal",             description="Makes construction bots prefer this item when building the entity specified by its `place_result`.",             value="primary-place-result"           },           {             complex_type="literal",             description="Allows the item to be opened by the player, firing the `on_mod_item_opened` event. Only has an effect for selection tool items.",             value="mod-openable"           },           {             complex_type="literal",             description="Makes it so the item is deleted when clearing the cursor, instead of being put into the player's inventory. The copy-paste tools use this by default, for example.",             value="only-in-cursor"           },           {             complex_type="literal",             description="Allows the item to be spawned by a quickbar shortcut or custom input.",             value="spawnable"           },           {             complex_type="literal",             description="",             value="spoil-result"           },           {             complex_type="literal",             description="Controls whether the spoil time ignores the spoil time modifier in the [DifficultySettings](runtime:DifficultySettings).",             value="ignore-spoil-time-modifier"           }         }       }     },     {       description="A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.\n\nBy default, none of these flags are set.",       name="ItemPrototypeFlags",       order=112,       type={         complex_type="dictionary",         key="ItemPrototypeFlag",         value={           complex_type="literal",           value=true         }       }     },     {       description="",       name="ItemStackDefinition",       order=115,       type={         complex_type="table",         parameters={           {             description="Amount of ammo in the ammo items in the stack.",             name="ammo",             optional=true,             order=5,             type="float"           },           {             description="Number of items the stack holds. Defaults to `1`.",             name="count",             optional=true,             order=1,             type="ItemCountType"           },           {             description="Description of the items with tags in the stack.",             name="custom_description",             optional=true,             order=7,             type="LocalisedString"           },           {             description="Durability of the tool items in the stack.",             name="durability",             optional=true,             order=4,             type="double"           },           {             description="Health of the items in the stack. Defaults to `1.0`.",             name="health",             optional=true,             order=3,             type="float"           },           {             description="Prototype name of the item the stack holds.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Quality of the item the stack holds. Defaults to `\"normal\"`.",             name="quality",             optional=true,             order=2,             type="string"           },           {             description="The spoil percent for this item if the item can spoil. Defaults to `0`.",             name="spoil_percent",             optional=true,             order=8,             type="double"           },           {             description="Tags of the items with tags in the stack.",             name="tags",             optional=true,             order=6,             type={               complex_type="array",               value="string"             }           }         }       }     },     {       description="An item may be specified in one of three ways.",       examples={         "```\n-- All of these lines specify an item stack of one iron plate\n{name=\"iron-plate\"}\n{name=\"iron-plate\", count=1}\n{name=\"iron-plate\", count=1, quality=\"normal\"}\n```",         "```\n-- This is a stack of 47 copper plates\n{name=\"copper-plate\", count=47}\n```",         "```\n--These are both full stacks of iron plates (for iron-plate, a full stack is 100 plates)\n\"iron-plate\"\n{name=\"iron-plate\", count=100}\n```"       },       name="ItemStackIdentification",       order=87,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The name of the item, which represents a full stack of that item.",             value="string"           },           {             complex_type="type",             description="The detailed definition of an item stack.",             value="ItemStackDefinition"           },           {             complex_type="type",             description="",             value="LuaItemStack"           }         }       }     },     {       description="",       name="ItemStackIndex",       order=3,       type="uint16"     },     {       description="",       name="ItemStackLocation",       order=30,       type={         complex_type="table",         parameters={           {             description="",             name="inventory",             optional=false,             order=0,             type="defines.inventory"           },           {             description="",             name="slot",             optional=false,             order=1,             type="uint"           }         }       }     },     {       description="",       name="ItemWithCount",       order=31,       type={         complex_type="table",         parameters={           {             description="The number of items.",             name="count",             optional=false,             order=1,             type="ItemCountType"           },           {             description="Name of the item prototype.",             name="name",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="ItemWithQualityCounts",       order=38,       type={         complex_type="table",         parameters={           {             description="The number of items.",             name="count",             optional=false,             order=1,             type="ItemCountType"           },           {             description="Name of the item prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Name of the item's quality prototype.",             name="quality",             optional=false,             order=2,             type="string"           }         }       }     },     {       description="An item prototype with optional quality specification. Can be specified in one of four ways.",       name="ItemWithQualityID",       order=50,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The item stack. Both prototype and quality of the item stack will be used.",             value="LuaItemStack"           },           {             complex_type="type",             description="The item prototype. Normal quality will be used.",             value="LuaItemPrototype"           },           {             complex_type="type",             description="The prototype name. Normal quality will be used.",             value="string"           },           {             complex_type="type",             description="A table of item prototype and quality.",             value="ItemIDAndQualityIDPair"           }         }       }     },     {       description="The internal name of a game control (key binding).",       name="LinkedGameControl",       order=107,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="move-up"           },           {             complex_type="literal",             description="",             value="move-down"           },           {             complex_type="literal",             description="",             value="move-left"           },           {             complex_type="literal",             description="",             value="move-right"           },           {             complex_type="literal",             description="",             value="alternative-gui-move-up"           },           {             complex_type="literal",             description="",             value="alternative-gui-move-down"           },           {             complex_type="literal",             description="",             value="alternative-gui-move-left"           },           {             complex_type="literal",             description="",             value="alternative-gui-move-right"           },           {             complex_type="literal",             description="",             value="open-character-gui"           },           {             complex_type="literal",             description="",             value="open-gui"           },           {             complex_type="literal",             description="",             value="confirm-gui"           },           {             complex_type="literal",             description="",             value="toggle-free-cursor"           },           {             complex_type="literal",             description="",             value="mine"           },           {             complex_type="literal",             description="",             value="build"           },           {             complex_type="literal",             description="",             value="build-ghost"           },           {             complex_type="literal",             description="",             value="super-forced-build"           },           {             complex_type="literal",             description="",             value="clear-cursor"           },           {             complex_type="literal",             description="",             value="pipette"           },           {             complex_type="literal",             description="",             value="rotate"           },           {             complex_type="literal",             description="",             value="reverse-rotate"           },           {             complex_type="literal",             description="",             value="flip-horizontal"           },           {             complex_type="literal",             description="",             value="flip-vertical"           },           {             complex_type="literal",             description="",             value="pick-items"           },           {             complex_type="literal",             description="",             value="drop-cursor"           },           {             complex_type="literal",             description="",             value="show-info"           },           {             complex_type="literal",             description="",             value="shoot-enemy"           },           {             complex_type="literal",             description="",             value="shoot-selected"           },           {             complex_type="literal",             description="",             value="next-weapon"           },           {             complex_type="literal",             description="",             value="toggle-driving"           },           {             complex_type="literal",             description="",             value="zoom-in"           },           {             complex_type="literal",             description="",             value="zoom-out"           },           {             complex_type="literal",             description="",             value="use-item"           },           {             complex_type="literal",             description="",             value="alternative-use-item"           },           {             complex_type="literal",             description="",             value="toggle-console"           },           {             complex_type="literal",             description="",             value="copy-entity-settings"           },           {             complex_type="literal",             description="",             value="paste-entity-settings"           },           {             complex_type="literal",             description="",             value="controller-gui-logistics-tab"           },           {             complex_type="literal",             description="",             value="controller-gui-character-tab"           },           {             complex_type="literal",             description="",             value="controller-gui-crafting-tab"           },           {             complex_type="literal",             description="",             value="toggle-rail-layer"           },           {             complex_type="literal",             description="",             value="select-for-blueprint"           },           {             complex_type="literal",             description="",             value="select-for-cancel-deconstruct"           },           {             complex_type="literal",             description="",             value="select-for-super-forced-deconstruct"           },           {             complex_type="literal",             description="",             value="reverse-select"           },           {             complex_type="literal",             description="",             value="alt-reverse-select"           },           {             complex_type="literal",             description="",             value="deselect"           },           {             complex_type="literal",             description="",             value="cycle-blueprint-forwards"           },           {             complex_type="literal",             description="",             value="cycle-blueprint-backwards"           },           {             complex_type="literal",             description="",             value="focus-search"           },           {             complex_type="literal",             description="",             value="larger-terrain-building-area"           },           {             complex_type="literal",             description="",             value="smaller-terrain-building-area"           },           {             complex_type="literal",             description="",             value="remove-pole-cables"           },           {             complex_type="literal",             description="",             value="build-with-obstacle-avoidance"           },           {             complex_type="literal",             description="",             value="add-station"           },           {             complex_type="literal",             description="",             value="add-temporary-station"           },           {             complex_type="literal",             description="",             value="rename-all"           },           {             complex_type="literal",             description="",             value="fast-wait-condition"           },           {             complex_type="literal",             description="",             value="drag-map"           },           {             complex_type="literal",             description="",             value="move-tag"           },           {             complex_type="literal",             description="",             value="place-in-chat"           },           {             complex_type="literal",             description="",             value="place-ping"           },           {             complex_type="literal",             description="",             value="pin"           },           {             complex_type="literal",             description="",             value="activate-tooltip"           },           {             complex_type="literal",             description="",             value="next-surface"           },           {             complex_type="literal",             description="",             value="previous-surface"           },           {             complex_type="literal",             description="",             value="cycle-quality-up"           },           {             complex_type="literal",             description="",             value="cycle-quality-down"           },           {             complex_type="literal",             description="",             value="scroll-tooltip-up"           },           {             complex_type="literal",             description="",             value="scroll-tooltip-down"           },           {             complex_type="literal",             description="",             value="craft"           },           {             complex_type="literal",             description="",             value="craft-5"           },           {             complex_type="literal",             description="",             value="craft-all"           },           {             complex_type="literal",             description="",             value="cancel-craft"           },           {             complex_type="literal",             description="",             value="cancel-craft-5"           },           {             complex_type="literal",             description="",             value="cancel-craft-all"           },           {             complex_type="literal",             description="",             value="pick-item"           },           {             complex_type="literal",             description="",             value="stack-transfer"           },           {             complex_type="literal",             description="",             value="inventory-transfer"           },           {             complex_type="literal",             description="",             value="fast-entity-transfer"           },           {             complex_type="literal",             description="",             value="cursor-split"           },           {             complex_type="literal",             description="",             value="stack-split"           },           {             complex_type="literal",             description="",             value="inventory-split"           },           {             complex_type="literal",             description="",             value="fast-entity-split"           },           {             complex_type="literal",             description="",             value="toggle-filter"           },           {             complex_type="literal",             description="",             value="open-item"           },           {             complex_type="literal",             description="",             value="copy-inventory-filter"           },           {             complex_type="literal",             description="",             value="paste-inventory-filter"           },           {             complex_type="literal",             description="",             value="show-quick-panel"           },           {             complex_type="literal",             description="",             value="next-quick-panel-page"           },           {             complex_type="literal",             description="",             value="previous-quick-panel-page"           },           {             complex_type="literal",             description="",             value="next-quick-panel-tab"           },           {             complex_type="literal",             description="",             value="previous-quick-panel-tab"           },           {             complex_type="literal",             description="",             value="rotate-active-quick-bars"           },           {             complex_type="literal",             description="",             value="next-active-quick-bar"           },           {             complex_type="literal",             description="",             value="previous-active-quick-bar"           },           {             complex_type="literal",             description="",             value="quick-bar-button-1"           },           {             complex_type="literal",             description="",             value="quick-bar-button-2"           },           {             complex_type="literal",             description="",             value="quick-bar-button-3"           },           {             complex_type="literal",             description="",             value="quick-bar-button-4"           },           {             complex_type="literal",             description="",             value="quick-bar-button-5"           },           {             complex_type="literal",             description="",             value="quick-bar-button-6"           },           {             complex_type="literal",             description="",             value="quick-bar-button-7"           },           {             complex_type="literal",             description="",             value="quick-bar-button-8"           },           {             complex_type="literal",             description="",             value="quick-bar-button-9"           },           {             complex_type="literal",             description="",             value="quick-bar-button-10"           },           {             complex_type="literal",             description="",             value="quick-bar-button-1-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-2-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-3-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-4-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-5-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-6-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-7-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-8-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-9-secondary"           },           {             complex_type="literal",             description="",             value="quick-bar-button-10-secondary"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-1"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-2"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-3"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-4"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-5"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-6"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-7"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-8"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-9"           },           {             complex_type="literal",             description="",             value="action-bar-select-page-10"           },           {             complex_type="literal",             description="",             value="copy"           },           {             complex_type="literal",             description="",             value="cut"           },           {             complex_type="literal",             description="",             value="paste"           },           {             complex_type="literal",             description="",             value="cycle-clipboard-forwards"           },           {             complex_type="literal",             description="",             value="cycle-clipboard-backwards"           },           {             complex_type="literal",             description="",             value="undo"           },           {             complex_type="literal",             description="",             value="redo"           },           {             complex_type="literal",             description="",             value="toggle-menu"           },           {             complex_type="literal",             description="",             value="toggle-map"           },           {             complex_type="literal",             description="",             value="close-menu"           },           {             complex_type="literal",             description="",             value="open-technology-gui"           },           {             complex_type="literal",             description="",             value="production-statistics"           },           {             complex_type="literal",             description="",             value="logistic-networks"           },           {             complex_type="literal",             description="",             value="toggle-blueprint-library"           },           {             complex_type="literal",             description="",             value="open-trains-gui"           },           {             complex_type="literal",             description="",             value="open-factoriopedia"           },           {             complex_type="literal",             description="",             value="back"           },           {             complex_type="literal",             description="",             value="forward"           },           {             complex_type="literal",             description="",             value="pause-game"           },           {             complex_type="literal",             description="",             value="confirm-message"           },           {             complex_type="literal",             description="",             value="previous-mod"           },           {             complex_type="literal",             description="",             value="connect-train"           },           {             complex_type="literal",             description="",             value="disconnect-train"           },           {             complex_type="literal",             description="",             value="submit-feedback"           },           {             complex_type="literal",             description="",             value="editor-next-variation"           },           {             complex_type="literal",             description="",             value="editor-previous-variation"           },           {             complex_type="literal",             description="",             value="editor-clone-item"           },           {             complex_type="literal",             description="",             value="editor-delete-item"           },           {             complex_type="literal",             description="",             value="editor-toggle-pause"           },           {             complex_type="literal",             description="",             value="editor-tick-once"           },           {             complex_type="literal",             description="",             value="editor-speed-up"           },           {             complex_type="literal",             description="",             value="editor-speed-down"           },           {             complex_type="literal",             description="",             value="editor-reset-speed"           },           {             complex_type="literal",             description="",             value="editor-set-clone-brush-source"           },           {             complex_type="literal",             description="",             value="editor-set-clone-brush-destination"           },           {             complex_type="literal",             description="",             value="editor-switch-to-surface"           },           {             complex_type="literal",             description="",             value="editor-remove-scripting-object"           },           {             complex_type="literal",             description="",             value="debug-toggle-atlas-gui"           },           {             complex_type="literal",             description="",             value="debug-toggle-gui-visibility"           },           {             complex_type="literal",             description="",             value="debug-toggle-debug-settings"           },           {             complex_type="literal",             description="",             value="debug-toggle-basic"           },           {             complex_type="literal",             description="",             value="debug-reset-zoom"           },           {             complex_type="literal",             description="",             value="debug-reset-zoom-2x"           },           {             complex_type="literal",             description="",             value="toggle-gui-debug"           },           {             complex_type="literal",             description="",             value="toggle-gui-style-view"           },           {             complex_type="literal",             description="",             value="toggle-gui-shadows"           },           {             complex_type="literal",             description="",             value="toggle-gui-glows"           },           {             complex_type="literal",             description="",             value="open-prototypes-gui"           },           {             complex_type="literal",             description="",             value="open-prototype-explorer-gui"           },           {             complex_type="literal",             description="",             value="increase-ui-scale"           },           {             complex_type="literal",             description="",             value="decrease-ui-scale"           },           {             complex_type="literal",             description="",             value="reset-ui-scale"           },           {             complex_type="literal",             description="",             value="slash-editor"           },           {             complex_type="literal",             description="",             value="toggle-entity"           },           {             complex_type="literal",             description="",             value="next-player-in-replay"           },           {             complex_type="literal",             description="",             value="move-blueprint-absolute-grid-up"           },           {             complex_type="literal",             description="",             value="move-blueprint-absolute-grid-down"           },           {             complex_type="literal",             description="",             value="move-blueprint-absolute-grid-left"           },           {             complex_type="literal",             description="",             value="move-blueprint-absolute-grid-right"           },           {             complex_type="literal",             description="",             value="move-blueprint-entities-up"           },           {             complex_type="literal",             description="",             value="move-blueprint-entities-down"           },           {             complex_type="literal",             description="",             value="move-blueprint-entities-left"           },           {             complex_type="literal",             description="",             value="move-blueprint-entities-right"           },           {             complex_type="literal",             description="",             value="play-next-track"           },           {             complex_type="literal",             description="",             value="play-previous-track"           },           {             complex_type="literal",             description="",             value="pause-resume-music"           },           {             complex_type="literal",             description="Indicates no linked game control.",             value=""           }         }       }     },     {       description="Localised strings are a way to support translation of in-game text. It is an array where the first element is the key and the remaining elements are parameters that will be substituted for placeholders in the template designated by the key.\n\nThe key identifies the string template. For example, `\"gui-alert-tooltip.attack\"` (for the template `\"__1__ objects are being damaged\"`; see the file `data/core/locale/en.cfg`).\n\nThe template can contain placeholders such as `__1__` or `__2__`. These will be replaced by the respective parameter in the LocalisedString. The parameters themselves can be other localised strings, which will be processed recursively in the same fashion. Localised strings can not be recursed deeper than 20 levels and can not have more than 20 parameters.\n\nThere are two special flags for the localised string, indicated by the key being a particular string. First, if the key is the empty string (`\"\"`), then all parameters will be concatenated (after processing, if any are localised strings themselves). Second, if the key is a question mark (`\"?\"`), then the first valid parameter will be used. A parameter can be invalid if its name doesn't match any string template. If no parameters are valid, the last one is returned. This is useful to implement a fallback for missing locale templates.\n\nFurthermore, when an API function expects a localised string, it will also accept a regular string (i.e. not a table) which will not be translated, as well as a number, boolean or `nil`, which will be converted to their textual representation.",       examples={         "```\n-- In the English translation, this will print \"No ammo\"; in the Czech translation, it will print \"Bez munice\":\ngame.player.print({\"description.no-ammo\"})\n-- The 'description.no-ammo' template contains no placeholders, so no further parameters are necessary.\n```",         "```\n-- In the English translation, this will print \"Durability: 5/9\"; in the Japanese one, it will print \"耐久度: 5/9\":\ngame.player.print({\"description.durability\", 5, 9})\n```",         "```\n-- This will print \"hello\" in all translations:\ngame.player.print({\"\", \"hello\"})\n```",         "```\n-- This will print \"Iron plate: 60\" in the English translation and \"Eisenplatte: 60\" in the German translation.\ngame.print({\"\", {\"item-name.iron-plate\"}, \": \", 60})\n```",         "```\n-- As an example of a localised string with fallback, consider this:\n{\"?\", {\"\", {\"entity-description.furnace\"}, \"\\n\"}, {\"item-description.furnace\"}, \"optional fallback\"}\n-- If 'entity-description.furnace' exists, it is concatenated with \"\\n\" and returned. Otherwise, if 'item-description.furnace'\n--  exists, it is returned as-is. Otherwise, \"optional fallback\" is returned. If this value wasn't specified, the\n--  translation result would be \"Unknown key: 'item-description.furnace'\".\n```"       },       name="LocalisedString",       order=98,       type={         complex_type="union",         full_format=false,         options={           "string",           "number",           "boolean",           "LuaObject",           "nil",           {             complex_type="array",             value="LocalisedString"           }         }       }     },     {       description="",       name="LogisticFilter",       order=81,       type={         complex_type="table",         parameters={           {             description="The space location to import from.",             name="import_from",             optional=true,             order=4,             type="SpaceLocationID"           },           {             description="The maximum amount to keep in inventory. `nil` for infinite.",             name="max",             optional=true,             order=2,             type="ItemCountType"           },           {             description="The minimum amount to satisfy.",             name="min",             optional=true,             order=1,             type="int"           },           {             description="The minimum count that will be delivered to a space platform. `nil` if unchanged from the default.",             name="minimum_delivery_count",             optional=true,             order=3,             type="ItemCountType"           },           {             description="The item filter to put into the slot.",             name="value",             optional=true,             order=0,             type="SignalFilter"           }         }       }     },     {       description="",       name="LogisticFilterIndex",       order=4,       type="uint16"     },     {       description="",       name="LogisticGroup",       order=281,       type={         complex_type="table",         parameters={           {             description="",             name="filters",             optional=false,             order=1,             type={               complex_type="array",               value="LogisticFilter"             }           },           {             description="",             name="members",             optional=false,             order=0,             type={               complex_type="array",               value="LuaLogisticSection"             }           }         }       }     },     {       description="",       name="LogisticSection",       order=280,       type={         complex_type="table",         parameters={           {             description="Defaults to true.",             name="active",             optional=true,             order=4,             type="float"           },           {             description="",             name="filters",             optional=true,             order=1,             type={               complex_type="array",               value="BlueprintLogisticFilter"             }           },           {             description="",             name="group",             optional=true,             order=2,             type="string"           },           {             description="",             name="index",             optional=false,             order=0,             type="uint8"           },           {             description="Defaults to 1.",             name="multiplier",             optional=true,             order=3,             type="float"           }         }       }     },     {       description="",       name="LogisticSections",       order=282,       type={         complex_type="table",         parameters={           {             description="",             name="sections",             optional=true,             order=0,             type={               complex_type="array",               value="LogisticSection"             }           },           {             description="Defaults to false.",             name="trash_not_requested",             optional=true,             order=1,             type="boolean"           }         }       }     },     {       description="",       name="LogisticsNetworkSupplyCounts",       order=204,       type={         complex_type="table",         parameters={           {             description="Number of available items in the active provider members.",             name="active-provider",             optional=false,             order=3,             type="uint"           },           {             description="Number of available items in the buffer members.",             name="buffer",             optional=false,             order=2,             type="uint"           },           {             description="Number of available items in the passive provider members.",             name="passive-provider",             optional=false,             order=1,             type="uint"           },           {             description="Number of available items in the storage members.",             name="storage",             optional=false,             order=0,             type="uint"           }         }       }     },     {       description="",       name="LogisticsNetworkSupplyPoints",       order=205,       type={         complex_type="table",         parameters={           {             description="",             name="active-provider",             optional=false,             order=3,             type={               complex_type="array",               value="LuaLogisticPoint"             }           },           {             description="",             name="buffer",             optional=false,             order=2,             type={               complex_type="array",               value="LuaLogisticPoint"             }           },           {             description="",             name="passive-provider",             optional=false,             order=1,             type={               complex_type="array",               value="LuaLogisticPoint"             }           },           {             description="",             name="storage",             optional=false,             order=0,             type={               complex_type="array",               value="LuaLogisticPoint"             }           }         }       }     },     {       description="",       name="Loot",       order=12,       type={         complex_type="table",         parameters={           {             description="Maximum amount of loot to drop.",             name="count_max",             optional=false,             order=3,             type="double"           },           {             description="Minimum amount of loot to drop.",             name="count_min",             optional=false,             order=2,             type="double"           },           {             description="Item prototype name of the result.",             name="item",             optional=false,             order=0,             type="string"           },           {             description="Probability that any loot at all will drop, as a number in range [0, 1].",             name="probability",             optional=false,             order=1,             type="double"           }         }       }     },     {       description="",       name="LuaEntityClonedEventFilter",       order=340,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaEntityDamagedEventFilter",       order=351,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 },                 {                   complex_type="literal",                   value="original-damage-amount"                 },                 {                   complex_type="literal",                   value="final-damage-amount"                 },                 {                   complex_type="literal",                   value="damage-type"                 },                 {                   complex_type="literal",                   value="final-health"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="damage-type",             order=6,             parameters={               {                 description="A [LuaDamagePrototype](runtime:LuaDamagePrototype) name.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="final-damage-amount",             order=5,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="float"               }             }           },           {             description="",             name="final-health",             order=7,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="float"               }             }           },           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="original-damage-amount",             order=4,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="float"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaEntityDeconstructionCancelledEventFilter",       order=336,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaEntityDiedEventFilter",       order=352,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 },                 {                   complex_type="literal",                   value="force"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="force",             order=4,             parameters={               {                 description="The entity force",                 name="force",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaEntityMarkedForDeconstructionEventFilter",       order=347,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaEntityMarkedForUpgradeEventFilter",       order=353,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="Event name may be specified in one of four ways.",       name="LuaEventType",       order=94,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Custom event prototype.",             value="LuaCustomEventPrototype"           },           {             complex_type="type",             description="Custom input prototype.",             value="LuaCustomInputPrototype"           },           {             complex_type="type",             description="Event identifier.",             value="defines.events"           },           {             complex_type="type",             description="Name of the event.",             value="string"           }         }       }     },     {       description="Any LuaObject listed on the [Classes](runtime:classes) page.",       name="LuaObject",       order=314,       type={         complex_type="builtin"       }     },     {       description="",       name="LuaPlatformBuiltEntityEventFilter",       order=338,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 },                 {                   complex_type="literal",                   value="force"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="force",             order=4,             parameters={               {                 description="The entity force",                 name="force",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPlatformMinedEntityEventFilter",       order=333,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPlayerBuiltEntityEventFilter",       order=349,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 },                 {                   complex_type="literal",                   value="force"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="force",             order=4,             parameters={               {                 description="The entity force",                 name="force",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPlayerMinedEntityEventFilter",       order=344,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPlayerRepairedEntityEventFilter",       order=341,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPostEntityDiedEventFilter",       order=342,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPreGhostDeconstructedEventFilter",       order=343,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPreGhostUpgradedEventFilter",       order=337,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPrePlatformMinedEntityEventFilter",       order=339,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPrePlayerMinedEntityEventFilter",       order=335,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaPreRobotMinedEntityEventFilter",       order=331,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaRobotBuiltEntityEventFilter",       order=334,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 },                 {                   complex_type="literal",                   value="force"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="force",             order=4,             parameters={               {                 description="The entity force",                 name="force",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaRobotMinedEntityEventFilter",       order=346,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaScriptRaisedBuiltEventFilter",       order=332,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaScriptRaisedDestroyEventFilter",       order=354,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaScriptRaisedReviveEventFilter",       order=348,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaScriptRaisedTeleportedEventFilter",       order=330,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaSectorScannedEventFilter",       order=345,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="LuaUpgradeCancelledEventFilter",       order=350,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="ghost"                 },                 {                   complex_type="literal",                   value="rail"                 },                 {                   complex_type="literal",                   value="rail-signal"                 },                 {                   complex_type="literal",                   value="rolling-stock"                 },                 {                   complex_type="literal",                   value="robot-with-logistics-interface"                 },                 {                   complex_type="literal",                   value="vehicle"                 },                 {                   complex_type="literal",                   value="turret"                 },                 {                   complex_type="literal",                   value="crafting-machine"                 },                 {                   complex_type="literal",                   value="wall-connectable"                 },                 {                   complex_type="literal",                   value="transport-belt-connectable"                 },                 {                   complex_type="literal",                   value="circuit-network-connectable"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="name"                 },                 {                   complex_type="literal",                   value="ghost_type"                 },                 {                   complex_type="literal",                   value="ghost_name"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="ghost_name",             order=3,             parameters={               {                 description="The ghost prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="ghost_type",             order=2,             parameters={               {                 description="The ghost prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="name",             order=1,             parameters={               {                 description="The prototype name.",                 name="name",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type.",                 name="type",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="A standard table containing all [MapSettings](runtime:MapSettings) attributes plus an additional table that contains all [DifficultySettings](runtime:DifficultySettings) properties.",       name="MapAndDifficultySettings",       order=168,       type={         complex_type="table",         parameters={           {             description="",             name="asteroids",             optional=false,             order=6,             type="AsteroidMapSettings"           },           {             description="",             name="difficulty_settings",             optional=false,             order=8,             type="MapDifficultySettings"           },           {             description="",             name="enemy_evolution",             optional=false,             order=1,             type="EnemyEvolutionMapSettings"           },           {             description="",             name="enemy_expansion",             optional=false,             order=2,             type="EnemyExpansionMapSettings"           },           {             description="If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.",             name="max_failed_behavior_count",             optional=false,             order=7,             type="uint"           },           {             description="",             name="path_finder",             optional=false,             order=5,             type="PathFinderMapSettings"           },           {             description="",             name="pollution",             optional=false,             order=0,             type="PollutionMapSettings"           },           {             description="",             name="steering",             optional=false,             order=4,             type="SteeringMapSettings"           },           {             description="",             name="unit_group",             optional=false,             order=3,             type="UnitGroupMapSettings"           }         }       }     },     {       description="",       name="MapDifficultySettings",       order=167,       type={         complex_type="table",         parameters={           {             description="A value in range [0.01, 100].",             name="spoil_time_modifier",             optional=false,             order=1,             type="double"           },           {             description="A value in range [0.001, 1000].",             name="technology_price_multiplier",             optional=false,             order=0,             type="double"           }         }       }     },     {       description="The data that can be extracted from a map exchange string, as a plain table.",       name="MapExchangeStringData",       order=198,       type={         complex_type="table",         parameters={           {             description="",             name="map_gen_settings",             optional=false,             order=1,             type="MapGenSettings"           },           {             description="",             name="map_settings",             optional=false,             order=0,             type="MapAndDifficultySettings"           }         }       }     },     {       description="",       name="MapGenPreset",       order=178,       type={         complex_type="table",         parameters={           {             description="",             name="advanced_settings",             optional=true,             order=3,             type="AdvancedMapGenSettings"           },           {             description="",             name="basic_settings",             optional=true,             order=2,             type="MapGenSettings"           },           {             description="Whether this is the preset that is selected by default.",             name="default",             optional=true,             order=1,             type="boolean"           },           {             description="The string used to alphabetically sort the presets. It is a simple string that has no additional semantic meaning.",             name="order",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       examples={         "```\n-- Assuming a NamedNoiseExpression with the name \"my-alternate-grass1-probability\" is defined...\nlocal surface = game.player.surface\nlocal mgs = surface.map_gen_settings\nmgs.property_expression_names[\"tile:grass1:probability\"] = \"my-alternate-grass1-probability\"\nsurface.map_gen_settings = mgs\n-- ...would override the probability of grass1 being placed at any given point on the current surface.\n```",         "```\n-- To make there be no deep water on (newly generated chunks) a surface\nlocal surface = game.player.surface\nlocal mgs = surface.map_gen_settings\nmgs.property_expression_names[\"tile:deepwater:probability\"] = -1000\nsurface.map_gen_settings = mgs\n-- This does not require a NamedNoiseExpression to be defined, since literal numbers (and strings naming literal\n-- numbers, e.g. `\"123\"`) are understood to stand for constant value expressions.\n```"       },       name="MapGenSettings",       order=177,       type={         complex_type="table",         parameters={           {             description="Indexed by autoplace control prototype name.",             name="autoplace_controls",             optional=false,             order=0,             type={               complex_type="dictionary",               key="string",               value="AutoplaceControl"             }           },           {             description="Each setting in this dictionary maps the string type to the settings for that type.",             name="autoplace_settings",             optional=false,             order=2,             type={               complex_type="dictionary",               key={                 complex_type="union",                 full_format=false,                 options={                   {                     complex_type="literal",                     value="entity"                   },                   {                     complex_type="literal",                     value="tile"                   },                   {                     complex_type="literal",                     value="decorative"                   }                 }               },               value="AutoplaceSettings"             }           },           {             description="Map generation settings for entities of the type \"cliff\".",             name="cliff_settings",             optional=false,             order=11,             type="CliffPlacementSettings"           },           {             description="Whether undefined `autoplace_controls` should fall back to the default controls or not. Defaults to `true`.",             name="default_enable_all_autoplace_controls",             optional=false,             order=1,             type="boolean"           },           {             description="Height in tiles. If `0`, the map has 'infinite' height, with the actual limitation being one million tiles in each direction from the center.",             name="height",             optional=false,             order=5,             type="uint"           },           {             description="Whether enemy creatures will not naturally spawn from spawners, map gen, or trigger effects.",             name="no_enemies_mode",             optional=false,             order=9,             type="boolean"           },           {             description="Whether enemy creatures will not attack unless the player first attacks them.",             name="peaceful_mode",             optional=false,             order=8,             type="boolean"           },           {             description="Overrides for tile property value generators.",             name="property_expression_names",             optional=false,             order=10,             type="PropertyExpressionNames"           },           {             description="The random seed used to generated this map.",             name="seed",             optional=false,             order=3,             type="uint"           },           {             description="Size of the starting area.",             name="starting_area",             optional=false,             order=6,             type="MapGenSize"           },           {             description="Positions of the starting areas.",             name="starting_points",             optional=false,             order=7,             type={               complex_type="array",               value="MapPosition"             }           },           {             description="",             name="territory_settings",             optional=false,             order=12,             type="TerritorySettings"           },           {             description="Width in tiles. If `0`, the map has 'infinite' width, with the actual limitation being one million tiles in each direction from the center.",             name="width",             optional=false,             order=4,             type="uint"           }         }       }     },     {       description="A floating point number specifying an amount.\n\nFor backwards compatibility, MapGenSizes can also be specified as a string, which will be converted to a number (when queried, a number will always be returned).\n\nThe map generation algorithm officially supports the range of values the in-game map generation screen shows (specifically `0` and values from `1/6` to `6`). Values outside this range are not guaranteed to work as expected.",       name="MapGenSize",       order=170,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Specifying a map gen dimension.",             value="float"           },           {             complex_type="literal",             description="equivalent to `0`.",             value="none"           },           {             complex_type="literal",             description="equivalent to `1/2`.",             value="very-low"           },           {             complex_type="literal",             description="equivalent to `1/2`.",             value="very-small"           },           {             complex_type="literal",             description="equivalent to `1/2`.",             value="very-poor"           },           {             complex_type="literal",             description="equivalent to `1/sqrt(2)`.",             value="low"           },           {             complex_type="literal",             description="equivalent to `1/sqrt(2)`.",             value="small"           },           {             complex_type="literal",             description="equivalent to `1/sqrt(2)`.",             value="poor"           },           {             complex_type="literal",             description="equivalent to `1`.",             value="normal"           },           {             complex_type="literal",             description="equivalent to `1`.",             value="medium"           },           {             complex_type="literal",             description="equivalent to `1`.",             value="regular"           },           {             complex_type="literal",             description="equivalent to `sqrt(2)`.",             value="high"           },           {             complex_type="literal",             description="equivalent to `sqrt(2)`.",             value="big"           },           {             complex_type="literal",             description="equivalent to `sqrt(2)`.",             value="good"           },           {             complex_type="literal",             description="equivalent to `2`.",             value="very-high"           },           {             complex_type="literal",             description="equivalent to `2`.",             value="very-big"           },           {             complex_type="literal",             description="equivalent to `2`.",             value="very-good"           }         }       }     },     {       description="",       name="MapLocation",       order=97,       type={         complex_type="table",         parameters={           {             description="",             name="direction",             optional=false,             order=1,             type="defines.direction"           },           {             description="",             name="position",             optional=false,             order=0,             type="MapLocation"           }         }       }     },     {       description="Coordinates on a surface, for example of an entity. MapPositions may be specified either as a dictionary with `x`, `y` as keys, or simply as an array with two elements.\n\nThe coordinates are saved as a fixed-size 32 bit integer, with 8 bits reserved for decimal precision, meaning the smallest value step is `1/2^8 = 0.00390625` tiles.",       examples={         "```\n-- Explicit definition\n{x = 5.5, y = 2}\n{y = 2.25, x = 5.125}\n```",         "```\n-- Shorthand\n{1.625, 2.375}\n```"       },       name="MapPosition",       order=99,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="double"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="double"               }             }           },           {             complex_type="tuple",             values={               "double",               "double"             }           }         }       }     },     {       description="Various game-related settings. Updating any of the attributes will immediately take effect in the game engine.",       examples={         "```\n-- Increase the number of short paths the pathfinder can cache.\ngame.map_settings.path_finder.short_cache_size = 15\n```"       },       name="MapSettings",       order=169,       type={         attributes={           {             description="",             name="asteroids",             optional=false,             order=6,             read_type="AsteroidMapSettings",             write_type="AsteroidMapSettings"           },           {             description="",             name="enemy_evolution",             optional=false,             order=1,             read_type="EnemyEvolutionMapSettings",             write_type="EnemyEvolutionMapSettings"           },           {             description="",             name="enemy_expansion",             optional=false,             order=2,             read_type="EnemyExpansionMapSettings",             write_type="EnemyExpansionMapSettings"           },           {             description="If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.",             name="max_failed_behavior_count",             optional=false,             order=7,             read_type="uint",             write_type="uint"           },           {             description="",             name="path_finder",             optional=false,             order=5,             read_type="PathFinderMapSettings",             write_type="PathFinderMapSettings"           },           {             description="",             name="pollution",             optional=false,             order=0,             read_type="PollutionMapSettings",             write_type="PollutionMapSettings"           },           {             description="",             name="steering",             optional=false,             order=4,             read_type="SteeringMapSetting",             write_type="SteeringMapSetting"           },           {             description="",             name="unit_group",             optional=false,             order=3,             read_type="UnitGroupMapSettings",             write_type="UnitGroupMapSettings"           }         },         complex_type="LuaStruct"       }     },     {       description="`math.huge` represents the maximum possible tick.",       name="MapTick",       order=15,       type="uint64"     },     {       description="What is shown in the map view. If a field is not given, that setting will not be changed.",       name="MapViewSettings",       order=18,       type={         complex_type="table",         parameters={           {             description="",             name="show-electric-network",             optional=true,             order=1,             type="boolean"           },           {             description="",             name="show-logistic-network",             optional=true,             order=0,             type="boolean"           },           {             description="",             name="show-networkless-logistic-members",             optional=true,             order=4,             type="boolean"           },           {             description="",             name="show-non-standard-map-info",             optional=true,             order=12,             type="boolean"           },           {             description="",             name="show-pipelines",             optional=true,             order=11,             type="boolean"           },           {             description="",             name="show-player-names",             optional=true,             order=6,             type="boolean"           },           {             description="",             name="show-pollution",             optional=true,             order=3,             type="boolean"           },           {             description="",             name="show-rail-signal-states",             optional=true,             order=9,             type="boolean"           },           {             description="",             name="show-recipe-icons",             optional=true,             order=10,             type="boolean"           },           {             description="",             name="show-tags",             optional=true,             order=7,             type="boolean"           },           {             description="",             name="show-train-station-names",             optional=true,             order=5,             type="boolean"           },           {             description="",             name="show-turret-range",             optional=true,             order=2,             type="boolean"           },           {             description="",             name="show-worker-robots",             optional=true,             order=8,             type="boolean"           }         }       }     },     {       description="",       name="MarketIngredient",       order=268,       type={         complex_type="table",         parameters={           {             description="Count of the item. Cannot be 0.",             name="count",             optional=false,             order=2,             type="ItemCountType"           },           {             description="Prototype name of the required item.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Normal quality will be used if not specified.",             name="quality",             optional=true,             order=1,             type="string"           }         }       }     },     {       description="A string that represents a math expression. The expression parser recognizes four basic token types (with their regex):\n\n- Whitespace: `[ \\n\\r\\t]*`\n\n- Number: `(0x[0-9a-f]+|([0-9]+\\.?[0-9]*|\\.[0-9]+)(e-?[0-9]+)?)` (e.g. `3.2`, `100`, `.6`, `4.2e-5`, `0x2a5f`). Supports hexadecimal input and scientific notation for decimal numbers.\n\n- Operator: `+`, `-`, `*`, `/`, `^`, and `()` for brackets, which may be nested.\n\n- Identifier: The functions listed below and any variables listed where the expression is used.\n\nIdentifiers are used to name functions and variables, which result in or represent numbers. The following functions are always available:\n\n- `abs(value)`: Returns absolute value of the given argument; i.e. if the argument is negative, it is inverted.\n\n- `log2(value)`: Returns a binary logarithm of the given value.\n\n- `sign(value)`: Returns `-1` for negative numbers, `0` for zero (regardless of sign), `1` for positive numbers\n\n- `max(value1, value2, ...)`: Returns the greater of the given values. Supports between 2 and 255 arguments.\n\n- `min(value1, value2, ...)`: Returns the smaller of the given values. Supports between 2 and 255 arguments.\n\nThe property where the expression is used may provide variables. For example in [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) `L` and `l` may be used for the technology level.\n\nThe formula is executed following the [BODMAS](https://en.wikipedia.org/wiki/Order_of_operations#Conventional_order) order (also known as PEMDAS).",       examples={         "```\n\"2500 * (L - 3)\"\n```",         "```\n\"(4e5 * (abs(speed) + 10.5)) / weight\"\n```"       },       name="MathExpression",       order=104,       type="string"     },     {       description="",       name="MineableProperties",       order=124,       type={         complex_type="table",         parameters={           {             description="The required fluid amount if any.",             name="fluid_amount",             optional=true,             order=5,             type="double"           },           {             description="Is this entity mineable at all?",             name="minable",             optional=false,             order=0,             type="boolean"           },           {             description="Prototype name of the particle produced when mining this entity. Will only be present if this entity produces any particle during mining.",             name="mining_particle",             optional=true,             order=3,             type="string"           },           {             description="Energy required to mine an entity.",             name="mining_time",             optional=false,             order=1,             type="double"           },           {             description="The mining trigger if any.",             name="mining_trigger",             optional=true,             order=7,             type={               complex_type="array",               value="TriggerItem"             }           },           {             description="Products obtained by mining this entity.",             name="products",             optional=true,             order=4,             type={               complex_type="array",               value="Product"             }           },           {             description="The prototype name of the required fluid if any.",             name="required_fluid",             optional=true,             order=6,             type="string"           },           {             description="",             name="transfer_entity_health_to_products",             optional=false,             order=2,             type="boolean"           }         }       }     },     {       description="",       name="ModChangeData",       order=190,       type={         complex_type="table",         parameters={           {             description="New version of the mod. May be `nil` if the mod is no longer present (i.e. it was just removed).",             name="new_version",             optional=false,             order=1,             type="string"           },           {             description="Old version of the mod. May be `nil` if the mod wasn't previously present (i.e. it was just added).",             name="old_version",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="ModSetting",       order=126,       type={         complex_type="table",         parameters={           {             description="The value of the mod setting. The type depends on the kind of setting.",             name="value",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 "int",                 "double",                 "boolean",                 "string",                 "Color"               }             }           }         }       }     },     {       description="",       name="ModSettingPrototypeFilter",       order=318,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="mod"                 },                 {                   complex_type="literal",                   value="setting-type"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="mod",             order=1,             parameters={               {                 description="The mod name",                 name="mod",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="setting-type",             order=2,             parameters={               {                 description="The setting scope type.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     {                       complex_type="literal",                       value="startup"                     },                     {                       complex_type="literal",                       value="runtime-global"                     },                     {                       complex_type="literal",                       value="runtime-per-user"                     }                   }                 }               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="Used by [TechnologyModifier](runtime:TechnologyModifier).",       name="ModifierType",       order=157,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="inserter-stack-size-bonus"           },           {             complex_type="literal",             description="",             value="bulk-inserter-capacity-bonus"           },           {             complex_type="literal",             description="",             value="laboratory-speed"           },           {             complex_type="literal",             description="",             value="character-logistic-trash-slots"           },           {             complex_type="literal",             description="",             value="maximum-following-robots-count"           },           {             complex_type="literal",             description="",             value="worker-robot-speed"           },           {             complex_type="literal",             description="",             value="worker-robot-storage"           },           {             complex_type="literal",             description="",             value="turret-attack"           },           {             complex_type="literal",             description="",             value="ammo-damage"           },           {             complex_type="literal",             description="",             value="give-item"           },           {             complex_type="literal",             description="",             value="gun-speed"           },           {             complex_type="literal",             description="",             value="unlock-recipe"           },           {             complex_type="literal",             description="",             value="character-crafting-speed"           },           {             complex_type="literal",             description="",             value="character-mining-speed"           },           {             complex_type="literal",             description="",             value="character-running-speed"           },           {             complex_type="literal",             description="",             value="character-build-distance"           },           {             complex_type="literal",             description="",             value="character-item-drop-distance"           },           {             complex_type="literal",             description="",             value="character-reach-distance"           },           {             complex_type="literal",             description="",             value="character-resource-reach-distance"           },           {             complex_type="literal",             description="",             value="character-item-pickup-distance"           },           {             complex_type="literal",             description="",             value="character-loot-pickup-distance"           },           {             complex_type="literal",             description="",             value="character-inventory-slots-bonus"           },           {             complex_type="literal",             description="",             value="deconstruction-time-to-live"           },           {             complex_type="literal",             description="",             value="max-failed-attempts-per-tick-per-construction-queue"           },           {             complex_type="literal",             description="",             value="max-successful-attempts-per-tick-per-construction-queue"           },           {             complex_type="literal",             description="",             value="character-health-bonus"           },           {             complex_type="literal",             description="",             value="mining-drill-productivity-bonus"           },           {             complex_type="literal",             description="",             value="train-braking-force-bonus"           },           {             complex_type="literal",             description="",             value="worker-robot-battery"           },           {             complex_type="literal",             description="",             value="laboratory-productivity"           },           {             complex_type="literal",             description="",             value="follower-robot-lifetime"           },           {             complex_type="literal",             description="",             value="artillery-range"           },           {             complex_type="literal",             description="",             value="nothing"           },           {             complex_type="literal",             description="",             value="character-logistic-requests"           },           {             complex_type="literal",             description="",             value="unlock-space-location"           },           {             complex_type="literal",             description="",             value="unlock-quality"           },           {             complex_type="literal",             description="",             value="unlock-space-platforms"           },           {             complex_type="literal",             description="",             value="unlock-circuit-network"           },           {             complex_type="literal",             description="",             value="cargo-landing-pad-count"           },           {             complex_type="literal",             description="",             value="change-recipe-productivity"           },           {             complex_type="literal",             description="",             value="cliff-deconstruction-enabled"           },           {             complex_type="literal",             description="",             value="mining-with-fluid"           },           {             complex_type="literal",             description="",             value="rail-support-on-deep-oil-ocean"           },           {             complex_type="literal",             description="",             value="rail-planner-allow-elevated-rails"           },           {             complex_type="literal",             description="",             value="beacon-distribution"           },           {             complex_type="literal",             description="",             value="create-ghost-on-entity-death"           },           {             complex_type="literal",             description="",             value="belt-stack-size-bonus"           },           {             complex_type="literal",             description="",             value="vehicle-logistics"           }         }       }     },     {       description="The percentual increase of the attribute. A value of `0.6` means a 60% increase.\n\nQuality values are divided by 10 internally, allowing for one more decimal of precision.",       name="ModuleEffectValue",       order=13,       type="float"     },     {       description="",       examples={         "```\n-- These are the effects of the vanilla Speed Module 3\n{speed = 0.5, consumption = 0.7, quality = -0.25}\n```"       },       name="ModuleEffects",       order=14,       type={         complex_type="table",         parameters={           {             description="",             name="consumption",             optional=true,             order=0,             type="ModuleEffectValue"           },           {             description="",             name="pollution",             optional=true,             order=3,             type="ModuleEffectValue"           },           {             description="",             name="productivity",             optional=true,             order=2,             type="ModuleEffectValue"           },           {             description="",             name="quality",             optional=true,             order=4,             type="ModuleEffectValue"           },           {             description="",             name="speed",             optional=true,             order=1,             type="ModuleEffectValue"           }         }       }     },     {       description="A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.\n\nTo write to this, use an array[[string](runtime:string)] of the mouse buttons that should be possible to use with on button. The flag `\"left-and-right\"` can also be set, which will set `\"left\"` and `\"right\"` to `true`.",       name="MouseButtonFlags",       order=22,       type={         complex_type="dictionary",         key={           complex_type="union",           full_format=true,           options={             {               complex_type="literal",               description="",               value="left"             },             {               complex_type="literal",               description="",               value="right"             },             {               complex_type="literal",               description="",               value="middle"             },             {               complex_type="literal",               description="",               value="button-4"             },             {               complex_type="literal",               description="",               value="button-5"             },             {               complex_type="literal",               description="",               value="button-6"             },             {               complex_type="literal",               description="",               value="button-7"             },             {               complex_type="literal",               description="",               value="button-8"             },             {               complex_type="literal",               description="",               value="button-9"             }           }         },         value={           complex_type="literal",           value=true         }       }     },     {       description="",       name="NeighbourConnectable",       order=267,       type={         complex_type="table",         parameters={           {             description="",             name="affected_by_direction",             optional=false,             order=0,             type="boolean"           },           {             description="",             name="connections",             optional=false,             order=2,             type={               complex_type="array",               value="NeighbourConnectableConnectionDefinition"             }           },           {             description="",             name="neighbour_search_distance",             optional=false,             order=1,             type="float"           }         }       }     },     {       description="",       name="NeighbourConnectableConnectionDefinition",       order=266,       type={         complex_type="table",         parameters={           {             description="",             name="category",             optional=false,             order=1,             type="string"           },           {             description="",             name="location",             optional=false,             order=0,             type="MapLocation"           },           {             description="",             name="neighbour_category",             optional=false,             order=2,             type={               complex_type="array",               value="string"             }           }         }       }     },     {       description="The string representation of a noise expression. More detailed information is found on the [prototype docs](prototype:NamedNoiseExpression).",       name="NoiseExpressionSourceString",       order=181,       type="string"     },     {       description="",       name="NthTickEventData",       order=185,       type={         complex_type="table",         parameters={           {             description="The nth tick this handler was registered to.",             name="nth_tick",             optional=false,             order=1,             type="uint"           },           {             description="The tick during which the event happened.",             name="tick",             optional=false,             order=0,             type="uint"           }         }       }     },     {       description="A single offer on a market entity.",       name="Offer",       order=269,       type={         complex_type="table",         parameters={           {             description="The action that will take place when a player accepts the offer. Usually a `\"give-item\"` modifier.",             name="offer",             optional=false,             order=1,             type="TechnologyModifier"           },           {             description="List of prices.",             name="price",             optional=true,             order=0,             type={               complex_type="array",               value="MarketIngredient"             }           }         }       }     },     {       description="",       name="OldTileAndPosition",       order=187,       type={         complex_type="table",         parameters={           {             description="",             name="old_tile",             optional=false,             order=0,             type="LuaTilePrototype"           },           {             description="",             name="position",             optional=false,             order=1,             type="TilePosition"           }         }       }     },     {       description="A particle prototype may be specified in one of two ways.",       name="ParticleID",       order=56,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The particle prototype.",             value="LuaParticlePrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="PathFinderMapSettings",       order=166,       type={         complex_type="table",         parameters={           {             description="When looking for a path from cache, make sure it doesn't end too far from the requested end in relative terms. This is typically more lenient than the start ratio since the end target could be moving. Defaults to `0.15`.",             name="cache_accept_path_end_distance_ratio",             optional=false,             order=12,             type="double"           },           {             description="When looking for a path from cache, make sure it doesn't start too far from the requested start in relative terms. Defaults to `0.2`.",             name="cache_accept_path_start_distance_ratio",             optional=false,             order=11,             type="double"           },           {             description="When looking for a connection to a cached path, search at most for this number of steps times the original estimate. Defaults to `100`.",             name="cache_max_connect_to_cache_steps_multiplier",             optional=false,             order=10,             type="uint"           },           {             description="When assigning a rating to the best path, this multiplier times end distances is considered. This value is typically higher than the start multiplier as this results in better end path quality. Defaults to `20`.",             name="cache_path_end_distance_rating_multiplier",             optional=false,             order=16,             type="double"           },           {             description="When assigning a rating to the best path, this multiplier times start distances is considered. Defaults to `10`.",             name="cache_path_start_distance_rating_multiplier",             optional=false,             order=15,             type="double"           },           {             description="The maximum direct distance in tiles before a request is no longer considered short. Defaults to `100`.",             name="direct_distance_to_consider_short_request",             optional=false,             order=25,             type="uint"           },           {             description="A penalty that is applied for another unit that is too close and either not moving or has a different goal. Defaults to `30`.",             name="enemy_with_different_destination_collision_penalty",             optional=false,             order=19,             type="double"           },           {             description="The collision penalty for collisions in the extended bounding box but outside the entity's actual bounding box. Defaults to `3`.",             name="extended_collision_penalty",             optional=false,             order=22,             type="double"           },           {             description="The pathfinder performs a step of the backward search every `fwd2bwd_ratio`'th step. The minimum allowed value is `2`, which means symmetric search. The default value is `5`.",             name="fwd2bwd_ratio",             optional=false,             order=0,             type="uint"           },           {             description="The general collision penalty with other units. Defaults to `10`.",             name="general_entity_collision_penalty",             optional=false,             order=20,             type="double"           },           {             description="The collision penalty for positions that require the destruction of an entity to get to. Defaults to `3`.",             name="general_entity_subsequent_collision_penalty",             optional=false,             order=21,             type="double"           },           {             description="When looking at which node to check next, their heuristic value is multiplied by this ratio. The higher it is, the more the search is directed straight at the goal. Defaults to `2`.",             name="goal_pressure_ratio",             optional=false,             order=1,             type="double"           },           {             description="The distance in tiles after which other moving units are not considered for pathfinding. Defaults to `5`.",             name="ignore_moving_enemy_collision_distance",             optional=false,             order=18,             type="double"           },           {             description="The minimal distance to the goal in tiles required to be searched in the long path cache. Defaults to `30`.",             name="long_cache_min_cacheable_distance",             optional=false,             order=9,             type="double"           },           {             description="Number of elements in the long cache. Defaults to `25`.",             name="long_cache_size",             optional=false,             order=6,             type="uint"           },           {             description="The amount of path finder requests accepted per tick regardless of the requested path's length. Defaults to `10`.",             name="max_clients_to_accept_any_new_request",             optional=false,             order=23,             type="uint"           },           {             description="When the `max_clients_to_accept_any_new_request` amount is exhausted, only path finder requests with a short estimate will be accepted until this amount (per tick) is reached. Defaults to `100`.",             name="max_clients_to_accept_short_new_request",             optional=false,             order=24,             type="uint"           },           {             description="The maximum number of nodes that are expanded per tick. Defaults to `1 000`.",             name="max_steps_worked_per_tick",             optional=false,             order=3,             type="double"           },           {             description="The maximum amount of work each pathfinding job is allowed to do per tick. Defaults to `8 000`.",             name="max_work_done_per_tick",             optional=false,             order=4,             type="uint"           },           {             description="The minimum amount of steps that are guaranteed to be performed for every request. Defaults to `2000`.",             name="min_steps_to_check_path_find_termination",             optional=false,             order=28,             type="uint"           },           {             description="Same principle as `cache_accept_path_end_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.",             name="negative_cache_accept_path_end_distance_ratio",             optional=false,             order=14,             type="double"           },           {             description="Same principle as `cache_accept_path_start_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.",             name="negative_cache_accept_path_start_distance_ratio",             optional=false,             order=13,             type="double"           },           {             description="The delay in ticks between decrementing the score of all paths in the negative cache by one. Defaults to `20`.",             name="negative_path_cache_delay_interval",             optional=false,             order=32,             type="uint"           },           {             description="The thresholds of waiting clients after each of which the per-tick work limit will be increased by the corresponding value in `overload_multipliers`. This is to avoid clients having to wait too long. Must have the same number of elements as `overload_multipliers`. Defaults to `{0, 100, 500}`.",             name="overload_levels",             optional=false,             order=30,             type={               complex_type="array",               value="uint"             }           },           {             description="The multipliers to the amount of per-tick work applied after the corresponding thresholds in `overload_levels` have been reached. Must have the same number of elements as `overload_multipliers`. Defaults to `{2, 3, 4}`.",             name="overload_multipliers",             optional=false,             order=31,             type={               complex_type="array",               value="double"             }           },           {             description="The minimal number of nodes required to be searched in the short path cache. Defaults to `50`.",             name="short_cache_min_algo_steps_to_cache",             optional=false,             order=8,             type="uint"           },           {             description="The minimal distance to the goal in tiles required to be searched in the short path cache. Defaults to `10`.",             name="short_cache_min_cacheable_distance",             optional=false,             order=7,             type="double"           },           {             description="Number of elements in the short cache. Defaults to `5`.",             name="short_cache_size",             optional=false,             order=5,             type="uint"           },           {             description="The maximum amount of nodes a short request will traverse before being rescheduled as a long request. Defaults to `1000`.",             name="short_request_max_steps",             optional=false,             order=26,             type="uint"           },           {             description="The amount of steps that are allocated to short requests each tick, as a percentage of all available steps. Defaults to `0.5`, or 50%.",             name="short_request_ratio",             optional=false,             order=27,             type="double"           },           {             description="A penalty that is applied for another unit that is on the way to the goal. This is mainly relevant for situations where a group of units has arrived at the target they are supposed to attack, making units further back circle around to reach the target. Defaults to `30`.",             name="stale_enemy_with_same_destination_collision_penalty",             optional=false,             order=17,             type="double"           },           {             description="If the actual amount of steps is higher than the initial estimate by this factor, pathfinding is terminated. Defaults to `2000.0`.",             name="start_to_goal_cost_multiplier_to_terminate_path_find",             optional=false,             order=29,             type="double"           },           {             description="Whether to cache paths at all. Defaults to `true`.",             name="use_path_cache",             optional=false,             order=2,             type="boolean"           }         }       }     },     {       description="",       name="PathfinderFlags",       order=69,       type={         complex_type="table",         parameters={           {             description="Allows pathing through friendly entities. Defaults to `false`.",             name="allow_destroy_friendly_entities",             optional=true,             order=0,             type="boolean"           },           {             description="Allows the pathfinder to path through entities of the same force. Defaults to `false`.",             name="allow_paths_through_own_entities",             optional=true,             order=1,             type="boolean"           },           {             description="Enables path caching. This can be more efficient, but might fail to respond to changes in the environment. Defaults to `true`.",             name="cache",             optional=true,             order=2,             type="boolean"           },           {             description="Sets lower priority on the path request, meaning it might take longer to find a path at the expense of speeding up others. Defaults to `false`.",             name="low_priority",             optional=true,             order=4,             type="boolean"           },           {             description="Makes the pathfinder not break in the middle of processing this pathfind, no matter how much work is needed. Defaults to `false`.",             name="no_break",             optional=true,             order=5,             type="boolean"           },           {             description="Makes the pathfinder try to path in straight lines. Defaults to `false`.",             name="prefer_straight_paths",             optional=true,             order=3,             type="boolean"           }         }       }     },     {       description="",       name="PathfinderWaypoint",       order=188,       type={         complex_type="table",         parameters={           {             description="`true` if the path from the previous waypoint to this one goes through an entity that must be destroyed.",             name="needs_destroy_to_reach",             optional=false,             order=1,             type="boolean"           },           {             description="The position of the waypoint on its surface.",             name="position",             optional=false,             order=0,             type="MapPosition"           }         }       }     },     {       description="",       name="PerceivedPerformance",       order=272,       type={         complex_type="table",         parameters={           {             description="",             name="maximum",             optional=false,             order=1,             type="double"           },           {             description="",             name="minimum",             optional=false,             order=0,             type="double"           },           {             description="",             name="performance_to_activity_rate",             optional=false,             order=2,             type="double"           }         }       }     },     {       description="A single pipe connection for a given fluidbox.",       name="PipeConnection",       order=193,       type={         complex_type="table",         parameters={           {             description="",             name="connection_type",             optional=false,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="normal"                 },                 {                   complex_type="literal",                   value="underground"                 },                 {                   complex_type="literal",                   value="linked"                 }               }             }           },           {             description="",             name="flow_direction",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="input"                 },                 {                   complex_type="literal",                   value="output"                 },                 {                   complex_type="literal",                   value="input-output"                 }               }             }           },           {             description="The absolute position of this connection within the entity.",             name="position",             optional=false,             order=2,             type="MapPosition"           },           {             description="The connected fluidbox, if any.",             name="target",             optional=true,             order=4,             type="LuaFluidBox"           },           {             description="The index of the target fluidbox, if any.",             name="target_fluidbox_index",             optional=true,             order=5,             type="uint"           },           {             description="The index of the target fluidbox pipe connection, if any.",             name="target_pipe_connection_index",             optional=true,             order=6,             type="uint"           },           {             description="The absolute position of the connection's intended target.",             name="target_position",             optional=false,             order=3,             type="MapPosition"           }         }       }     },     {       description="",       name="PipeConnectionDefinition",       order=110,       type={         complex_type="table",         parameters={           {             description="",             name="connection_category",             optional=false,             order=5,             type={               complex_type="array",               value="string"             }           },           {             description="",             name="connection_type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="normal"                 },                 {                   complex_type="literal",                   value="underground"                 },                 {                   complex_type="literal",                   value="linked"                 }               }             }           },           {             description="",             name="direction",             optional=false,             order=4,             type="defines.direction"           },           {             description="",             name="flow_direction",             optional=false,             order=3,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="input-output"                 },                 {                   complex_type="literal",                   value="input"                 },                 {                   complex_type="literal",                   value="output"                 }               }             }           },           {             description="Only supplied if `connection_type` is `\"linked\"`.",             name="linked_connection_id",             optional=true,             order=6,             type="uint"           },           {             description="The maximum tile distance this underground connection can connect.",             name="max_underground_distance",             optional=true,             order=2,             type="uint"           },           {             description="The 4 cardinal direction connection points for this pipe.",             name="positions",             optional=false,             order=1,             type={               complex_type="array",               value="MapPosition"             }           }         }       }     },     {       description="",       name="PipetteID",       order=108,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="",             value="LuaEntityPrototype"           },           {             complex_type="type",             description="",             value="LuaEquipmentPrototype"           },           {             complex_type="type",             description="",             value="LuaFluidPrototype"           },           {             complex_type="type",             description="",             value="LuaItemPrototype"           },           {             complex_type="type",             description="",             value="LuaRecipePrototype"           },           {             complex_type="type",             description="",             value="LuaSpaceLocationPrototype"           },           {             complex_type="type",             description="",             value="LuaTilePrototype"           },           {             complex_type="type",             description="",             value="LuaVirtualSignalPrototype"           }         }       }     },     {       description="",       name="PlaceAsTileResult",       order=206,       type={         complex_type="table",         parameters={           {             description="",             name="condition",             optional=false,             order=2,             type="CollisionMask"           },           {             description="",             name="condition_size",             optional=false,             order=1,             type="uint"           },           {             description="",             name="invert",             optional=false,             order=3,             type="boolean"           },           {             description="The tile prototype.",             name="result",             optional=false,             order=0,             type="LuaTilePrototype"           }         }       }     },     {       description="",       name="PlatformSchedule",       order=41,       type={         complex_type="table",         parameters={           {             description="Index of the currently active record",             name="current",             optional=false,             order=0,             type="uint"           },           {             description="",             name="records",             optional=false,             order=1,             type={               complex_type="array",               value="ScheduleRecord"             }           }         }       }     },     {       description="",       name="PlaySoundSpecification",       order=71,       type={         complex_type="table",         parameters={           {             description="The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.",             name="override_sound_type",             optional=true,             order=3,             type="SoundType"           },           {             description="The sound to play.",             name="path",             optional=false,             order=0,             type="SoundPath"           },           {             description="Where the sound should be played. If not given, it's played globally on the player's controller's surface.",             name="position",             optional=true,             order=1,             type="MapPosition"           },           {             description="The volume of the sound to play. Must be between 0 and 1 inclusive.",             name="volume_modifier",             optional=true,             order=2,             type="double"           }         }       }     },     {       description="A player may be specified in one of three ways.",       name="PlayerIdentification",       order=73,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The player index.",             value="uint"           },           {             complex_type="type",             description="The player name.",             value="string"           },           {             complex_type="type",             description="A reference to [LuaPlayer](runtime:LuaPlayer) may be passed directly.",             value="LuaPlayer"           }         }       }     },     {       description="These values are for the time frame of one second (60 ticks).",       name="PollutionMapSettings",       order=171,       type={         complex_type="table",         parameters={           {             description="The amount of pollution eaten by a chunk's tiles as a percentage of 1. Also known as absorption modifier. Defaults to `1`.",             name="ageing",             optional=false,             order=3,             type="double"           },           {             description="The amount that is diffused to a neighboring chunk (possibly repeated for other directions as well). Defaults to `0.02`.",             name="diffusion_ratio",             optional=false,             order=1,             type="double"           },           {             description="Whether pollution is enabled at all.",             name="enabled",             optional=false,             order=0,             type="boolean"           },           {             description="Defaults to `1`.",             name="enemy_attack_pollution_consumption_modifier",             optional=false,             order=11,             type="double"           },           {             description="Any amount of pollution larger than this value is visualized as this value instead. Defaults to `150`.",             name="expected_max_per_chunk",             optional=false,             order=4,             type="double"           },           {             description="Defaults to `20`.",             name="max_pollution_to_restore_trees",             optional=false,             order=10,             type="double"           },           {             description="Defaults to `60`.",             name="min_pollution_to_damage_trees",             optional=false,             order=6,             type="double"           },           {             description="The amount of PUs that need to be in a chunk for it to start diffusing. Defaults to `15`.",             name="min_to_diffuse",             optional=false,             order=2,             type="double"           },           {             description="Any amount of pollution smaller than this value (but bigger than zero) is visualized as this value instead. Defaults to `50`.",             name="min_to_show_per_chunk",             optional=false,             order=5,             type="double"           },           {             description="Defaults to `50`.",             name="pollution_per_tree_damage",             optional=false,             order=8,             type="double"           },           {             description="Defaults to `10`.",             name="pollution_restored_per_tree_damage",             optional=false,             order=9,             type="double"           },           {             description="Defaults to `150`.",             name="pollution_with_max_forest_damage",             optional=false,             order=7,             type="double"           }         }       }     },     {       description="",       name="PrintSettings",       order=83,       type={         complex_type="table",         parameters={           {             description="Color of the message to print. Defaults to white.",             name="color",             optional=true,             order=0,             type="Color"           },           {             description="If set to false, message will not be part of game state and will disappear from output console after save-load. Defaults to `true`.",             name="game_state",             optional=true,             order=5,             type="boolean"           },           {             description="Condition when to skip adding message. Defaults to `defines.print_skip.if_redundant`.",             name="skip",             optional=true,             order=2,             type="defines.print_skip"           },           {             description="If a sound should be emitted for this message. Defaults to `defines.print_sound.use_player_settings`.",             name="sound",             optional=true,             order=1,             type="defines.print_sound"           },           {             description="The sound to play. If not given, [UtilitySounds::console_message](prototype:UtilitySounds::console_message) will be used instead.",             name="sound_path",             optional=true,             order=3,             type="SoundPath"           },           {             description="The volume of the sound to play. Must be between 0 and 1 inclusive. Defaults to 1.",             name="volume_modifier",             optional=true,             order=4,             type="float"           }         }       }     },     {       description="Returns one of the subtypes, depending on the value of `type`.",       examples={         "```\n-- Products of the \"steel-chest\" recipe (an array of Product)\n{{type=\"item\", name=\"steel-chest\", amount=1}}\n```",         "```\n-- Products of the \"advanced-oil-processing\" recipe\n{{type=\"fluid\", name=\"heavy-oil\", amount=1},\n  {type=\"fluid\", name=\"light-oil\", amount=4.5},\n  {type=\"fluid\", name=\"petroleum-gas\", amount=5.5}}\n```",         "```\n-- What a custom recipe would look like that had a probability of 0.5 to return a\n-- minimum amount of 1 and a maximum amount of 5\n{{type=\"item\", name=\"custom-item\", probability=0.5, amount_min=1, amount_max=5}}\n```"       },       name="Product",       order=145,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Returned when the `type` is `\"item\"`.",             value="ItemProduct"           },           {             complex_type="type",             description="Returned when the `type` is `\"fluid\"`.",             value="FluidProduct"           },           {             complex_type="type",             description="Returned when the `type` is `\"research-progress\"`.",             value="ResearchProgressProduct"           }         }       }     },     {       description="",       name="ProgrammableSpeakerAlertParameters",       order=255,       type={         complex_type="table",         parameters={           {             description="",             name="alert_message",             optional=false,             order=3,             type="string"           },           {             description="",             name="icon_signal_id",             optional=false,             order=2,             type="SignalID"           },           {             description="",             name="show_alert",             optional=false,             order=0,             type="boolean"           },           {             description="",             name="show_on_map",             optional=false,             order=1,             type="boolean"           }         }       }     },     {       description="",       name="ProgrammableSpeakerCircuitParameters",       order=256,       type={         complex_type="table",         parameters={           {             description="",             name="instrument_id",             optional=false,             order=2,             type="uint"           },           {             description="",             name="note_id",             optional=false,             order=3,             type="uint"           },           {             description="",             name="signal_value_is_pitch",             optional=false,             order=0,             type="boolean"           },           {             description="",             name="stop_playing_sounds",             optional=false,             order=1,             type="boolean"           }         }       }     },     {       description="",       name="ProgrammableSpeakerInstrument",       order=251,       type={         complex_type="table",         parameters={           {             description="",             name="name",             optional=false,             order=0,             type="string"           },           {             description="",             name="notes",             optional=false,             order=1,             type={               complex_type="array",               value="string"             }           }         }       }     },     {       description="",       name="ProgrammableSpeakerParameters",       order=253,       type={         complex_type="table",         parameters={           {             description="",             name="allow_polyphony",             optional=false,             order=2,             type="boolean"           },           {             description="",             name="playback_mode",             optional=false,             order=1,             type="ProgrammableSpeakerPlaybackMode"           },           {             description="",             name="playback_volume",             optional=false,             order=0,             type="float"           },           {             description="",             name="volume_controlled_by_signal",             optional=false,             order=3,             type="boolean"           },           {             description="",             name="volume_signal_id",             optional=false,             order=4,             type="SignalID"           }         }       }     },     {       description="Specifies from where the programmable speaker's sound will be heard.",       name="ProgrammableSpeakerPlaybackMode",       order=254,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="The sound can be heard within the audible range around the speaker.",             value="local"           },           {             complex_type="literal",             description="The sound can be heard anywhere on the speaker's surface.",             value="surface"           },           {             complex_type="literal",             description="The sound can be heard everywhere.",             value="global"           }         }       }     },     {       description="All other MapGenSettings feed into named noise expressions, and therefore placement can be overridden by including the name of a property in this dictionary. The probability and richness functions for placing specific tiles, entities, and decoratives can be overridden by including an entry named `{tile|entity|decorative}:(prototype name):{probability|richness}`.",       lists={         "Values either name a NamedNoiseExpression or can be literal numbers, stored as strings (e.g. `5`). All other controls can be overridden by a property expression names. Notable properties:\n\n- `moisture` - a value between 0 and 1 that determines whether a tile becomes sandy (low moisture) or grassy (high moisture).\n- `aux` - a value between 0 and 1 that determines whether low-moisture tiles become sand or red desert.\n- `temperature` - provides a value (vaguely representing degrees Celsius, varying between -20 and 50) that is used (together with moisture and aux) as part of tree and decorative placement.\n- `elevation` - tiles values less than zero become water. Cliffs are placed along certain contours according to [CliffPlacementSettings](runtime:CliffPlacementSettings).\n- `cliffiness` - determines whether (when >0.5) or not (when <0.5) a cliff will be placed at an otherwise suitable (according to [CliffPlacementSettings](runtime:CliffPlacementSettings)) location.\n- `enemy-base-intensity` - a number that is referenced by both `enemy-base-frequency` and `enemy-base-radius`. i.e. if this is overridden, enemy base frequency and size will both be affected and do something reasonable. By default, this expression returns a value proportional to distance from any starting point, clamped at about 7.\n- `enemy-base-frequency` - a number representing average number of enemy bases per tile for a region, by default in terms of `enemy-base-intensity`.\n- `enemy-base-radius` - a number representing the radius of an enemy base, if one were to be placed on the given tile, by default proportional to a constant plus `enemy-base-intensity`.",         "Climate controls ('Moisture' and 'Terrain type' at the bottom of the Terrain tab in the map generator GUI) don't have their own dedicated structures in MapGenSettings. Instead, their values are stored as property expression overrides with long names:\n\n- `control:moisture:frequency` - frequency (inverse of scale) multiplier for moisture noise.  Default is 1.\n- `control:moisture:bias` - global bias for moisture (which normally varies between 0 and 1). Default is 0.\n- `control:aux:frequency` - frequency (inverse of scale) multiplier for aux (called 'terrain type' in the GUI) noise.  Default is 1.\n- `control:aux:bias` - global bias for aux/terrain type (which normally varies between 0 and 1). Default is 0."       },       name="PropertyExpressionNames",       order=317,       type={         complex_type="dictionary",         key="string",         value="string"       }     },     {       description="Types `\"signal\"` and `\"item-group\"` do not support filters.\n\nFilters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.",       name="PrototypeFilter",       order=247,       type={         complex_type="array",         value={           complex_type="union",           full_format=true,           options={             {               complex_type="type",               description="",               value="ModSettingPrototypeFilter"             },             {               complex_type="type",               description="",               value="SpaceLocationPrototypeFilter"             },             {               complex_type="type",               description="",               value="DecorativePrototypeFilter"             },             {               complex_type="type",               description="",               value="TilePrototypeFilter"             },             {               complex_type="type",               description="",               value="AsteroidChunkPrototypeFilter"             },             {               complex_type="type",               description="",               value="ItemPrototypeFilter"             },             {               complex_type="type",               description="",               value="TechnologyPrototypeFilter"             },             {               complex_type="type",               description="",               value="RecipePrototypeFilter"             },             {               complex_type="type",               description="",               value="AchievementPrototypeFilter"             },             {               complex_type="type",               description="",               value="EquipmentPrototypeFilter"             },             {               complex_type="type",               description="",               value="FluidPrototypeFilter"             },             {               complex_type="type",               description="",               value="EntityPrototypeFilter"             }           }         }       }     },     {       description="",       name="PrototypeFilterMode",       order=118,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="none"           },           {             complex_type="literal",             description="",             value="whitelist"           },           {             complex_type="literal",             description="",             value="blacklist"           }         }       }     },     {       description="",       name="PrototypeHistory",       order=222,       type={         complex_type="table",         parameters={           {             description="The mods that changed this prototype in the order they changed it.",             name="changed",             optional=false,             order=1,             type={               complex_type="array",               value="string"             }           },           {             description="The mod that created this prototype.",             name="created",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="PrototypeWithQuality",       order=25,       type={         complex_type="table",         parameters={           {             description="Name of a prototype.",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Name of a quality prototype. Always defined when reading, defaults to \"normal\" when writing.",             name="quality",             optional=true,             order=1,             type="string"           }         }       }     },     {       description="An item filter may be specified in two ways, either as a string which is a quality prototype name or as a table.",       name="QualityCondition",       order=88,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="The comparator for quality.",                 name="comparator",                 optional=true,                 order=1,                 type="ComparatorString"               },               {                 description="The prototype name of the quality.",                 name="quality",                 optional=true,                 order=0,                 type="string"               }             }           },           "string"         }       }     },     {       description="A quality prototype may be specified in one of two ways.",       name="QualityID",       order=61,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The quality prototype.",             value="LuaQualityPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="RadiusVisualisationSpecification",       order=274,       type={         complex_type="table",         parameters={           {             description="",             name="distance",             optional=false,             order=0,             type="double"           },           {             description="",             name="draw_in_cursor",             optional=false,             order=2,             type="boolean"           },           {             description="",             name="draw_on_selection",             optional=false,             order=3,             type="boolean"           },           {             description="",             name="offset",             optional=false,             order=1,             type="Vector"           }         }       }     },     {       description="",       name="RailEndGoal",       order=231,       type={         complex_type="table",         parameters={           {             description="",             name="direction",             optional=false,             order=1,             type="defines.rail_direction"           },           {             description="Goal priority. If not provided, defaults to 50.",             name="priority",             optional=true,             order=2,             type="uint8"           },           {             description="Rail target.",             name="rail",             optional=false,             order=0,             type="LuaEntity"           }         }       }     },     {       description="",       name="RailEndStart",       order=232,       type={         complex_type="table",         parameters={           {             description="Defaults to `true`. Providing false will cause the pathfinder to reject a path that starts here and ends in the same segment as the path would be too short to provide correct alignment with a goal.",             name="allow_path_within_segment",             optional=true,             order=2,             type="boolean"           },           {             description="",             name="direction",             optional=false,             order=1,             type="defines.rail_direction"           },           {             description="Defaults to `false`.",             name="is_front",             optional=true,             order=3,             type="boolean"           },           {             description="Start priority. Defaults to `50`.",             name="priority",             optional=true,             order=4,             type="uint8"           },           {             description="",             name="rail",             optional=false,             order=0,             type="LuaEntity"           }         }       }     },     {       description="",       name="RailExtensionData",       order=183,       type={         complex_type="table",         parameters={           {             description="Direction of the entity to be built",             name="direction",             optional=false,             order=2,             type="defines.direction"           },           {             description="Goal where this rail extension will go to",             name="goal",             optional=false,             order=3,             type="RailLocation"           },           {             description="Name of the entity prototype to be built",             name="name",             optional=false,             order=0,             type="string"           },           {             description="Position of the entity to be built",             name="position",             optional=false,             order=1,             type="MapPosition"           }         }       }     },     {       description="",       name="RailLocation",       order=42,       type={         complex_type="table",         parameters={           {             description="",             name="direction",             optional=false,             order=1,             type="defines.direction"           },           {             description="",             name="position",             optional=false,             order=0,             type="MapPosition"           },           {             description="",             name="rail_layer",             optional=false,             order=2,             type="defines.rail_layer"           }         }       }     },     {       description="",       name="RangeMode",       order=101,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="center-to-center"           },           {             complex_type="literal",             description="",             value="bounding-box-to-bounding-box"           },           {             complex_type="literal",             description="",             value="center-to-bounding-box"           }         }       }     },     {       description="The smooth orientation. It is a `float` in the range `[0, 1)` that covers a full circle, starting at the top and going clockwise.\n\nThis means a value of `0` indicates \"north\", a value of `0.5` indicates \"south\". For example then, a value of `0.625` would indicate \"south-west\", and a value of `0.875` would indicate \"north-west\".",       name="RealOrientation",       order=96,       type="float"     },     {       description="A recipe category may be specified in one of two ways.",       name="RecipeCategoryID",       order=62,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="By recipe category prototype.",             value="LuaRecipeCategoryPrototype"           },           {             complex_type="type",             description="By name of the recipe category prototype.",             value="string"           }         }       }     },     {       description="A recipe may be specified in one of three ways.",       name="RecipeID",       order=63,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="By recipe prototype.",             value="LuaRecipePrototype"           },           {             complex_type="type",             description="By instance of recipe.",             value="LuaRecipe"           },           {             complex_type="type",             description="By name of the recipe prototype.",             value="string"           }         }       }     },     {       description="A recipe prototype with optional quality specification.",       name="RecipeIDAndQualityIDPair",       order=44,       type={         complex_type="table",         parameters={           {             description="Recipe prototype.",             name="name",             optional=false,             order=0,             type="RecipeID"           },           {             description="Quality prototype.",             name="quality",             optional=false,             order=1,             type="QualityID"           }         }       }     },     {       description="",       name="RecipePrototypeFilter",       order=325,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="enabled"                 },                 {                   complex_type="literal",                   value="hidden"                 },                 {                   complex_type="literal",                   value="hidden-from-flow-stats"                 },                 {                   complex_type="literal",                   value="hidden-from-player-crafting"                 },                 {                   complex_type="literal",                   value="allow-as-intermediate"                 },                 {                   complex_type="literal",                   value="allow-intermediates"                 },                 {                   complex_type="literal",                   value="allow-decomposition"                 },                 {                   complex_type="literal",                   value="always-show-made-in"                 },                 {                   complex_type="literal",                   value="always-show-products"                 },                 {                   complex_type="literal",                   value="show-amount-in-title"                 },                 {                   complex_type="literal",                   value="has-ingredients"                 },                 {                   complex_type="literal",                   value="has-products"                 },                 {                   complex_type="literal",                   value="has-ingredient-item"                 },                 {                   complex_type="literal",                   value="has-ingredient-fluid"                 },                 {                   complex_type="literal",                   value="has-product-item"                 },                 {                   complex_type="literal",                   value="has-product-fluid"                 },                 {                   complex_type="literal",                   value="subgroup"                 },                 {                   complex_type="literal",                   value="category"                 },                 {                   complex_type="literal",                   value="energy"                 },                 {                   complex_type="literal",                   value="emissions-multiplier"                 },                 {                   complex_type="literal",                   value="request-paste-multiplier"                 },                 {                   complex_type="literal",                   value="overload-multiplier"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="category",             order=5,             parameters={               {                 description="A [LuaRecipeCategoryPrototype](runtime:LuaRecipeCategoryPrototype) name",                 name="category",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="emissions-multiplier",             order=7,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="energy",             order=6,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="```\n-- selects recipes that consume sulfuric acid\n{{filter = \"has-ingredient-fluid\", elem_filters = {{filter = \"name\", name = \"sulfuric-acid\"}}}}\n```",             name="has-ingredient-fluid",             order=1,             parameters={               {                 description="Matches if at least 1 ingredient is a fluid that matches these filters.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="FluidPrototypeFilter"                 }               }             }           },           {             description="",             name="has-ingredient-item",             order=0,             parameters={               {                 description="Matches if at least 1 ingredient is an item that matches these filters.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="ItemPrototypeFilter"                 }               }             }           },           {             description="",             name="has-product-fluid",             order=3,             parameters={               {                 description="Matches if at least 1 product is a fluid that matches",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="FluidPrototypeFilter"                 }               }             }           },           {             description="Usage example: \n```\n-- selects recipes that produce an item\n{{filter = \"has-product-item\"}}\n-- selects recipes that produce iron plates\n{{filter = \"has-product-item\", elem_filters = {{filter = \"name\", name = \"iron-plate\"}}}}\n-- selects recipes that produce items that place furnaces\n{{filter = \"has-product-item\", elem_filters = {{filter = \"place-result\", elem_filters = {{filter = \"type\", type = \"furnace\"}}}}}}\n```",             name="has-product-item",             order=2,             parameters={               {                 description="Matches if at least 1 product is an item that matches these filters.",                 name="elem_filters",                 optional=true,                 order=0,                 type={                   complex_type="array",                   value="ItemPrototypeFilter"                 }               }             }           },           {             description="",             name="overload-multiplier",             order=9,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="request-paste-multiplier",             order=8,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="subgroup",             order=4,             parameters={               {                 description="A [LuaGroup](runtime:LuaGroup) (subgroup) name",                 name="subgroup",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="Represents an object that can be [registered](runtime:LuaBootstrap::register_on_object_destroyed) for the [on_object_destroyed](runtime:on_object_destroyed) event. Each target has an associated [defines.target_type](runtime:defines.target_type) and some have a unique identifier.",       name="RegistrationTarget",       order=243,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="Target type [entity](runtime:defines.target_type.entity); `useful_id` [LuaEntity::unit_number](runtime:LuaEntity::unit_number)",             value="LuaEntity"           },           {             complex_type="type",             description="Target type [equipment](runtime:defines.target_type.equipment)",             value="LuaEquipment"           },           {             complex_type="type",             description="Target type [equipment_grid](runtime:defines.target_type.equipment_grid); `useful_id` [LuaEquipmentGrid::unique_id](runtime:LuaEquipmentGrid::unique_id)",             value="LuaEquipmentGrid"           },           {             complex_type="type",             description="Target type [item](runtime:defines.target_type.item); `useful_id` [LuaItemCommon::item_number](runtime:LuaItemCommon::item_number)",             value="LuaItem"           },           {             complex_type="type",             description="Target type [logistic_cell](runtime:defines.target_type.logistic_cell)",             value="LuaLogisticCell"           },           {             complex_type="type",             description="Target type [logistic_network](runtime:defines.target_type.logistic_network); `useful_id` [LuaLogisticNetwork::network_id](runtime:LuaLogisticNetwork::network_id)",             value="LuaLogisticNetwork"           },           {             complex_type="type",             description="Target type [logistic_section](runtime:defines.target_type.logistic_section)",             value="LuaLogisticSection"           },           {             complex_type="type",             description="Target type [permission_group](runtime:defines.target_type.permission_group); `useful_id` [LuaPermissionGroup::group_id](runtime:LuaPermissionGroup::group_id)",             value="LuaPermissionGroup"           },           {             complex_type="type",             description="Target type [planet](runtime:defines.target_type.planet)",             value="LuaPlanet"           },           {             complex_type="type",             description="Target type [player](runtime:defines.target_type.player); `useful_id` [LuaPlayer::index](runtime:LuaPlayer::index)",             value="LuaPlayer"           },           {             complex_type="type",             description="Target type [rail_path](runtime:defines.target_type.rail_path)",             value="LuaRailPath"           },           {             complex_type="type",             description="Target type [render_object](runtime:defines.target_type.render_object); `useful_id` [LuaRenderObject::id](runtime:LuaRenderObject::id)",             value="LuaRenderObject"           },           {             complex_type="type",             description="Target type [space_platform](runtime:defines.target_type.space_platform); `useful_id` [LuaSpacePlatform::index](runtime:LuaSpacePlatform::index)",             value="LuaSpacePlatform"           },           {             complex_type="type",             description="Target type [surface](runtime:defines.target_type.surface); `useful_id` [LuaSurface::index](runtime:LuaSurface::index)",             value="LuaSurface"           },           {             complex_type="type",             description="Target type [train](runtime:defines.target_type.train); `useful_id` [LuaTrain::id](runtime:LuaTrain::id)",             value="LuaTrain"           },           {             complex_type="type",             description="Target type [commandable](runtime:defines.target_type.commandable); `useful_id` [LuaCommandable::unique_id](runtime:LuaCommandable::unique_id)",             value="LuaCommandable"           },           {             complex_type="type",             description="Target type [custom_chart_tag](runtime:defines.target_type.custom_chart_tag); `useful_id` [LuaCustomChartTag::tag_number](runtime:LuaCustomChartTag::tag_number)",             value="LuaCustomChartTag"           },           {             complex_type="type",             description="Target type [gui_element](runtime:defines.target_type.gui_element); `useful_id` [LuaGuiElement::index](runtime:LuaGuiElement::index)",             value="LuaGuiElement"           },           {             complex_type="type",             description="Target type [cargo_hatch](runtime:defines.target_type.cargo_hatch)",             value="LuaCargoHatch"           },           {             complex_type="type",             description="Target type [schedule](runtime:defines.target_type.schedule)",             value="LuaSchedule"           }         }       }     },     {       description="A number between 0 and 255 inclusive, represented by one of the following named strings or the string version of the number. For example `\"10\"` and `\"decals\"` are both valid. Higher values are rendered above lower values.",       name="RenderLayer",       order=17,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="A string of a number",             value="string"           },           {             complex_type="literal",             description="0",             value="zero"           },           {             complex_type="literal",             description="1",             value="background-transitions"           },           {             complex_type="literal",             description="2",             value="under-tiles"           },           {             complex_type="literal",             description="10",             value="decals"           },           {             complex_type="literal",             description="11",             value="above-tiles"           },           {             complex_type="literal",             description="12",             value="ground-layer-1"           },           {             complex_type="literal",             description="13",             value="ground-layer-2"           },           {             complex_type="literal",             description="14",             value="ground-layer-3"           },           {             complex_type="literal",             description="15",             value="ground-layer-4"           },           {             complex_type="literal",             description="16",             value="ground-layer-5"           },           {             complex_type="literal",             description="29",             value="lower-radius-visualization"           },           {             complex_type="literal",             description="30",             value="radius-visualization"           },           {             complex_type="literal",             description="65",             value="transport-belt-integration"           },           {             complex_type="literal",             description="66",             value="resource"           },           {             complex_type="literal",             description="67",             value="building-smoke"           },           {             complex_type="literal",             description="68",             value="rail-stone-path-lower"           },           {             complex_type="literal",             description="76",             value="rail-stone-path"           },           {             complex_type="literal",             description="84",             value="rail-tie"           },           {             complex_type="literal",             description="92",             value="decorative"           },           {             complex_type="literal",             description="93",             value="ground-patch"           },           {             complex_type="literal",             description="94",             value="ground-patch-higher"           },           {             complex_type="literal",             description="95",             value="ground-patch-higher2"           },           {             complex_type="literal",             description="96",             value="rail-chain-signal-metal"           },           {             complex_type="literal",             description="97",             value="rail-screw"           },           {             complex_type="literal",             description="100",             value="rail-metal"           },           {             complex_type="literal",             description="102",             value="remnants"           },           {             complex_type="literal",             description="103",             value="floor"           },           {             complex_type="literal",             description="104",             value="transport-belt"           },           {             complex_type="literal",             description="105",             value="transport-belt-endings"           },           {             complex_type="literal",             description="106",             value="floor-mechanics-under-corpse"           },           {             complex_type="literal",             description="107",             value="corpse"           },           {             complex_type="literal",             description="108",             value="floor-mechanics"           },           {             complex_type="literal",             description="109",             value="item"           },           {             complex_type="literal",             description="117",             value="transport-belt-reader"           },           {             complex_type="literal",             description="118",             value="lower-object"           },           {             complex_type="literal",             description="120",             value="transport-belt-circuit-connector"           },           {             complex_type="literal",             description="121",             value="lower-object-above-shadow"           },           {             complex_type="literal",             description="122",             value="lower-object-overlay"           },           {             complex_type="literal",             description="123",             value="object-under"           },           {             complex_type="literal",             description="124",             value="object"           },           {             complex_type="literal",             description="125",             value="cargo-hatch"           },           {             complex_type="literal",             description="126",             value="higher-object-under"           },           {             complex_type="literal",             description="127",             value="higher-object-above"           },           {             complex_type="literal",             description="128",             value="train-stop-top"           },           {             complex_type="literal",             description="129",             value="item-in-inserter-hand"           },           {             complex_type="literal",             description="130",             value="above-inserters"           },           {             complex_type="literal",             description="131",             value="wires"           },           {             complex_type="literal",             description="132",             value="under-elevated"           },           {             complex_type="literal",             description="133",             value="elevated-rail-stone-path-lower"           },           {             complex_type="literal",             description="134",             value="elevated-rail-stone-path"           },           {             complex_type="literal",             description="135",             value="elevated-rail-tie"           },           {             complex_type="literal",             description="136",             value="elevated-rail-screw"           },           {             complex_type="literal",             description="137",             value="elevated-rail-metal"           },           {             complex_type="literal",             description="141",             value="elevated-lower-object"           },           {             complex_type="literal",             description="142",             value="elevated-object"           },           {             complex_type="literal",             description="143",             value="elevated-higher-object"           },           {             complex_type="literal",             description="149",             value="fluid-visualization"           },           {             complex_type="literal",             description="150",             value="wires-above"           },           {             complex_type="literal",             description="153",             value="entity-info-icon"           },           {             complex_type="literal",             description="154",             value="entity-info-icon-above"           },           {             complex_type="literal",             description="157",             value="explosion"           },           {             complex_type="literal",             description="158",             value="projectile"           },           {             complex_type="literal",             description="159",             value="smoke"           },           {             complex_type="literal",             description="160",             value="air-object"           },           {             complex_type="literal",             description="161",             value="air-entity-info-icon"           },           {             complex_type="literal",             description="162",             value="light-effect"           },           {             complex_type="literal",             description="187",             value="selection-box"           },           {             complex_type="literal",             description="188",             value="higher-selection-box"           },           {             complex_type="literal",             description="189",             value="collision-selection-box"           },           {             complex_type="literal",             description="190",             value="arrow"           },           {             complex_type="literal",             description="226",             value="cursor"           }         }       }     },     {       description="",       name="ResearchIngredient",       order=156,       type={         complex_type="table",         parameters={           {             description="Amount of items required to research one unit of technology.",             name="amount",             optional=false,             order=1,             type="uint16"           },           {             description="Prototype name of the required item.",             name="name",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="ResearchProgressProduct",       order=148,       type={         complex_type="table",         parameters={           {             description="",             name="amount",             optional=false,             order=2,             type="double"           },           {             description="Prototype name of the research item.",             name="research_item",             optional=false,             order=1,             type="string"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="literal",               value="research-progress"             }           }         }       }     },     {       description="",       name="ResearchTrigger",       order=159,       type={         complex_type="table",         parameters={           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="craft-item"                 },                 {                   complex_type="literal",                   value="mine-entity"                 },                 {                   complex_type="literal",                   value="craft-fluid"                 },                 {                   complex_type="literal",                   value="send-item-to-orbit"                 },                 {                   complex_type="literal",                   value="capture-spawner"                 },                 {                   complex_type="literal",                   value="build-entity"                 },                 {                   complex_type="literal",                   value="create-space-platform"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="build-entity",             order=4,             parameters={               {                 description="",                 name="entity",                 optional=false,                 order=0,                 type="EntityIDFilter"               }             }           },           {             description="",             name="capture-spawner",             order=3,             parameters={               {                 description="",                 name="entity",                 optional=true,                 order=0,                 type="string"               }             }           },           {             description="",             name="craft-fluid",             order=2,             parameters={               {                 description="",                 name="amount",                 optional=false,                 order=1,                 type="double"               },               {                 description="",                 name="fluid",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="craft-item",             order=0,             parameters={               {                 description="",                 name="item",                 optional=false,                 order=0,                 type="string"               },               {                 description="",                 name="item_quality",                 optional=true,                 order=1,                 type="string"               }             }           },           {             description="",             name="mine-entity",             order=1,             parameters={               {                 description="",                 name="entity",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="send-item-to-orbit",             order=5,             parameters={               {                 description="",                 name="item",                 optional=false,                 order=0,                 type="ItemIDFilter"               }             }           }         }       }     },     {       description="",       name="Resistance",       order=275,       type={         complex_type="table",         parameters={           {             description="Absolute damage decrease.",             name="decrease",             optional=false,             order=0,             type="float"           },           {             description="Percentual damage decrease.",             name="percent",             optional=false,             order=1,             type="float"           }         }       }     },     {       description="",       name="RidingState",       order=37,       type={         complex_type="table",         parameters={           {             description="",             name="acceleration",             optional=false,             order=0,             type="defines.riding.acceleration"           },           {             description="",             name="direction",             optional=false,             order=1,             type="defines.riding.direction"           }         }       }     },     {       description="",       name="RollingStockDrawData",       order=240,       type={         complex_type="table",         parameters={           {             description="",             name="height",             optional=false,             order=3,             type="float"           },           {             description="",             name="orientation",             optional=false,             order=1,             type="RealOrientation"           },           {             description="",             name="position",             optional=false,             order=0,             type="MapPosition"           },           {             description="",             name="slope",             optional=false,             order=2,             type="float"           }         }       }     },     {       description="",       name="ScheduleInterrupt",       order=152,       type={         complex_type="table",         parameters={           {             description="",             name="conditions",             optional=true,             order=1,             type={               complex_type="array",               value="WaitCondition"             }           },           {             description="Defaults to `false`.",             name="inside_interrupt",             optional=true,             order=3,             type="boolean"           },           {             description="Defaults to an empty string.",             name="name",             optional=true,             order=0,             type="string"           },           {             description="",             name="targets",             optional=true,             order=2,             type={               complex_type="array",               value="ScheduleRecord"             }           }         }       }     },     {       description="",       name="ScheduleRecord",       order=150,       type={         complex_type="table",         parameters={           {             description="",             name="allows_unloading",             optional=true,             order=6,             type="boolean"           },           {             description="",             name="created_by_interrupt",             optional=true,             order=5,             type="boolean"           },           {             description="",             name="rail",             optional=true,             order=1,             type="LuaEntity"           },           {             description="When a train is allowed to reach rail target from any direction it will be `nil`. If rail has to be reached from specific direction, this value allows to choose the direction. This value corresponds to [LuaEntity::connected_rail_direction](runtime:LuaEntity::connected_rail_direction) of a TrainStop.",             name="rail_direction",             optional=true,             order=2,             type="defines.rail_direction"           },           {             description="Name of the station.",             name="station",             optional=true,             order=0,             type="string"           },           {             description="",             name="temporary",             optional=true,             order=4,             type="boolean"           },           {             description="",             name="wait_conditions",             optional=true,             order=3,             type={               complex_type="array",               value="WaitCondition"             }           }         }       }     },     {       description="",       name="ScheduleRecordPosition",       order=90,       type={         complex_type="table",         parameters={           {             description="The interrupt index",             name="interrupt_index",             optional=true,             order=1,             type="uint"           },           {             description="The schedule index",             name="schedule_index",             optional=true,             order=0,             type="uint"           }         }       }     },     {       description="An area defined using the map editor.",       name="ScriptArea",       order=215,       type={         complex_type="table",         parameters={           {             description="",             name="area",             optional=false,             order=0,             type="BoundingBox"           },           {             description="",             name="color",             optional=false,             order=2,             type="Color"           },           {             description="",             name="id",             optional=false,             order=3,             type="uint"           },           {             description="",             name="name",             optional=false,             order=1,             type="string"           }         }       }     },     {       description="A position defined using the map editor.",       name="ScriptPosition",       order=216,       type={         complex_type="table",         parameters={           {             description="",             name="color",             optional=false,             order=2,             type="Color"           },           {             description="",             name="id",             optional=false,             order=3,             type="uint"           },           {             description="",             name="name",             optional=false,             order=1,             type="string"           },           {             description="",             name="position",             optional=false,             order=0,             type="MapPosition"           }         }       }     },     {       description="",       name="ScriptRenderMode",       order=93,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="game"           },           {             complex_type="literal",             description="",             value="chart"           }         }       }     },     {       description="When writing it is possible to give LuaEntity or MapPosition directly. However, reading always returns the full ScriptRenderTargetTable.",       name="ScriptRenderTarget",       order=85,       type={         complex_type="union",         full_format=false,         options={           "LuaEntity",           "MapPosition",           "ScriptRenderTargetTable"         }       }     },     {       description="",       name="ScriptRenderTargetTable",       order=86,       type={         complex_type="table",         parameters={           {             description="",             name="entity",             optional=true,             order=0,             type="LuaEntity"           },           {             description="Only used if `entity` was given.",             name="offset",             optional=true,             order=1,             type="Vector"           },           {             description="Only used, and mandatory if `entity` is not given.",             name="position",             optional=true,             order=2,             type="MapPosition"           }         }       }     },     {       description="Scroll policy of a [scroll pane](runtime:LuaGuiElement).",       name="ScrollPolicy",       order=21,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="never"           },           {             complex_type="literal",             description="",             value="dont-show-but-allow-scrolling"           },           {             complex_type="literal",             description="",             value="always"           },           {             complex_type="literal",             description="",             value="auto"           },           {             complex_type="literal",             description="",             value="auto-and-reserve-space"           }         }       }     },     {       description="",       name="SelectedPrototypeData",       order=189,       type={         complex_type="table",         parameters={           {             description="E.g. `\"entity\"`.",             name="base_type",             optional=false,             order=0,             type="IDType"           },           {             description="The `type` of the prototype. E.g. `\"tree\"`.",             name="derived_type",             optional=false,             order=1,             type="string"           },           {             description="The `name` of the prototype. E.g. `\"tree-05\"`.",             name="name",             optional=false,             order=2,             type="string"           },           {             description="The `name` of the quality prototype if any. E.g. `\"normal\"`.",             name="quality",             optional=true,             order=3,             type="string"           }         }       }     },     {       description="A set of flags on a selection tool that define how entities and tiles are selected. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.",       name="SelectionModeFlags",       order=116,       type={         complex_type="dictionary",         key={           complex_type="union",           full_format=true,           options={             {               complex_type="literal",               description="Selects entities and tiles as if selecting them for a blueprint.",               value="blueprint"             },             {               complex_type="literal",               description="Selects entities and tiles as if selecting them for deconstruction.",               value="deconstruct"             },             {               complex_type="literal",               description="Selects entities and tiles as if selecting them for deconstruction cancellation.",               value="cancel-deconstruct"             },             {               complex_type="literal",               description="Selects items on the ground.",               value="items"             },             {               complex_type="literal",               description="Selects trees.",               value="trees"             },             {               complex_type="literal",               description="Selects entities which are considered a [building](runtime:LuaEntityPrototype::is_building), plus landmines.",               value="buildable-type"             },             {               complex_type="literal",               description="Selects no entities or tiles, but is useful to select an area.",               value="nothing"             },             {               complex_type="literal",               description="Selects entities and tiles that can be [built by an item](runtime:LuaItemPrototype::place_result).",               value="items-to-place"             },             {               complex_type="literal",               description="Selects all entities.",               value="any-entity"             },             {               complex_type="literal",               description="Selects all tiles.",               value="any-tile"             },             {               complex_type="literal",               description="Selects entities with the same force as the selecting player.",               value="same-force"             },             {               complex_type="literal",               description="Selects entities with a different force as the selecting player.",               value="not-same-force"             },             {               complex_type="literal",               description="Selects entities from a [friendly](runtime:LuaForce::is_friend) force.",               value="friend"             },             {               complex_type="literal",               description="Selects entities from an [enemy](runtime:LuaForce::is_enemy) force.",               value="enemy"             },             {               complex_type="literal",               description="Selects entities as if selecting them for upgrading.",               value="upgrade"             },             {               complex_type="literal",               description="Selects entities as if selecting them for upgrade cancellation.",               value="cancel-upgrade"             },             {               complex_type="literal",               description="Selects entities as if selecting them for downgrading.",               value="downgrade"             },             {               complex_type="literal",               description="Selects entities that are [entities with health](runtime:LuaEntity::is_entity_with_health).",               value="entity-with-health"             },             {               complex_type="literal",               description="Selects entities that are [military targets](runtime:LuaEntity::is_military_target).",               value="is-military-target"             },             {               complex_type="literal",               description="Selects entities that are [entities with owner](runtime:LuaEntity::is_entity_with_owner).",               value="entity-with-owner"             },             {               complex_type="literal",               description="Selects entities that are not `rolling-stock`s.",               value="avoid-rolling-stock"             },             {               complex_type="literal",               description="",               value="avoid-vehicle"             },             {               complex_type="literal",               description="",               value="controllable"             },             {               complex_type="literal",               description="",               value="controllable-add"             },             {               complex_type="literal",               description="",               value="controllable-remove"             },             {               complex_type="literal",               description="Selects entities that are `entity-ghost`s.",               value="entity-ghost"             },             {               complex_type="literal",               description="Selects entities that are `tile-ghost`s.",               value="tile-ghost"             }           }         },         value={           complex_type="literal",           value=true         }       }     },     {       description="",       name="SelectorCombinatorParameterOperation",       order=140,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="select"           },           {             complex_type="literal",             description="",             value="count"           },           {             complex_type="literal",             description="",             value="random"           },           {             complex_type="literal",             description="",             value="quality-transfer"           },           {             complex_type="literal",             description="",             value="rocket-capacity"           },           {             complex_type="literal",             description="",             value="stack-size"           },           {             complex_type="literal",             description="",             value="quality-filter"           }         }       }     },     {       description="",       name="SelectorCombinatorParameters",       order=139,       type={         complex_type="table",         parameters={           {             description="Defaults to `\"select\"`.",             name="operation",             optional=true,             order=0,             type="SelectorCombinatorParameterOperation"           }         },         variant_parameter_description="Other attributes may be specified depending on `operation`:",         variant_parameter_groups={           {             description="",             name="count",             order=1,             parameters={               {                 description="The signal to emit.",                 name="count_signal",                 optional=false,                 order=0,                 type="SignalID"               }             }           },           {             description="",             name="quality-filter",             order=3,             parameters={               {                 description="The quality condition to use. Defaults to `null`.",                 name="quality_filter",                 optional=true,                 order=0,                 type="QualityCondition"               }             }           },           {             description="",             name="quality-transfer",             order=4,             parameters={               {                 description="",                 name="quality_destination_signal",                 optional=false,                 order=3,                 type="SignalID"               },               {                 description="",                 name="quality_source_signal",                 optional=true,                 order=2,                 type="SignalIDBase"               },               {                 description="Defaults to normal quality.",                 name="quality_source_static",                 optional=true,                 order=1,                 type="QualityID"               },               {                 description="Defaults to `false`.",                 name="select_quality_from_signal",                 optional=true,                 order=0,                 type="boolean"               }             }           },           {             description="",             name="random",             order=2,             parameters={               {                 description="Defaults to `0`.",                 name="random_update_interval",                 optional=true,                 order=0,                 type="uint"               }             }           },           {             description="",             name="select",             order=0,             parameters={               {                 description="The signal index to use if not using a specific `index_signal`. Defaults to `0`.",                 name="index_constant",                 optional=true,                 order=2,                 type="uint"               },               {                 description="The signal to use, if any.",                 name="index_signal",                 optional=true,                 order=1,                 type="SignalID"               },               {                 description="Whether the maximum value is used. Defaults to `true`.",                 name="select_max",                 optional=true,                 order=0,                 type="boolean"               }             }           }         }       }     },     {       description="An actual signal transmitted by the network.",       name="Signal",       order=127,       type={         complex_type="table",         parameters={           {             description="Value of the signal.",             name="count",             optional=false,             order=1,             type="int"           },           {             description="ID of the signal.",             name="signal",             optional=false,             order=0,             type="SignalID"           }         }       }     },     {       description="A signal filter may be specified in two ways, either as a string which is a virtual signal name or item prototype name or as a table.",       name="SignalFilter",       order=80,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="The comparator for quality. `nil` if any quality.",                 name="comparator",                 optional=true,                 order=3,                 type="ComparatorString"               },               {                 description="Name of the signal.",                 name="name",                 optional=false,                 order=1,                 type="string"               },               {                 description="The prototype name of the signal's quality. `nil` for any quality.",                 name="quality",                 optional=true,                 order=2,                 type="QualityID"               },               {                 description="The type of the signal filter.",                 name="type",                 optional=true,                 order=0,                 type="SignalIDType"               }             }           },           "string"         }       }     },     {       description="",       name="SignalID",       order=131,       type={         complex_type="table",         parameters={           {             description="Name of the prototype.",             name="name",             optional=true,             order=1,             type="string"           },           {             description="The prototype name of the signal's quality. Defaults to `normal`.",             name="quality",             optional=true,             order=2,             type="QualityID"           },           {             description="The type of the signal. If the type is `\"item\"`, this will be `nil` when reading.",             name="type",             optional=true,             order=0,             type="SignalIDType"           }         }       }     },     {       description="",       name="SignalIDBase",       order=132,       type={         complex_type="table",         parameters={           {             description="Name of the prototype.",             name="name",             optional=true,             order=1,             type="string"           },           {             description="The type of the signal. If the type is `\"item\"`, this will be `nil` when reading.",             name="type",             optional=true,             order=0,             type="SignalIDType"           }         }       }     },     {       description="",       name="SignalIDType",       order=133,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="item"           },           {             complex_type="literal",             description="",             value="fluid"           },           {             complex_type="literal",             description="",             value="virtual"           },           {             complex_type="literal",             description="",             value="entity"           },           {             complex_type="literal",             description="",             value="recipe"           },           {             complex_type="literal",             description="",             value="space-location"           },           {             complex_type="literal",             description="",             value="asteroid-chunk"           },           {             complex_type="literal",             description="",             value="quality"           }         }       }     },     {       description="",       name="SimulationWidgetType",       order=203,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="signal-id"           },           {             complex_type="literal",             description="",             value="signal-id-base"           },           {             complex_type="literal",             description="",             value="signal-or-number"           },           {             complex_type="literal",             description="",             value="simple-slot"           },           {             complex_type="literal",             description="",             value="simple-item-slot"           },           {             complex_type="literal",             description="",             value="recipe-slot"           },           {             complex_type="literal",             description="",             value="quickbar-slot"           },           {             complex_type="literal",             description="",             value="logistics-button"           },           {             complex_type="literal",             description="",             value="logistics-button-space"           },           {             complex_type="literal",             description="",             value="text-button-localised-substring"           },           {             complex_type="literal",             description="",             value="text-button"           },           {             complex_type="literal",             description="",             value="text-button-substring"           },           {             complex_type="literal",             description="",             value="inventory-limit-slot-button"           },           {             complex_type="literal",             description="",             value="train-schedule-action-button"           },           {             complex_type="literal",             description="",             value="choose-button"           },           {             complex_type="literal",             description="",             value="textfield"           },           {             complex_type="literal",             description="",             value="item-group-tab"           },           {             complex_type="literal",             description="",             value="drop-down"           },           {             complex_type="literal",             description="",             value="check-box"           },           {             complex_type="literal",             description="",             value="switch"           },           {             complex_type="literal",             description="",             value="label"           }         }       }     },     {       description="",       name="SmokeSource",       order=271,       type={         complex_type="table",         parameters={           {             description="",             name="deviation",             optional=true,             order=12,             type="MapPosition"           },           {             description="",             name="east_position",             optional=true,             order=6,             type="Vector"           },           {             description="",             name="frequency",             optional=false,             order=1,             type="float"           },           {             description="",             name="height",             optional=false,             order=15,             type="float"           },           {             description="",             name="height_deviation",             optional=false,             order=16,             type="float"           },           {             description="",             name="name",             optional=false,             order=0,             type="string"           },           {             description="",             name="north_east_position",             optional=true,             order=5,             type="Vector"           },           {             description="",             name="north_position",             optional=true,             order=4,             type="Vector"           },           {             description="",             name="north_west_position",             optional=true,             order=11,             type="Vector"           },           {             description="",             name="offset",             optional=false,             order=2,             type="float"           },           {             description="",             name="position",             optional=true,             order=3,             type="Vector"           },           {             description="",             name="south_east_position",             optional=true,             order=7,             type="Vector"           },           {             description="",             name="south_position",             optional=true,             order=8,             type="Vector"           },           {             description="",             name="south_west_position",             optional=true,             order=9,             type="Vector"           },           {             description="",             name="starting_frame",             optional=false,             order=13,             type="uint16"           },           {             description="",             name="starting_frame_deviation",             optional=false,             order=14,             type="uint16"           },           {             description="",             name="starting_vertical_speed",             optional=false,             order=17,             type="float"           },           {             description="",             name="starting_vertical_speed_deviation",             optional=false,             order=18,             type="float"           },           {             description="",             name="vertical_speed_slowdown",             optional=false,             order=19,             type="float"           },           {             description="",             name="west_position",             optional=true,             order=10,             type="Vector"           }         }       }     },     {       description="It can be either the name of a [SoundPrototype](prototype:SoundPrototype) defined in the data stage, or a path in the form `\"type/name\"`. The latter option can be sorted into four categories.\n\nThe validity of a SoundPath can be verified at runtime using [LuaHelpers::is_valid_sound_path](runtime:LuaHelpers::is_valid_sound_path).",       lists={         "The utility and ambient types each contain general use sound prototypes defined by the game itself.\n\n- `\"utility\"` - Uses [UtilitySounds](prototype:UtilitySounds). Example: `\"utility/wire_connect_pole\"`\n- `\"ambient\"` - Uses [AmbientSound](prototype:AmbientSound). Example: `\"ambient/resource-deficiency\"`",         "The following types can be combined with any tile name as long as its prototype defines the corresponding sound.\n\n- `\"tile-walking\"` - Uses [TilePrototype::walking_sound](prototype:TilePrototype::walking_sound). Example: `\"tile-walking/concrete\"`\n- `\"tile-mined\"` - Uses [TilePrototype::mined_sound](prototype:TilePrototype::mined_sound)\n- `\"tile-build-small\"` - Uses [TilePrototype::build_sound](prototype:TilePrototype::build_sound). Example: `\"tile-build-small/concrete\"`\n- `\"tile-build-medium\"` - Uses [TilePrototype::build_sound](prototype:TilePrototype::build_sound)\n- `\"tile-build-large\"` - Uses [TilePrototype::build_sound](prototype:TilePrototype::build_sound)",         "The following types can be combined with any entity name as long as its prototype defines the corresponding sound.\n\n- `\"entity-build\"` - Uses [EntityPrototype::build_sound](prototype:EntityPrototype::build_sound). Example: `\"entity-build/wooden-chest\"`\n- `\"entity-mined\"` - Uses [EntityPrototype::mined_sound](prototype:EntityPrototype::mined_sound)\n- `\"entity-mining\"` - Uses [EntityPrototype::mining_sound](prototype:EntityPrototype::mining_sound)\n- `\"entity-rotated\"` - Uses [EntityPrototype::rotated_sound](prototype:EntityPrototype::rotated_sound)\n- `\"entity-open\"` - Uses [EntityPrototype::open_sound](prototype:EntityPrototype::open_sound)\n- `\"entity-close\"` - Uses [EntityPrototype::close_sound](prototype:EntityPrototype::close_sound)",         "The following types can be combined with any item name as long as its prototype defines the corresponding sound.\n\n- `\"item-open\"` - Uses [ItemPrototype::open_sound](prototype:ItemPrototype::open_sound). Example: `\"item-open/modular-armor\"`\n- `\"item-close\"` - Uses [ItemPrototype::close_sound](prototype:ItemPrototype::close_sound)\n- `\"item-pick\"` - Uses [ItemPrototype::pick_sound](prototype:ItemPrototype::pick_sound). Example: `\"item-pick/transport-belt\"`\n- `\"item-drop\"` - Uses [ItemPrototype::drop_sound](prototype:ItemPrototype::drop_sound)\n- `\"item-move\"` - Uses [ItemPrototype::inventory_move_sound](prototype:ItemPrototype::inventory_move_sound)"       },       name="SoundPath",       order=276,       type="string"     },     {       description="Defines which slider in the game's sound settings affects the volume of this sound. Furthermore, some sound types are mixed differently than others, e.g. zoom level effects are applied.",       name="SoundType",       order=277,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="game-effect"           },           {             complex_type="literal",             description="",             value="gui-effect"           },           {             complex_type="literal",             description="",             value="ambient"           },           {             complex_type="literal",             description="",             value="environment"           },           {             complex_type="literal",             description="",             value="walking"           },           {             complex_type="literal",             description="",             value="alert"           },           {             complex_type="literal",             description="",             value="wind"           },           {             complex_type="literal",             description="",             value="world-ambient"           },           {             complex_type="literal",             description="",             value="weapon"           },           {             complex_type="literal",             description="",             value="explosion"           },           {             complex_type="literal",             description="",             value="enemy"           }         }       }     },     {       description="",       name="SpaceConnectionAsteroidSpawnDefinition",       order=141,       type={         complex_type="table",         parameters={           {             description="The asteroid chunk or entity name.",             name="asteroid",             optional=false,             order=1,             type="string"           },           {             description="",             name="spawn_points",             optional=false,             order=2,             type={               complex_type="array",               value="SpaceConnectionAsteroidSpawnPoint"             }           },           {             description="`asteroid-chunk` or `entity`",             name="type",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="SpaceConnectionAsteroidSpawnPoint",       order=142,       type={         complex_type="table",         parameters={           {             description="",             name="distance",             optional=false,             order=2,             type="double"           },           {             description="",             name="probability",             optional=false,             order=0,             type="double"           },           {             description="",             name="speed",             optional=false,             order=1,             type="double"           }         }       }     },     {       description="A space connection prototype may be specified in one of two ways.",       name="SpaceConnectionID",       order=78,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The space connection prototype.",             value="LuaSpaceConnectionPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="SpaceLocationAsteroidSpawnDefinition",       order=143,       type={         complex_type="table",         parameters={           {             description="",             name="angle_when_stopped",             optional=false,             order=4,             type="float"           },           {             description="The asteroid chunk or entity name.",             name="asteroid",             optional=false,             order=1,             type="string"           },           {             description="",             name="probability",             optional=false,             order=2,             type="double"           },           {             description="",             name="speed",             optional=false,             order=3,             type="double"           },           {             description="`asteroid-chunk` or `entity`",             name="type",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="A space location prototype may be specified in one of two ways.",       name="SpaceLocationID",       order=79,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The space location prototype.",             value="LuaSpaceLocationPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="SpaceLocationPrototypeFilter",       order=319,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="fly-condition"                 },                 {                   complex_type="literal",                   value="type"                 },                 {                   complex_type="literal",                   value="solar-power-in-space"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="solar-power-in-space",             order=1,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="type",             order=0,             parameters={               {                 description="The prototype type, or a list of acceptable types.",                 name="type",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "string",                     {                       complex_type="array",                       value="string"                     }                   }                 }               }             }           }         }       }     },     {       description="",       name="SpacePlatformIdentification",       order=74,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="",             value="LuaSpacePlatform"           }         }       }     },     {       description="",       name="SpacePlatformTileDefinition",       order=123,       type={         complex_type="table",         parameters={           {             description="",             name="position",             optional=false,             order=1,             type="TilePosition"           },           {             description="",             name="tile",             optional=false,             order=0,             type="LuaTilePrototype"           }         }       }     },     {       description="",       name="SpawnPointDefinition",       order=223,       type={         complex_type="table",         parameters={           {             description="Evolution factor for which this weight applies.",             name="evolution_factor",             optional=false,             order=0,             type="double"           },           {             description="Probability of spawning this unit at this evolution factor.",             name="weight",             optional=false,             order=1,             type="double"           }         }       }     },     {       description="",       name="SpoilToTriggerResult",       order=119,       type={         complex_type="table",         parameters={           {             description="The trigger runs (count-in-stack / items_per_trigger) times; rounded up.",             name="items_per_trigger",             optional=false,             order=1,             type="uint"           },           {             description="The trigger items that are run.",             name="trigger",             optional=false,             order=0,             type={               complex_type="array",               value="TriggerItem"             }           }         }       }     },     {       description="It can be either the name of a [SpritePrototype](prototype:SpritePrototype) defined in the data stage, or a path in form \"type/name\" or \"type.name\".\n\nThe validity of a SpritePath can be verified at runtime using [LuaHelpers::is_valid_sprite_path](runtime:LuaHelpers::is_valid_sprite_path).",       lists={         "The supported types are:\n\n- `\"item\"` - for example \"item/iron-plate\" is the icon sprite of iron plate\n- `\"entity\"` - for example \"entity/small-biter\" is the icon sprite of the small biter\n- `\"technology\"`\n- `\"recipe\"`\n- `\"fluid\"`\n- `\"tile\"`\n- `\"item-group\"`\n- `\"virtual-signal\"`\n- `\"shortcut\"`\n- `\"achievement\"`\n- `\"equipment\"`\n- `\"ammo-category\"`\n- `\"decorative\"`\n- `\"space-connection\"`\n- `\"space-location\"`\n- `\"surface\"`\n- `\"airborne-pollutant\"`\n- `\"asteroid-chunk\"`\n- `\"quality\"`\n- `\"file\"` - path to an image file located inside the current scenario. This file is not preloaded so it will be slower; for frequently used sprites, it is better to define sprite prototype and use it instead.\n- `\"utility\"` - sprite defined in the utility-sprites object, these are the pictures used by the game internally for the UI."       },       name="SpritePath",       order=8,       type="string"     },     {       description="",       name="SteeringMapSetting",       order=163,       type={         complex_type="table",         parameters={           {             description="Used to make steering look better for aesthetic purposes.",             name="force_unit_fuzzy_goto_behavior",             optional=false,             order=3,             type="boolean"           },           {             description="Does not include the radius of the unit.",             name="radius",             optional=false,             order=0,             type="double"           },           {             description="",             name="separation_factor",             optional=false,             order=1,             type="double"           },           {             description="",             name="separation_force",             optional=false,             order=2,             type="double"           }         }       }     },     {       description="",       name="SteeringMapSettings",       order=164,       type={         complex_type="table",         parameters={           {             description="",             name="default",             optional=false,             order=0,             type="SteeringMapSetting"           },           {             description="",             name="moving",             optional=false,             order=1,             type="SteeringMapSetting"           }         }       }     },     {       description="",       name="SurfaceCondition",       order=111,       type={         complex_type="table",         parameters={           {             description="",             name="max",             optional=false,             order=2,             type="double"           },           {             description="",             name="min",             optional=false,             order=1,             type="double"           },           {             description="",             name="property",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="A surface may be specified in one of three ways.",       name="SurfaceIdentification",       order=72,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="It will be the index of the surface. `nauvis` has index `1`, the first surface-created surface will have index `2` and so on.",             value="uint"           },           {             complex_type="type",             description="It will be the surface name. E.g. `\"nauvis\"`.",             value="string"           },           {             complex_type="type",             description="A reference to [LuaSurface](runtime:LuaSurface) may be passed directly.",             value="LuaSurface"           }         }       }     },     {       description="Surface property prototype may be specified in one of two ways.",       name="SurfacePropertyID",       order=84,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The surface property prototype.",             value="LuaSurfacePropertyPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="State of a GUI [switch](runtime:LuaGuiElement::switch_state).",       name="SwitchState",       order=23,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="left"           },           {             complex_type="literal",             description="",             value="right"           },           {             complex_type="literal",             description="",             value="none"           }         }       }     },     {       description="",       name="TabAndContent",       order=219,       type={         complex_type="table",         parameters={           {             description="",             name="content",             optional=false,             order=1,             type="LuaGuiElement"           },           {             description="",             name="tab",             optional=false,             order=0,             type="LuaGuiElement"           }         }       }     },     {       description="A dictionary of string to the four basic Lua types: `string`, `boolean`, `number`, `table`.\n\nNote that the API returns tags as a simple table, meaning any modifications to it will not propagate back to the game. Thus, to modify a set of tags, the whole table needs to be written back to the respective property.",       examples={         "```\n{a = 1, b = true, c = \"three\", d = {e = \"f\"}}\n```"       },       name="Tags",       order=298,       type={         complex_type="dictionary",         key="string",         value="AnyBasic"       }     },     {       description="Target type of an [AmmoType](runtime:AmmoType).",       name="TargetType",       order=121,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="Fires at an entity.",             value="entity"           },           {             complex_type="literal",             description="Fires directly at a position.",             value="position"           },           {             complex_type="literal",             description="Fires in a direction.",             value="direction"           }         }       }     },     {       description="An technology prototype may be specified in one of three ways.",       name="TechnologyID",       order=55,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The technology prototype.",             value="LuaTechnologyPrototype"           },           {             complex_type="type",             description="Instance of the technology.",             value="LuaTechnology"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="The effect that is applied when a technology is researched. It is a table that contains at least the field `type`.",       name="TechnologyModifier",       order=158,       type={         complex_type="table",         parameters={           {             description="Modifier type. Specifies which of the other fields will be available.",             name="type",             optional=false,             order=0,             type="ModifierType"           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="OtherTypes",             order=6,             parameters={               {                 description="Modification value. This value will be added to the variable it modifies.",                 name="modifier",                 optional=false,                 order=0,                 type="double"               }             }           },           {             description="",             name="ammo-damage",             order=1,             parameters={               {                 description="Prototype name of the ammunition category that is affected",                 name="ammo_category",                 optional=false,                 order=0,                 type="string"               },               {                 description="Modification value. This will be added to the current ammo damage modifier upon researching.",                 name="modifier",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="give-item",             order=2,             parameters={               {                 description="Number of items to give. Defaults to `1`.",                 name="count",                 optional=true,                 order=1,                 type="uint"               },               {                 description="Item prototype name to give.",                 name="item",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="gun-speed",             order=0,             parameters={               {                 description="Prototype name of the ammunition category that is affected",                 name="ammo_category",                 optional=false,                 order=0,                 type="string"               },               {                 description="Modification value. This will be added to the current gun speed modifier upon researching.",                 name="modifier",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="nothing",             order=5,             parameters={               {                 description="Description of this nothing modifier.",                 name="effect_description",                 optional=false,                 order=0,                 type="LocalisedString"               }             }           },           {             description="",             name="turret-attack",             order=3,             parameters={               {                 description="Modification value. This will be added to the current turret damage modifier upon researching.",                 name="modifier",                 optional=false,                 order=1,                 type="double"               },               {                 description="Turret prototype name this modifier will affect.",                 name="turret_id",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="unlock-recipe",             order=4,             parameters={               {                 description="Recipe prototype name to unlock.",                 name="recipe",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="TechnologyPrototypeFilter",       order=324,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="enabled"                 },                 {                   complex_type="literal",                   value="hidden"                 },                 {                   complex_type="literal",                   value="upgrade"                 },                 {                   complex_type="literal",                   value="visible-when-disabled"                 },                 {                   complex_type="literal",                   value="has-effects"                 },                 {                   complex_type="literal",                   value="has-prerequisites"                 },                 {                   complex_type="literal",                   value="research-unit-ingredient"                 },                 {                   complex_type="literal",                   value="unlocks-recipe"                 },                 {                   complex_type="literal",                   value="level"                 },                 {                   complex_type="literal",                   value="max-level"                 },                 {                   complex_type="literal",                   value="time"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="level",             order=2,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="max-level",             order=3,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="research-unit-ingredient",             order=0,             parameters={               {                 description="The research ingredient to check.",                 name="ingredient",                 optional=false,                 order=0,                 type="string"               }             }           },           {             description="",             name="time",             order=4,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="unlocks-recipe",             order=1,             parameters={               {                 description="The recipe to check.",                 name="recipe",                 optional=false,                 order=0,                 type="string"               }             }           }         }       }     },     {       description="",       name="TerritorySettings",       order=176,       type={         complex_type="table",         parameters={           {             description="",             name="minimum_territory_size",             optional=false,             order=3,             type="uint"           },           {             description="",             name="territory_index_expression",             optional=false,             order=1,             type="string"           },           {             description="",             name="territory_variation_expression",             optional=false,             order=2,             type="string"           },           {             description="",             name="units",             optional=false,             order=0,             type={               complex_type="array",               value="string"             }           }         }       }     },     {       description="The text is aligned so that the target position is at the given side of the text.\n\nFor example, `\"right\"` aligned text means the right side of the text is at the target position. Or in other words, the target is on the right of the text.",       name="TextAlign",       order=59,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="left"           },           {             complex_type="literal",             description="",             value="right"           },           {             complex_type="literal",             description="",             value="center"           }         }       }     },     {       description="",       name="ThrusterPerformancePoint",       order=264,       type={         complex_type="table",         parameters={           {             description="",             name="effectivity",             optional=false,             order=2,             type="double"           },           {             description="",             name="fluid_usage",             optional=false,             order=1,             type="double"           },           {             description="",             name="fluid_volume",             optional=false,             order=0,             type="double"           }         }       }     },     {       description="",       name="Tile",       order=299,       type={         complex_type="table",         parameters={           {             description="The prototype name of the tile.",             name="name",             optional=false,             order=1,             type="string"           },           {             description="The position of the tile.",             name="position",             optional=false,             order=0,             type="TilePosition"           }         }       }     },     {       description="A tile may be specified in one of three ways.",       name="TileID",       order=64,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="By tile prototype.",             value="LuaTilePrototype"           },           {             complex_type="type",             description="By instance of tile.",             value="LuaTile"           },           {             complex_type="type",             description="By name of the tile prototype.",             value="string"           }         }       }     },     {       description="Coordinates of a tile on a [LuaSurface](runtime:LuaSurface) where each integer `x`/`y` represents a different tile. This uses the same format as [MapPosition](runtime:MapPosition), except it rounds any non-integer `x`/`y` down to whole numbers. It can be specified either with or without explicit keys.",       name="TilePosition",       order=95,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="int"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="int"               }             }           },           {             complex_type="tuple",             values={               "int",               "int"             }           }         }       }     },     {       description="",       name="TilePrototypeFilter",       order=321,       type={         complex_type="table",         parameters={           {             description="The condition to filter on.",             name="filter",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="minable"                 },                 {                   complex_type="literal",                   value="autoplace"                 },                 {                   complex_type="literal",                   value="blueprintable"                 },                 {                   complex_type="literal",                   value="item-to-place"                 },                 {                   complex_type="literal",                   value="collision-mask"                 },                 {                   complex_type="literal",                   value="walking-speed-modifier"                 },                 {                   complex_type="literal",                   value="vehicle-friction-modifier"                 },                 {                   complex_type="literal",                   value="decorative-removal-probability"                 },                 {                   complex_type="literal",                   value="absorptions-per-second"                 }               }             }           },           {             description="Inverts the condition. Default is `false`.",             name="invert",             optional=true,             order=2,             type="boolean"           },           {             description="How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.",             name="mode",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="or"                 },                 {                   complex_type="literal",                   value="and"                 }               }             }           }         },         variant_parameter_description="Other attributes may be specified depending on `filter`:",         variant_parameter_groups={           {             description="",             name="absorptions-per-second",             order=4,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=1,                 type="ComparatorString"               },               {                 description="The name of a pollutant type to check.",                 name="pollutant",                 optional=false,                 order=0,                 type="string"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=2,                 type="double"               }             }           },           {             description="",             name="collision-mask",             order=0,             parameters={               {                 description="Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.",                 name="mask",                 optional=false,                 order=0,                 type={                   complex_type="union",                   full_format=false,                   options={                     "CollisionLayerID",                     "CollisionMask"                   }                 }               },               {                 description="How to filter.",                 name="mask_mode",                 optional=false,                 order=1,                 type={                   complex_type="union",                   full_format=false,                   options={                     {                       complex_type="literal",                       value="collides"                     },                     {                       complex_type="literal",                       value="layers-equals"                     },                     {                       complex_type="literal",                       value="contains-any"                     },                     {                       complex_type="literal",                       value="contains-all"                     }                   }                 }               }             }           },           {             description="",             name="decorative-removal-probability",             order=3,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="float"               }             }           },           {             description="",             name="vehicle-friction-modifier",             order=2,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           },           {             description="",             name="walking-speed-modifier",             order=1,             parameters={               {                 description="",                 name="comparison",                 optional=false,                 order=0,                 type="ComparatorString"               },               {                 description="The value to compare against.",                 name="value",                 optional=false,                 order=1,                 type="double"               }             }           }         }       }     },     {       description="",       name="TileSearchFilters",       order=209,       type={         complex_type="table",         parameters={           {             description="",             name="area",             optional=true,             order=0,             type="BoundingBox"           },           {             description="",             name="collision_mask",             optional=true,             order=9,             type={               complex_type="union",               full_format=false,               options={                 "CollisionLayerID",                 {                   complex_type="array",                   value="CollisionLayerID"                 },                 {                   complex_type="dictionary",                   key="CollisionLayerID",                   value={                     complex_type="literal",                     value=true                   }                 }               }             }           },           {             description="",             name="force",             optional=true,             order=10,             type="ForceSet"           },           {             description="Can be further filtered by supplying a `force` filter.",             name="has_double_hidden_tile",             optional=true,             order=6,             type="boolean"           },           {             description="",             name="has_hidden_tile",             optional=true,             order=5,             type="boolean"           },           {             description="Can be further filtered by supplying a `force` filter.",             name="has_tile_ghost",             optional=true,             order=7,             type="boolean"           },           {             description="If the filters should be inverted.",             name="invert",             optional=true,             order=11,             type="boolean"           },           {             description="",             name="limit",             optional=true,             order=4,             type="uint"           },           {             description="An empty array means nothing matches the name filter.",             name="name",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 "TileID",                 {                   complex_type="array",                   value="TileID"                 }               }             }           },           {             description="Ignored if not given with radius.",             name="position",             optional=true,             order=1,             type="MapPosition"           },           {             description="If given with position, will return all tiles within the radius of the position.",             name="radius",             optional=true,             order=2,             type="double"           },           {             description="Can be further filtered by supplying a `force` filter.",             name="to_be_deconstructed",             optional=true,             order=8,             type="boolean"           }         }       }     },     {       description="",       name="TrainFilter",       order=226,       type={         complex_type="table",         parameters={           {             description="Train must contain at least one rolling stock of this force to pass",             name="force",             optional=true,             order=2,             type="ForceID"           },           {             description="Train must belong to a group of a given name.",             name="group",             optional=true,             order=9,             type="string"           },           {             description="Checks if train has a passenger.",             name="has_passenger",             optional=true,             order=7,             type="boolean"           },           {             description="Checks if train is in manual controller.",             name="is_manual",             optional=true,             order=8,             type="boolean"           },           {             description="Checks if train is moving (has speed != 0) or not moving.",             name="is_moving",             optional=true,             order=6,             type="boolean"           },           {             description="Train must have at most that many stocks to pass",             name="max_stocks",             optional=true,             order=5,             type="uint"           },           {             description="Train must have at least that many stocks to pass",             name="min_stocks",             optional=true,             order=4,             type="uint"           },           {             description="Train must contain a rolling stock of any of provided prototype to pass",             name="stock",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 "EntityID",                 {                   complex_type="array",                   value="EntityID"                 }               }             }           },           {             description="Surface the train must be on in order to pass",             name="surface",             optional=true,             order=1,             type="SurfaceIdentification"           },           {             description="Train ID filter",             name="train_id",             optional=true,             order=0,             type="uint"           }         }       }     },     {       description="",       name="TrainPathAllGoalsResult",       order=234,       type={         complex_type="table",         parameters={           {             description="Array of the same length as requested goals: each field will tell if related goal is accessible for the train.",             name="accessible",             optional=false,             order=1,             type={               complex_type="array",               value="boolean"             }           },           {             description="Amount of goals that are accessible.",             name="amount_accessible",             optional=false,             order=0,             type="uint"           },           {             description="Array of the same length as requested goals. Only present if request type was `\"all-goals-penalties\"`.",             name="penalties",             optional=true,             order=2,             type={               complex_type="array",               value="double"             }           },           {             description="Amount of steps pathfinder performed. This is a measure of how expensive this search was.",             name="steps_count",             optional=false,             order=3,             type="uint"           }         }       }     },     {       description="",       name="TrainPathFinderGoal",       order=229,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="",             value="TrainStopGoal"           },           {             complex_type="type",             description="",             value="RailEndGoal"           },           {             complex_type="type",             description="",             value="LuaRailEnd"           },           {             complex_type="type",             description="Only if it points at train-stop that is connected to a rail.",             value="LuaEntity"           }         }       }     },     {       description="",       name="TrainPathFinderOneGoalResult",       order=233,       type={         complex_type="table",         parameters={           {             description="True if found path.",             name="found_path",             optional=false,             order=0,             type="boolean"           },           {             description="If path was found, provides index of the specific goal to which the path goes to.",             name="goal_index",             optional=true,             order=1,             type="uint"           },           {             description="If path was found, tells if the path was reached from the train's front end or from [RailEndStart](runtime:RailEndStart) with [RailEndStart::is_front](runtime:RailEndStart::is_front) set.",             name="is_front",             optional=true,             order=4,             type="boolean"           },           {             description="Only if search was of type `\"path\"`, `return_path` was set to true and path was found. Contains all rails in order that are part of the found path.",             name="path",             optional=true,             order=6,             type={               complex_type="array",               value="LuaEntity"             }           },           {             description="Penalty of the path to goal if path was found.",             name="penalty",             optional=true,             order=3,             type="double"           },           {             description="If path was found, provides index of the specific start from which the path to target goes from",             name="start_index",             optional=true,             order=2,             type="uint"           },           {             description="Amount of steps pathfinder performed. This is a measure of how expensive this search was.",             name="steps_count",             optional=false,             order=7,             type="uint"           },           {             description="If path was found and search was of type `\"path\"`, provides total length of all rails of the path.",             name="total_length",             optional=true,             order=5,             type="double"           }         }       }     },     {       description="A [string](runtime:string) specifying the type of request for [LuaTrainManager::request_train_path](runtime:LuaTrainManager::request_train_path).",       name="TrainPathRequestType",       order=228,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="The method will return [TrainPathFinderOneGoalResult](runtime:TrainPathFinderOneGoalResult).",             value="path"           },           {             complex_type="literal",             description="The method will return [TrainPathFinderOneGoalResult](runtime:TrainPathFinderOneGoalResult).",             value="any-goal-accessible"           },           {             complex_type="literal",             description="The method will return [TrainPathAllGoalsResult](runtime:TrainPathAllGoalsResult).",             value="all-goals-accessible"           },           {             complex_type="literal",             description="The method will return [TrainPathAllGoalsResult](runtime:TrainPathAllGoalsResult) with `penalties`.",             value="all-goals-penalties"           }         }       }     },     {       description="",       name="TrainSchedule",       order=40,       type={         complex_type="table",         parameters={           {             description="Index of the currently active record",             name="current",             optional=false,             order=0,             type="uint"           },           {             description="",             name="records",             optional=false,             order=1,             type={               complex_type="array",               value="ScheduleRecord"             }           }         }       }     },     {       description="",       name="TrainStopFilter",       order=227,       type={         complex_type="table",         parameters={           {             description="ForceID the train stop must have to pass",             name="force",             optional=true,             order=1,             type="ForceID"           },           {             description="Checks if train stop has a rail next to it.",             name="is_connected_to_rail",             optional=true,             order=3,             type="boolean"           },           {             description="If train stop is disabled by a control behavior",             name="is_disabled",             optional=true,             order=7,             type="boolean"           },           {             description="Checks if train stop is full (trains count >= trains limit or disabled) or not full.",             name="is_full",             optional=true,             order=2,             type="boolean"           },           {             description="If train stop has limit set by control behavior",             name="limit_set_by_control_behavior",             optional=true,             order=6,             type="boolean"           },           {             description="Train stop must belong to given station name to pass",             name="station_name",             optional=true,             order=5,             type={               complex_type="union",               full_format=false,               options={                 "string",                 {                   complex_type="array",                   value="string"                 }               }             }           },           {             description="Surface the train stop must be on in order to pass",             name="surface",             optional=true,             order=0,             type="SurfaceIdentification"           },           {             description="If given, only train stops of this type will pass",             name="type",             optional=true,             order=4,             type={               complex_type="union",               full_format=false,               options={                 "EntityID",                 {                   complex_type="array",                   value="EntityID"                 }               }             }           }         }       }     },     {       description="",       name="TrainStopGoal",       order=230,       type={         complex_type="table",         parameters={           {             description="Goal priority. If not provided, defaults to [LuaEntity::train_stop_priority](runtime:LuaEntity::train_stop_priority) of provided train_stop.",             name="priority",             optional=true,             order=1,             type="uint8"           },           {             description="Train stop target. Must be connected to rail ([LuaEntity::connected_rail](runtime:LuaEntity::connected_rail) returns valid LuaEntity).",             name="train_stop",             optional=false,             order=0,             type="LuaEntity"           }         }       }     },     {       description="",       name="TriggerDelivery",       order=293,       type={         complex_type="table",         parameters={           {             description="",             name="source_effects",             optional=false,             order=1,             type={               complex_type="array",               value="TriggerEffectItem"             }           },           {             description="",             name="target_effects",             optional=false,             order=2,             type={               complex_type="array",               value="TriggerEffectItem"             }           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="instant"                 },                 {                   complex_type="literal",                   value="projectile"                 },                 {                   complex_type="literal",                   value="beam"                 },                 {                   complex_type="literal",                   value="stream"                 },                 {                   complex_type="literal",                   value="artillery"                 },                 {                   complex_type="literal",                   value="chain"                 },                 {                   complex_type="literal",                   value="delayed"                 }               }             }           }         }       }     },     {       description="",       name="TriggerEffectItem",       order=296,       type={         complex_type="table",         parameters={           {             description="",             name="affects_target",             optional=false,             order=4,             type="boolean"           },           {             description="",             name="damage_type_filters",             optional=true,             order=6,             type="DamageTypeFilters"           },           {             description="",             name="probability",             optional=false,             order=3,             type="float"           },           {             description="",             name="repeat_count",             optional=false,             order=1,             type="uint16"           },           {             description="",             name="repeat_count_deviation",             optional=false,             order=2,             type="uint16"           },           {             description="",             name="show_in_tooltip",             optional=false,             order=5,             type="boolean"           },           {             description="",             name="type",             optional=false,             order=0,             type="TriggerEffectItemType"           }         }       }     },     {       description="Used by [TriggerEffectItem](runtime:TriggerEffectItem).",       name="TriggerEffectItemType",       order=295,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="damage"           },           {             complex_type="literal",             description="",             value="damage-tile"           },           {             complex_type="literal",             description="",             value="create-entity"           },           {             complex_type="literal",             description="",             value="create-explosion"           },           {             complex_type="literal",             description="",             value="create-fire"           },           {             complex_type="literal",             description="",             value="create-smoke"           },           {             complex_type="literal",             description="",             value="create-trivial-smoke"           },           {             complex_type="literal",             description="",             value="create-asteroid-chunk"           },           {             complex_type="literal",             description="",             value="create-particle"           },           {             complex_type="literal",             description="",             value="create-sticker"           },           {             complex_type="literal",             description="",             value="create-decorative"           },           {             complex_type="literal",             description="",             value="nested-result"           },           {             complex_type="literal",             description="",             value="play-sound"           },           {             complex_type="literal",             description="",             value="push-back"           },           {             complex_type="literal",             description="",             value="destroy-cliffs"           },           {             complex_type="literal",             description="",             value="show-explosion-on-chart"           },           {             complex_type="literal",             description="",             value="insert-item"           },           {             complex_type="literal",             description="",             value="script"           },           {             complex_type="literal",             description="",             value="set-tile"           },           {             complex_type="literal",             description="",             value="invoke-tile-trigger"           },           {             complex_type="literal",             description="",             value="destroy-decoratives"           },           {             complex_type="literal",             description="",             value="camera-effect"           },           {             complex_type="literal",             description="",             value="activate-impact"           }         }       }     },     {       description="",       name="TriggerItem",       order=288,       type={         complex_type="table",         parameters={           {             description="",             name="action_delivery",             optional=true,             order=1,             type={               complex_type="array",               value="TriggerDelivery"             }           },           {             description="The trigger will only affect entities that would collide with given collision mask.",             name="collision_mask",             optional=false,             order=4,             type="CollisionMask"           },           {             description="The trigger will only affect entities that contain any of these flags.",             name="entity_flags",             optional=true,             order=2,             type="EntityPrototypeFlags"           },           {             description="If `\"enemy\"`, the trigger will only affect entities whose force is different from the attacker's and for which there is no cease-fire set. `\"ally\"` is the opposite of `\"enemy\"`.",             name="force",             optional=false,             order=6,             type="ForceCondition"           },           {             description="",             name="ignore_collision_condition",             optional=false,             order=3,             type="boolean"           },           {             description="",             name="probability",             optional=false,             order=8,             type="float"           },           {             description="",             name="repeat_count",             optional=false,             order=7,             type="uint"           },           {             description="",             name="trigger_target_mask",             optional=false,             order=5,             type="TriggerTargetMask"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="direct"                 },                 {                   complex_type="literal",                   value="area"                 },                 {                   complex_type="literal",                   value="line"                 },                 {                   complex_type="literal",                   value="cluster"                 }               }             }           }         }       }     },     {       description="",       name="TriggerModifierData",       order=290,       type={         complex_type="table",         parameters={           {             description="",             name="damage_addition",             optional=true,             order=1,             type="float"           },           {             description="",             name="damage_modifier",             optional=true,             order=0,             type="float"           },           {             description="",             name="radius_modifier",             optional=true,             order=2,             type="float"           }         }       }     },     {       description="A set of trigger target masks.",       name="TriggerTargetMask",       order=291,       type={         complex_type="dictionary",         key="string",         value={           complex_type="literal",           value=true         }       }     },     {       description="A trivial smoke prototype may be specified in one of two ways.",       name="TrivialSmokeID",       order=58,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The trivial smoke prototype.",             value="LuaTrivialSmokePrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="UndoRedoAction",       order=105,       type={         complex_type="table",         parameters={           {             description="The tags attached to the undo action, if any.",             name="tags",             optional=true,             order=1,             type="Tags"           },           {             description="The type of action that was undone or redone.",             name="type",             optional=false,             order=0,             type="string"           }         },         variant_parameter_description="Other attributes may be specified depending on `type`:",         variant_parameter_groups={           {             description="",             name="built-entity",             order=0,             parameters={               {                 description="The specification of the built entity.",                 name="target",                 optional=false,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="built-tile",             order=2,             parameters={               {                 description="The prototype name of the newly built tile.",                 name="new_tile",                 optional=false,                 order=3,                 type="string"               },               {                 description="The position of the newly built tile.",                 name="position",                 optional=false,                 order=0,                 type="TilePosition"               },               {                 description="The prototype name of the replaced tile, if any was replaced.",                 name="previous_tile",                 optional=true,                 order=2,                 type="string"               },               {                 description="The surface on which the tile was built.",                 name="surface_index",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="copy-entity-settings",             order=9,             parameters={               {                 description="",                 name="entity_with_previous_settings",                 optional=true,                 order=1,                 type="BlueprintEntity"               },               {                 description="",                 name="target",                 optional=true,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="removed-entity",             order=1,             parameters={               {                 description="The items that the entity will request when revived, if there are any. It's a mapping of prototype names to amounts. Not present for entities the game can't restore, like trees or rocks.",                 name="insert_plan",                 optional=true,                 order=2,                 type={                   complex_type="array",                   value="BlueprintInsertPlan"                 }               },               {                 description="The schedule of the entity, if it has one. Only relevant for locomotives. Not present for entities the game can't restore, like trees or rocks.",                 name="schedule",                 optional=true,                 order=3,                 type="BlueprintSchedule"               },               {                 description="The surface from which the entity was removed. Not present for entities the game can't restore, like trees or rocks.",                 name="surface_index",                 optional=true,                 order=1,                 type="uint"               },               {                 description="The specification of the removed entity.",                 name="target",                 optional=false,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="removed-tile",             order=3,             parameters={               {                 description="The position of the removed tile.",                 name="position",                 optional=false,                 order=0,                 type="TilePosition"               },               {                 description="The prototype name of the removed tile.",                 name="previous_tile",                 optional=false,                 order=2,                 type="string"               },               {                 description="The surface from which the tile was removed.",                 name="surface_index",                 optional=false,                 order=1,                 type="uint"               }             }           },           {             description="",             name="rotated-entity",             order=8,             parameters={               {                 description="The direction of the entity before upgrading.",                 name="original_direction",                 optional=false,                 order=1,                 type="defines.direction"               },               {                 description="",                 name="original_mirroring",                 optional=false,                 order=2,                 type="boolean"               },               {                 description="The specification of the rotated entity.",                 name="target",                 optional=false,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="upgraded-entity",             order=4,             parameters={               {                 description="The prototype name of the upgraded entity.",                 name="original_name",                 optional=false,                 order=1,                 type="string"               },               {                 description="The quality prototype name of the entity before upgrading.",                 name="original_quality_name",                 optional=false,                 order=2,                 type="string"               },               {                 description="The specification of the upgraded entity.",                 name="target",                 optional=false,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="upgraded-modules",             order=5,             parameters={               {                 description="The modules present in the target before the upgrade.",                 name="modules_before",                 optional=false,                 order=1,                 type="BlueprintInsertPlan"               },               {                 description="The specification of the upgraded entity.",                 name="target",                 optional=false,                 order=0,                 type="BlueprintEntity"               }             }           },           {             description="",             name="wire-added",             order=6,             parameters={               {                 description="",                 name="a",                 optional=false,                 order=0,                 type="BlueprintWireEnd"               },               {                 description="",                 name="b",                 optional=false,                 order=1,                 type="BlueprintWireEnd"               }             }           },           {             description="",             name="wire-removed",             order=7,             parameters={               {                 description="",                 name="a",                 optional=false,                 order=0,                 type="BlueprintWireEnd"               },               {                 description="",                 name="b",                 optional=false,                 order=1,                 type="BlueprintWireEnd"               }             }           }         }       }     },     {       description="",       name="UnitGroupMapSettings",       order=165,       type={         complex_type="table",         parameters={           {             description="The maximum number of automatically created unit groups gathering for attack at any time. Defaults to `30`.",             name="max_gathering_unit_groups",             optional=false,             order=11,             type="uint"           },           {             description="The maximum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `10*3 600=36 000` ticks.",             name="max_group_gathering_time",             optional=false,             order=1,             type="uint"           },           {             description="When a member of a group falls back more than this factor times the group radius, the group will slow down to its `max_group_slowdown_factor` speed to let them catch up. Defaults to `3`.",             name="max_group_member_fallback_factor",             optional=false,             order=8,             type="double"           },           {             description="The maximum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `30.0`.",             name="max_group_radius",             optional=false,             order=4,             type="double"           },           {             description="The minimum speed as a percentage of its maximum speed that a group will slow down to so members that fell behind can catch up. Defaults to `0.3`, or 30%.",             name="max_group_slowdown_factor",             optional=false,             order=7,             type="double"           },           {             description="The minimum speed a percentage of its regular speed that a group member can slow down to when ahead of the group. Defaults to `0.6`, or 60%.",             name="max_member_slowdown_when_ahead",             optional=false,             order=6,             type="double"           },           {             description="The maximum speed a percentage of its regular speed that a group member can speed up to when catching up with the group. Defaults to `1.4`, or 140%.",             name="max_member_speedup_when_behind",             optional=false,             order=5,             type="double"           },           {             description="The maximum number of members for an attack unit group. This only affects automatically created unit groups, manual groups created through the API are unaffected. Defaults to `200`.",             name="max_unit_group_size",             optional=false,             order=12,             type="uint"           },           {             description="After gathering has finished, the group is allowed to wait this long in ticks for delayed members. New members are not accepted anymore however. Defaults to `2*3 600=7 200` ticks.",             name="max_wait_time_for_late_members",             optional=false,             order=2,             type="uint"           },           {             description="When a member of a group falls back more than this factor times the group radius, it will be dropped from the group. Defaults to `10`.",             name="member_disown_distance",             optional=false,             order=9,             type="double"           },           {             description="The minimum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `3 600` ticks.",             name="min_group_gathering_time",             optional=false,             order=0,             type="uint"           },           {             description="The minimum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `5.0`.",             name="min_group_radius",             optional=false,             order=3,             type="double"           },           {             description="",             name="tick_tolerance_when_member_arrives",             optional=false,             order=10,             type="uint"           }         }       }     },     {       description="",       name="UnitSpawnDefinition",       order=224,       type={         complex_type="table",         parameters={           {             description="The points at which to spawn the unit.",             name="spawn_points",             optional=false,             order=1,             type={               complex_type="array",               value="SpawnPointDefinition"             }           },           {             description="Prototype name of the unit that would be spawned.",             name="unit",             optional=false,             order=0,             type="string"           }         }       }     },     {       description="",       name="UpgradeMapperDestination",       order=120,       type={         complex_type="table",         parameters={           {             description="When upgrading modules, this defines the maximum number of this module to be installed in the destination entity. `0` or `nil` means no limit.",             name="module_limit",             optional=true,             order=3,             type="uint16"           },           {             description="When upgrading entities, this defines explicit modules to be installed in the destination entity. Lists empty slots as `{}`.",             name="module_slots",             optional=true,             order=4,             type={               complex_type="array",               value="ItemIDAndQualityIDPair"             }           },           {             description="Name of the item or entity.",             name="name",             optional=true,             order=1,             type="string"           },           {             description="Name of the quality prototype.",             name="quality",             optional=true,             order=2,             type="string"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="item"                 },                 {                   complex_type="literal",                   value="entity"                 }               }             }           }         }       }     },     {       description="",       name="UpgradeMapperSource",       order=114,       type={         complex_type="table",         parameters={           {             description="The quality comparison type.",             name="comparator",             optional=true,             order=3,             type="ComparatorString"           },           {             description="When upgrading modules, this defines the specific entities to apply the upgrade to. `nil` applies it to all entities.",             name="module_filter",             optional=true,             order=4,             type="EntityIDFilter"           },           {             description="Name of the item or entity.",             name="name",             optional=true,             order=1,             type="string"           },           {             description="Name of the quality prototype.",             name="quality",             optional=true,             order=2,             type="string"           },           {             description="",             name="type",             optional=false,             order=0,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="item"                 },                 {                   complex_type="literal",                   value="entity"                 }               }             }           }         }       }     },     {       description="Defines the mode of operation for a [ValvePrototype](prototype:ValvePrototype).",       name="ValveMode",       order=259,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="Fluid will flow if input level > output level.",             value="one-way"           },           {             complex_type="literal",             description="Fluid will flow if input level > [ValvePrototype::threshold](prototype:ValvePrototype::threshold) and input level > output level.",             value="overflow"           },           {             complex_type="literal",             description="Fluid will flow if output level < [ValvePrototype::threshold](prototype:ValvePrototype::threshold) and input level > output level.",             value="top-up"           }         }       }     },     {       description="A vector is a two-element array or dictionary containing the `x` and `y` components. The game will always provide the array format. Positive x goes east, positive y goes south.",       examples={         "```\nright = {1.0, 0.0}\n```"       },       name="Vector",       order=28,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="float"               }             }           },           {             complex_type="tuple",             values={               "float",               "float"             }           }         }       }     },     {       description="Reading this always returns the table with the named keys.\n\nIf this is specified as a three-element array then the array items are x, y and z, in that order.",       name="Vector3D",       order=36,       type={         complex_type="union",         full_format=false,         options={           {             complex_type="table",             parameters={               {                 description="",                 name="x",                 optional=false,                 order=0,                 type="float"               },               {                 description="",                 name="y",                 optional=false,                 order=1,                 type="float"               },               {                 description="",                 name="z",                 optional=false,                 order=2,                 type="float"               }             }           },           {             complex_type="tuple",             values={               "float",               "float",               "float"             }           }         }       }     },     {       description="",       name="VehicleAutomaticTargetingParameters",       order=261,       type={         complex_type="table",         parameters={           {             description="",             name="auto_target_with_gunner",             optional=false,             order=1,             type="boolean"           },           {             description="",             name="auto_target_without_gunner",             optional=false,             order=0,             type="boolean"           }         }       }     },     {       description="The text is aligned so that the target position is at the given side of the text.\n\nFor example, `\"top\"` aligned text means the top of the text is at the target position. Or in other words, the target is at the top of the text.",       name="VerticalTextAlign",       order=60,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="top"           },           {             complex_type="literal",             description="",             value="middle"           },           {             complex_type="literal",             description="",             value="baseline"           },           {             complex_type="literal",             description="",             value="bottom"           }         }       }     },     {       description="A virtual signal prototype may be specified in one of two ways.",       name="VirtualSignalID",       order=54,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="type",             description="The virtual signal prototype.",             value="LuaVirtualSignalPrototype"           },           {             complex_type="type",             description="The prototype name.",             value="string"           }         }       }     },     {       description="",       name="WaitCondition",       order=153,       type={         complex_type="table",         parameters={           {             description="Specifies how this condition is to be compared with the preceding conditions in the corresponding `wait_conditions` array. Always present when reading, defaults to `\"and\"` when writing.",             name="compare_type",             optional=true,             order=1,             type={               complex_type="union",               full_format=false,               options={                 {                   complex_type="literal",                   value="and"                 },                 {                   complex_type="literal",                   value="or"                 }               }             }           },           {             description="This is a CircuitCondition and only present when `type` is `\"item_count\"`, `\"circuit\"`, `\"fluid_count\"`, `\"fuel_item_count_all\"`, or `\"fuel_item_count_any\"`, and a circuit condition is configured. This is a ItemIDAndQualityIDPair and only present when `type` is `\"request_satisfied\"` or `\"request_not_satisfied\"`",             name="condition",             optional=true,             order=3,             type={               complex_type="union",               full_format=false,               options={                 "CircuitCondition",                 "ItemIDAndQualityIDPair"               }             }           },           {             description="Amount of damage to take when `type` is `\"damage_taken\"`.",             name="damage",             optional=true,             order=6,             type="uint"           },           {             description="Name of the space location. Only present when `type` is \"`any_planet_import_zero`\" and a planet is configured.",             name="planet",             optional=true,             order=4,             type="string"           },           {             description="Name of the station. Only present when `type` is \"`specific_destination_full`\", \"`specific_destination_not_full`\", \"`at_station`\", or \"`not_at_station`\", and a station is configured.",             name="station",             optional=true,             order=5,             type="string"           },           {             description="Number of ticks to wait when `type` is `\"time\"`, or number of ticks of inactivity when `type` is `\"inactivity\"`.",             name="ticks",             optional=true,             order=2,             type="uint"           },           {             description="",             name="type",             optional=false,             order=0,             type="WaitConditionType"           }         }       }     },     {       description="Type of a [WaitCondition](runtime:WaitCondition).",       name="WaitConditionType",       order=154,       type={         complex_type="union",         full_format=true,         options={           {             complex_type="literal",             description="",             value="time"           },           {             complex_type="literal",             description="",             value="full"           },           {             complex_type="literal",             description="",             value="empty"           },           {             complex_type="literal",             description="",             value="not_empty"           },           {             complex_type="literal",             description="",             value="item_count"           },           {             complex_type="literal",             description="",             value="circuit"           },           {             complex_type="literal",             description="",             value="inactivity"           },           {             complex_type="literal",             description="",             value="robots_inactive"           },           {             complex_type="literal",             description="",             value="fluid_count"           },           {             complex_type="literal",             description="",             value="passenger_present"           },           {             complex_type="literal",             description="",             value="passenger_not_present"           },           {             complex_type="literal",             description="",             value="fuel_item_count_all"           },           {             complex_type="literal",             description="",             value="fuel_item_count_any"           },           {             complex_type="literal",             description="",             value="fuel_full"           },           {             complex_type="literal",             description="",             value="destination_full_or_no_path"           },           {             complex_type="literal",             description="",             value="request_satisfied"           },           {             complex_type="literal",             description="",             value="request_not_satisfied"           },           {             complex_type="literal",             description="",             value="all_requests_satisfied"           },           {             complex_type="literal",             description="",             value="any_request_not_satisfied"           },           {             complex_type="literal",             description="",             value="any_request_zero"           },           {             complex_type="literal",             description="",             value="any_planet_import_zero"           },           {             complex_type="literal",             description="",             value="specific_destination_full"           },           {             complex_type="literal",             description="",             value="specific_destination_not_full"           },           {             complex_type="literal",             description="",             value="at_station"           },           {             complex_type="literal",             description="",             value="not_at_station"           },           {             complex_type="literal",             description="",             value="damage_taken"           }         }       }     },     {       description="Weight of an object. The weight is stored as a fixed-size 64 bit integer, with 16 bits reserved for decimal precision, meaning the smallest value step is `1/2^16`.",       name="Weight",       order=0,       type="double"     },     {       description="",       name="WireConnection",       order=82,       type={         complex_type="table",         parameters={           {             description="Defaults to `defines.wire_origin.player`.",             name="origin",             optional=true,             order=1,             type="defines.wire_origin"           },           {             description="",             name="target",             optional=false,             order=0,             type="LuaWireConnector"           }         }       }     },     {       description="",       name="WorkerRobotOrder",       order=45,       type={         complex_type="table",         parameters={           {             description="The cliff explosive for the cliff explode job.",             name="cliff_explosive_id",             optional=true,             order=4,             type="LuaItemPrototype"           },           {             description="The item to place if relevant.",             name="item_to_place",             optional=true,             order=2,             type="ItemWithQualityCounts"           },           {             description="The secondary target of the upgrade order.",             name="secondary_target",             optional=true,             order=3,             type="LuaEntity"           },           {             description="The target of the order.",             name="target",             optional=true,             order=1,             type="LuaEntity"           },           {             description="The target count of the pickup or deliver order.",             name="target_count",             optional=true,             order=6,             type="ItemCountType"           },           {             description="The target item of the pickup or deliver order.",             name="target_item",             optional=true,             order=5,             type="ItemIDAndQualityIDPair"           },           {             description="The type of the order.",             name="type",             optional=false,             order=0,             type="defines.robot_order_type"           }         }       }     },     {       description="A set of limitations for the player zoom level.",       examples={         "```\n{\n  closest = { zoom = 4 },\n  furthest = { zoom = 1 / 16 },\n  furthest_game_view = { distance = 200, max_distance = 400 }\n}\n```"       },       name="ZoomLimits",       order=91,       type={         complex_type="table",         parameters={           {             description="The closest zoom level that the player's current controller can have. If not defined when overwriting [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), then the default value for the current controller as defined by the engine will be used instead. When reading from [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), this field will contain the value previously set by a script or the default value defined by the engine.",             name="closest",             optional=true,             order=0,             type="ZoomSpecification"           },           {             description="The furthest zoom level that the player's current controller can have. If for any reason the `furthest` limit is closer than `closest`, then the player's zoom will be locked to the closer of the two values. If not defined when overwriting [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), then the default value for the current controller as defined by the engine will be used instead. When reading from [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), this field will contain the value previously set by a script or the default value defined by the engine.",             name="furthest",             optional=true,             order=1,             type="ZoomSpecification"           },           {             description="The furthest zoom level at which the engine will render the game view. Zoom levels further than this limit will render using chart (map) view. Set this to the same value as `furthest` to force the game view at all zoom levels. Set this to some value closer than `closest` to force chart view at all zoom levels. If not defined when overwriting [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), then the default value for the current controller as defined by the engine will be used instead. When reading from [LuaPlayer::zoom_limits](runtime:LuaPlayer::zoom_limits), this field will contain the value previously set by a script or the default value defined by the engine.",             name="furthest_game_view",             optional=true,             order=2,             type="ZoomSpecification"           }         }       }     },     {       description="A table specifying a fixed or dynamically-computed zoom level using one of the supported methods. Used by [ZoomLimits](runtime:ZoomLimits).\n\nMethod 1 only uses the `zoom` field. The zoom level is fixed and will not change at runtime. Directly correlates to the perceived size of objects in the game world.\n\nMethod 2 only uses `distance` and optionally `max_distance`. The zoom level is computed dynamically based on the player's window dimensions and aspect ratio. This method is ideal for limiting how far the player can see.\n\nIf there is ambiguity in which method should be used (i.e. both `zoom` and `distance` fields are provided), an error will be thrown during parsing.",       examples={         "```\n-- Method 1: Specify a fixed zoom level.\n{ zoom = 3.0 }\n\n-- Method 2: Specify a dynamic zoom level based on the window dimensions.\n{ distance = 200, max_distance = 500 }\n```"       },       name="ZoomSpecification",       order=92,       type={         complex_type="table",         parameters={           {             description="The number of game tiles across the horizontal axis at the game's default 16:9 aspect ratio. Must be a positive number. This specification is designed to comfortably accommodate displays with extreme aspect ratios such as ultra-wide monitors. The exact zoom level is calculated dynamically as follows. For aspect ratios between 16:9 and 9:16, the zoom level is computed so that `distance` number of tiles are visible along the game window's longer axis. For aspect ratios between 16:9 and 1:1, this is the window's width. For aspect ratios between 1:1 and 9:16, this is the window's height. For aspect ratios greater than 16:9 or smaller than 9:16, then the zoom level is actually computed so that `distance * 9 / 16` number of tiles are visible along the game window's shorter axis. So for aspect ratios greater than 16:9, this is the window's height. For aspect ratios smaller than 9:16, this is the window's height. Mutually exclusive with `zoom`. Used with `max_distance`.",             name="distance",             optional=true,             order=1,             type="double"           },           {             description="The absolute maximum number of game tiles permitted along the window's longest axis, setting a hard limit on how far a player can see by simply manipulating the game window. Must be a positive number. Values greater than the default may allow players to see un-generated chunks while exploring. The \"closest\" zoom level calculated from `distance` and `max_distance` is always used. Optionally used with `distance`. Defaults to `500`.",             name="max_distance",             optional=true,             order=2,             type="double"           },           {             description="A fixed zoom level. Must be a positive value. 1.0 is the default zoom level. Mutually exclusive with `distance`.",             name="zoom",             optional=true,             order=0,             type="double"           }         }       }     },     {       description="Either `true` or `false`.",       name="boolean",       order=311,       type={         complex_type="builtin"       }     },     {       description="A double-precision floating-point number. This is the same data type as all Lua numbers use.",       name="double",       order=301,       type={         complex_type="builtin"       }     },     {       description="A floating-point number. This is a single-precision floating point number. Whilst Lua only uses double-precision numbers, when a function takes a float, the game engine will immediately convert the double-precision number to single-precision.",       name="float",       order=300,       type={         complex_type="builtin"       }     },     {       description="32-bit signed integer. Possible values are `-2 147 483 648` to `2 147 483 647`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `int` will floor the given double.",       name="int",       order=307,       type={         complex_type="builtin"       }     },     {       description="16 bit signed integer. Possible values are `-32 768` to `32 767`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `int16` will floor the given double.",       name="int16",       order=305,       type={         complex_type="builtin"       }     },     {       description="8-bit signed integer. Possible values are `-128` to `127`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `int8` will floor the given double.",       name="int8",       order=303,       type={         complex_type="builtin"       }     },     {       description="Nil is the type of the value `nil`, whose main property is to be different from any other value. It usually represents the absence of a useful value.",       name="nil",       order=312,       type={         complex_type="builtin"       }     },     {       description="Any kind of integer or floating point number.",       name="number",       order=309,       type={         complex_type="builtin"       }     },     {       description="Strings are enclosed in double-quotes, like this `\"hi\"`.",       name="string",       order=310,       type={         complex_type="builtin"       }     },     {       description="Tables are enclosed in curly brackets, like this `{}`.\n\nThroughout the API docs, the terms \"array\" and \"dictionary\" are used. These are fundamentally just [Lua tables](http://www.lua.org/pil/2.5.html), but have a limitation on which kind of table keys can be used. An array is a table that uses continuous integer keys starting at `1`, while a dictionary can use numeric or string keys in any order or combination.",       name="table",       order=313,       type={         complex_type="builtin"       }     },     {       description="32-bit unsigned integer. Possible values are `0` to `4 294 967 295`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint` will floor the given double.",       name="uint",       order=306,       type={         complex_type="builtin"       }     },     {       description="16-bit unsigned integer. Possible values are `0` to `65 535`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint16` will floor the given double.",       name="uint16",       order=304,       type={         complex_type="builtin"       }     },     {       description="64-bit unsigned integer. Possible values are `0` to `18 446 744 073 709 551 615`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint64` will floor the given double.",       name="uint64",       order=308,       type={         complex_type="builtin"       }     },     {       description="8-bit unsigned integer. Possible values are `0` to `255`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint8` will floor the given double.",       name="uint8",       order=302,       type={         complex_type="builtin"       }     }   },   defines={     {       description="",       name="alert_type",       order=0,       values={         {           description="",           name="collector_path_blocked",           order=0         },         {           description="",           name="custom",           order=1         },         {           description="",           name="entity_destroyed",           order=2         },         {           description="",           name="entity_under_attack",           order=3         },         {           description="",           name="no_material_for_construction",           order=4         },         {           description="",           name="no_platform_storage",           order=5         },         {           description="",           name="no_roboport_storage",           order=6         },         {           description="",           name="no_storage",           order=7         },         {           description="",           name="not_enough_construction_robots",           order=8         },         {           description="",           name="not_enough_repair_packs",           order=9         },         {           description="",           name="pipeline_overextended",           order=10         },         {           description="",           name="platform_tile_building_blocked",           order=11         },         {           description="",           name="train_no_path",           order=12         },         {           description="",           name="train_out_of_fuel",           order=13         },         {           description="",           name="turret_fire",           order=14         },         {           description="",           name="turret_out_of_ammo",           order=15         },         {           description="",           name="unclaimed_cargo",           order=16         }       }     },     {       description="AI command exit status. See [LuaEntity::set_command](runtime:LuaEntity::set_command)",       name="behavior_result",       order=1,       values={         {           description="",           name="deleted",           order=3         },         {           description="",           name="fail",           order=1         },         {           description="",           name="in_progress",           order=0         },         {           description="",           name="success",           order=2         }       }     },     {       description="",       name="build_check_type",       order=2,       values={         {           description="",           name="blueprint_ghost",           order=4         },         {           description="",           name="ghost_revive",           order=5         },         {           description="",           name="manual",           order=1         },         {           description="",           name="manual_ghost",           order=2         },         {           description="",           name="script",           order=0         },         {           description="",           name="script_ghost",           order=3         }       }     },     {       description="",       name="build_mode",       order=3,       values={         {           description="",           name="forced",           order=1         },         {           description="",           name="normal",           order=0         },         {           description="",           name="superforced",           order=2         }       }     },     {       description="",       name="cargo_destination",       order=4,       values={         {           description="The default destination type of a cargo pod when created runtime. Setting its destination to any other type will instantly launch it.",           name="invalid",           order=0         },         {           description="Cargo pods with orbit destination are destroyed when ascent is completed.",           name="orbit",           order=1         },         {           description="Only used for sending a space platform starter pack to a platform that is waiting for one. Regular deliveries to space platform hubs use [station](runtime:defines.cargo_destination.station) destination type instead.",           name="space_platform",           order=4         },         {           description="Any cargo landing pad or space platform hub.",           name="station",           order=2         },         {           description="Cargo pods will switch destination type from surface to station before starting descent if there is a station available and [CargoDestination::position](runtime:CargoDestination::position) has not been specified. Note, setting the destination to \"surface\" when the surface is the same as the one the pod is on forces it to find and set a landing position.",           name="surface",           order=3         }       }     },     {       description="State of a chain signal.",       name="chain_signal_state",       order=5,       values={         {           description="",           name="all_open",           order=1         },         {           description="",           name="none",           order=0         },         {           description="",           name="none_open",           order=3         },         {           description="",           name="partially_open",           order=2         }       }     },     {       description="",       name="chunk_generated_status",       order=6,       values={         {           description="",           name="basic_tiles",           order=2         },         {           description="",           name="corrected_tiles",           order=3         },         {           description="",           name="custom_tiles",           order=1         },         {           description="",           name="entities",           order=5         },         {           description="",           name="nothing",           order=0         },         {           description="",           name="tiles",           order=4         }       }     },     {       description="Command given to units describing what they should do.",       name="command",       order=7,       values={         {           description="Attack another entity.",           name="attack",           order=0         },         {           description="Go to a place and attack what you see.",           name="attack_area",           order=4         },         {           description="Go to a position and build a base there.",           name="build_base",           order=8         },         {           description="Chain commands together, see [defines.compound_command](runtime:defines.compound_command).",           name="compound",           order=2         },         {           description="Flee from another entity.",           name="flee",           order=6         },         {           description="Go to a specific position.",           name="go_to_location",           order=1         },         {           description="Do what your group wants you to do.",           name="group",           order=3         },         {           description="Stop moving and stay where you are.",           name="stop",           order=7         },         {           description="Chill.",           name="wander",           order=5         }       }     },     {       description="How commands are joined together in a compound command (see [defines.command.compound](runtime:defines.command.compound)).",       name="compound_command",       order=8,       values={         {           description="Fail on first failure. Only succeeds if all commands (executed one after another) succeed.",           name="logical_and",           order=0         },         {           description="Succeed on first success. Only fails if all commands (executed one after another) fail.",           name="logical_or",           order=1         },         {           description="Execute all commands in sequence and fail or succeed depending on the return status of the last command.",           name="return_last",           order=2         }       }     },     {       description="",       name="control_behavior",       order=9,       subkeys={         {           description="",           name="cargo_landing_pad",           order=7,           subkeys={             {               description="",               name="exclusive_mode",               order=0,               values={                 {                   description="",                   name="none",                   order=0                 },                 {                   description="",                   name="send_contents",                   order=1                 },                 {                   description="",                   name="set_requests",                   order=2                 }               }             }           }         },         {           description="",           name="inserter",           order=0,           subkeys={             {               description="",               name="hand_read_mode",               order=0,               values={                 {                   description="",                   name="hold",                   order=0                 },                 {                   description="",                   name="pulse",                   order=1                 }               }             }           }         },         {           description="",           name="lamp",           order=2,           subkeys={             {               description="",               name="color_mode",               order=0,               values={                 {                   description="",                   name="color_mapping",                   order=0                 },                 {                   description="",                   name="components",                   order=1                 },                 {                   description="",                   name="packed_rgb",                   order=2                 }               }             }           }         },         {           description="",           name="logistic_container",           order=1,           subkeys={             {               description="",               name="exclusive_mode",               order=0,               values={                 {                   description="",                   name="none",                   order=2                 },                 {                   description="",                   name="send_contents",                   order=0                 },                 {                   description="",                   name="set_requests",                   order=1                 }               }             }           }         },         {           description="",           name="mining_drill",           order=3,           subkeys={             {               description="",               name="resource_read_mode",               order=0,               values={                 {                   description="",                   name="entire_patch",                   order=1                 },                 {                   description="",                   name="this_miner",                   order=0                 }               }             }           }         },         {           description="",           name="roboport",           order=6,           subkeys={             {               description="",               name="read_items_mode",               order=0,               values={                 {                   description="",                   name="logistics",                   order=1                 },                 {                   description="",                   name="missing_requests",                   order=2                 },                 {                   description="",                   name="none",                   order=0                 }               }             }           }         },         {           description="",           name="rocket_silo",           order=5,           subkeys={             {               description="",               name="read_mode",               order=0,               values={                 {                   description="",                   name="logistic_inventory",                   order=1                 },                 {                   description="",                   name="none",                   order=0                 },                 {                   description="",                   name="orbital_requests",                   order=2                 }               }             }           }         },         {           description="",           name="transport_belt",           order=4,           subkeys={             {               description="",               name="content_read_mode",               order=0,               values={                 {                   description="",                   name="entire_belt_hold",                   order=2                 },                 {                   description="",                   name="hold",                   order=1                 },                 {                   description="",                   name="pulse",                   order=0                 }               }             }           }         },         {           description="",           name="type",           order=8,           values={             {               description="[LuaAccumulatorControlBehavior](runtime:LuaAccumulatorControlBehavior)",               name="accumulator",               order=12             },             {               description="[LuaAgriculturalTowerControlBehavior](runtime:LuaAgriculturalTowerControlBehavior)",               name="agricultural_tower",               order=31             },             {               description="[LuaArithmeticCombinatorControlBehavior](runtime:LuaArithmeticCombinatorControlBehavior)",               name="arithmetic_combinator",               order=9             },             {               description="[LuaArtilleryTurretControlBehavior](runtime:LuaArtilleryTurretControlBehavior)",               name="artillery_turret",               order=25             },             {               description="[LuaAssemblingMachineControlBehavior](runtime:LuaAssemblingMachineControlBehavior)",               name="assembling_machine",               order=18             },             {               description="[LuaAsteroidCollectorControlBehavior](runtime:LuaAsteroidCollectorControlBehavior)",               name="asteroid_collector",               order=26             },             {               description="[LuaCargoLandingPadControlBehavior](runtime:LuaCargoLandingPadControlBehavior)",               name="cargo_landing_pad",               order=30             },             {               description="[LuaConstantCombinatorControlBehavior](runtime:LuaConstantCombinatorControlBehavior)",               name="constant_combinator",               order=10             },             {               description="[LuaContainerControlBehavior](runtime:LuaContainerControlBehavior)",               name="container",               order=0             },             {               description="[LuaDeciderCombinatorControlBehavior](runtime:LuaDeciderCombinatorControlBehavior)",               name="decider_combinator",               order=8             },             {               description="[LuaDisplayPanelControlBehavior](runtime:LuaDisplayPanelControlBehavior)",               name="display_panel",               order=28             },             {               description="[LuaFurnaceControlBehavior](runtime:LuaFurnaceControlBehavior)",               name="furnace",               order=32             },             {               description="[LuaGenericOnOffControlBehavior](runtime:LuaGenericOnOffControlBehavior)",               name="generic_on_off",               order=1             },             {               description="[LuaInserterControlBehavior](runtime:LuaInserterControlBehavior)",               name="inserter",               order=2             },             {               description="[LuaLampControlBehavior](runtime:LuaLampControlBehavior)",               name="lamp",               order=3             },             {               description="[LuaLoaderControlBehavior](runtime:LuaLoaderControlBehavior)",               name="loader",               order=29             },             {               description="[LuaLogisticContainerControlBehavior](runtime:LuaLogisticContainerControlBehavior)",               name="logistic_container",               order=4             },             {               description="[LuaMiningDrillControlBehavior](runtime:LuaMiningDrillControlBehavior)",               name="mining_drill",               order=16             },             {               description="[LuaProgrammableSpeakerControlBehavior](runtime:LuaProgrammableSpeakerControlBehavior)",               name="programmable_speaker",               order=17             },             {               description="[LuaProxyContainerControlBehavior](runtime:LuaProxyContainerControlBehavior)",               name="proxy_container",               order=33             },             {               description="[LuaPumpControlBehavior](runtime:LuaPumpControlBehavior)",               name="pump",               order=19             },             {               description="[LuaRadarControlBehavior](runtime:LuaRadarControlBehavior)",               name="radar",               order=27             },             {               description="[LuaRailSignalBaseControlBehavior](runtime:LuaRailSignalBaseControlBehavior)",               name="rail_chain_signal",               order=14             },             {               description="[LuaRailSignalBaseControlBehavior](runtime:LuaRailSignalBaseControlBehavior)",               name="rail_signal",               order=13             },             {               description="[LuaReactorControlBehavior](runtime:LuaReactorControlBehavior)",               name="reactor",               order=23             },             {               description="[LuaRoboportControlBehavior](runtime:LuaRoboportControlBehavior)",               name="roboport",               order=5             },             {               description="[LuaRocketSiloControlBehavior](runtime:LuaRocketSiloControlBehavior)",               name="rocket_silo",               order=21             },             {               description="[LuaSelectorCombinatorControlBehavior](runtime:LuaSelectorCombinatorControlBehavior)",               name="selector_combinator",               order=20             },             {               description="[LuaSpacePlatformHubControlBehavior](runtime:LuaSpacePlatformHubControlBehavior)",               name="space_platform_hub",               order=24             },             {               description="[LuaStorageTankControlBehavior](runtime:LuaStorageTankControlBehavior)",               name="storage_tank",               order=6             },             {               description="[LuaTrainStopControlBehavior](runtime:LuaTrainStopControlBehavior)",               name="train_stop",               order=7             },             {               description="[LuaTransportBeltControlBehavior](runtime:LuaTransportBeltControlBehavior)",               name="transport_belt",               order=11             },             {               description="[LuaTurretControlBehavior](runtime:LuaTurretControlBehavior)",               name="turret",               order=22             },             {               description="[LuaWallControlBehavior](runtime:LuaWallControlBehavior)",               name="wall",               order=15             }           }         }       }     },     {       description="",       name="controllers",       order=10,       values={         {           description="The controller controls a character. This is the default controller in freeplay.",           name="character",           order=1         },         {           description="The player can't interact with the world, and the camera pans around in a predefined manner.",           name="cutscene",           order=4         },         {           description="The Editor Controller near ultimate power to do almost anything in the game.",           name="editor",           order=3         },         {           description="Can't interact with the world, can only observe. Used in the multiplayer waiting-to-respawn screen.",           name="ghost",           order=0         },         {           description="The controller isn't tied to a character. This is the default controller in sandbox.",           name="god",           order=2         },         {           description="Can't move/change items but can build ghosts/change settings.",           name="remote",           order=6         },         {           description="Can't change anything in the world but can view anything.",           name="spectator",           order=5         }       }     },     {       description="",       name="deconstruction_item",       order=11,       subkeys={         {           description="",           name="entity_filter_mode",           order=0,           values={             {               description="",               name="blacklist",               order=1             },             {               description="",               name="whitelist",               order=0             }           }         },         {           description="",           name="tile_filter_mode",           order=1,           values={             {               description="",               name="blacklist",               order=1             },             {               description="",               name="whitelist",               order=0             }           }         },         {           description="",           name="tile_selection_mode",           order=2,           values={             {               description="",               name="always",               order=1             },             {               description="",               name="never",               order=2             },             {               description="",               name="normal",               order=0             },             {               description="",               name="only",               order=3             }           }         }       }     },     {       description="",       name="default_icon_size",       order=12     },     {       description="",       name="difficulty",       order=13,       values={         {           description="",           name="easy",           order=0         },         {           description="",           name="hard",           order=2         },         {           description="",           name="normal",           order=1         }       }     },     {       description="",       name="direction",       order=14,       values={         {           description="",           name="east",           order=4         },         {           description="",           name="eastnortheast",           order=3         },         {           description="",           name="eastsoutheast",           order=5         },         {           description="",           name="north",           order=0         },         {           description="",           name="northeast",           order=2         },         {           description="",           name="northnortheast",           order=1         },         {           description="",           name="northnorthwest",           order=15         },         {           description="",           name="northwest",           order=14         },         {           description="",           name="south",           order=8         },         {           description="",           name="southeast",           order=6         },         {           description="",           name="southsoutheast",           order=7         },         {           description="",           name="southsouthwest",           order=9         },         {           description="",           name="southwest",           order=10         },         {           description="",           name="west",           order=12         },         {           description="",           name="westnorthwest",           order=13         },         {           description="",           name="westsouthwest",           order=11         }       }     },     {       description="",       name="disconnect_reason",       order=15,       values={         {           description="",           name="afk",           order=6         },         {           description="",           name="banned",           order=9         },         {           description="",           name="cannot_keep_up",           order=5         },         {           description="",           name="desync_limit_reached",           order=4         },         {           description="",           name="dropped",           order=1         },         {           description="",           name="kicked",           order=7         },         {           description="",           name="kicked_and_deleted",           order=8         },         {           description="",           name="quit",           order=0         },         {           description="",           name="reconnect",           order=2         },         {           description="",           name="switching_servers",           order=10         },         {           description="",           name="wrong_input",           order=3         }       }     },     {       description="",       name="distraction",       order=16,       values={         {           description="Attack closer enemy entities, including entities \"built\" by player (belts, inserters, chests).",           name="by_anything",           order=2         },         {           description="Attack when attacked.",           name="by_damage",           order=3         },         {           description="Attack closer enemy entities with force.",           name="by_enemy",           order=1         },         {           description="Perform command even if someone attacks the unit.",           name="none",           order=0         }       }     },     {       description="",       name="entity_status",       order=17,       values={         {           description="Only used if set through [ContainerPrototype::default_status](prototype:ContainerPrototype::default_status).",           name="broken",           order=3         },         {           description="Used by rail signals.",           name="cant_divide_segments",           order=59         },         {           description="Used by accumulators.",           name="charging",           order=17         },         {           description="",           name="closed_by_circuit_network",           order=10         },         {           description="Used by asteroid collectors.",           name="computing_navigation",           order=63         },         {           description="Used by trains.",           name="destination_stop_full",           order=48         },         {           description="Used by constant combinators: Combinator is turned off via switch in GUI.",           name="disabled",           order=56         },         {           description="",           name="disabled_by_control_behavior",           order=8         },         {           description="",           name="disabled_by_script",           order=11         },         {           description="Used by accumulators.",           name="discharging",           order=18         },         {           description="Used by crafting machines.",           name="fluid_ingredient_shortage",           order=28         },         {           description="",           name="frozen",           order=7         },         {           description="Used by burner energy sources.",           name="full_burnt_result_output",           order=31         },         {           description="Used by crafting machines, boilers, burner energy sources and reactors: Reactor/burner has full burnt result inventory, boiler has full output fluidbox.",           name="full_output",           order=29         },         {           description="Used by accumulators.",           name="fully_charged",           order=19         },         {           description="Used by ghosts.",           name="ghost",           order=2         },         {           description="Used by crafting machines.",           name="item_ingredient_shortage",           order=32         },         {           description="Used by the rocket silo.",           name="launching_rocket",           order=41         },         {           description="Used by boilers and fluid turrets: Boiler still has some fluid but is about to run out.",           name="low_input_fluid",           order=27         },         {           description="",           name="low_power",           order=5         },         {           description="Used by heat energy sources.",           name="low_temperature",           order=55         },         {           description="",           name="marked_for_deconstruction",           order=12         },         {           description="Used by mining drills when the mining fluid is missing.",           name="missing_required_fluid",           order=33         },         {           description="Used by labs.",           name="missing_science_packs",           order=34         },         {           description="Used by power switches.",           name="networks_connected",           order=15         },         {           description="Used by power switches.",           name="networks_disconnected",           order=16         },         {           description="Used by ammo turrets.",           name="no_ammo",           order=54         },         {           description="Used by filter inserters.",           name="no_filter",           order=60         },         {           description="",           name="no_fuel",           order=6         },         {           description="Used by furnaces.",           name="no_ingredients",           order=22         },         {           description="Used by boilers, fluid turrets and fluid energy sources: Boiler has no fluid to work with.",           name="no_input_fluid",           order=23         },         {           description="Used by mining drills.",           name="no_minable_resources",           order=25         },         {           description="Used by beacons.",           name="no_modules_to_transmit",           order=50         },         {           description="Used by trains and space platform hubs.",           name="no_path",           order=49         },         {           description="",           name="no_power",           order=4         },         {           description="Used by assembling machines.",           name="no_recipe",           order=21         },         {           description="Used by labs.",           name="no_research_in_progress",           order=24         },         {           description="Used by agricultural towers.",           name="no_spot_seedable_by_inputs",           order=61         },         {           description="",           name="normal",           order=1         },         {           description="Used by cargo bays.",           name="not_connected_to_hub_or_pad",           order=26         },         {           description="Used by rail signals.",           name="not_connected_to_rail",           order=58         },         {           description="Used by agricultural towers.",           name="not_enough_space_in_output",           order=30         },         {           description="Used by space platform hubs.",           name="not_enough_thrust",           order=47         },         {           description="Used by generators and solar panels.",           name="not_plugged_in_electric_network",           order=14         },         {           description="Used by space platform hubs.",           name="on_the_way",           order=43         },         {           description="",           name="opened_by_circuit_network",           order=9         },         {           description="Used by logistic containers.",           name="out_of_logistic_network",           order=20         },         {           description="Used by space platform hubs.",           name="paused",           order=13         },         {           description="Used by pipes, pipes to ground and storage tanks.",           name="pipeline_overextended",           order=64         },         {           description="Used by the rocket silo.",           name="preparing_rocket_for_launch",           order=38         },         {           description="Used by roboports.",           name="recharging_after_power_outage",           order=51         },         {           description="Used by assembling machines.",           name="recipe_is_parameter",           order=66         },         {           description="Used by assembling machines.",           name="recipe_not_researched",           order=65         },         {           description="Used by thrusters.",           name="thrust_not_required",           order=42         },         {           description="Used by lamps.",           name="turned_off_during_daytime",           order=57         },         {           description="Used by trains.",           name="waiting_at_stop",           order=45         },         {           description="Used by inserters when wait_for_full_hand is set.",           name="waiting_for_more_items",           order=36         },         {           description="Used by agricultural towers.",           name="waiting_for_plants_to_grow",           order=62         },         {           description="Used by space platform hubs.",           name="waiting_for_rockets_to_arrive",           order=46         },         {           description="Used by inserters.",           name="waiting_for_source_items",           order=35         },         {           description="Used by inserters and mining drills.",           name="waiting_for_space_in_destination",           order=37         },         {           description="Used by the rocket silo.",           name="waiting_for_space_in_platform_hub",           order=40         },         {           description="Used by inserters targeting entity ghosts.",           name="waiting_for_target_to_be_built",           order=52         },         {           description="Used by inserters targeting rails.",           name="waiting_for_train",           order=53         },         {           description="Used by space platform hubs.",           name="waiting_in_orbit",           order=44         },         {           description="Used by the rocket silo.",           name="waiting_to_launch_rocket",           order=39         },         {           description="",           name="working",           order=0         }       }     },     {       description="",       name="entity_status_diode",       order=18,       values={         {           description="",           name="green",           order=0         },         {           description="",           name="red",           order=1         },         {           description="",           name="yellow",           order=2         }       }     },     {       description="See the [events page](runtime:events) for more info on what events contain and when they get raised.",       name="events",       order=19,       values={         {           description="",           name="on_achievement_gained",           order=0         },         {           description="",           name="on_ai_command_completed",           order=1         },         {           description="",           name="on_area_cloned",           order=2         },         {           description="",           name="on_biter_base_built",           order=3         },         {           description="",           name="on_brush_cloned",           order=4         },         {           description="",           name="on_build_base_arrived",           order=5         },         {           description="",           name="on_built_entity",           order=6         },         {           description="",           name="on_cancelled_deconstruction",           order=7         },         {           description="",           name="on_cancelled_upgrade",           order=8         },         {           description="",           name="on_cargo_pod_delivered_cargo",           order=9         },         {           description="",           name="on_cargo_pod_finished_ascending",           order=10         },         {           description="",           name="on_cargo_pod_finished_descending",           order=11         },         {           description="",           name="on_character_corpse_expired",           order=12         },         {           description="",           name="on_chart_tag_added",           order=13         },         {           description="",           name="on_chart_tag_modified",           order=14         },         {           description="",           name="on_chart_tag_removed",           order=15         },         {           description="",           name="on_chunk_charted",           order=16         },         {           description="",           name="on_chunk_deleted",           order=17         },         {           description="",           name="on_chunk_generated",           order=18         },         {           description="",           name="on_combat_robot_expired",           order=19         },         {           description="",           name="on_console_chat",           order=20         },         {           description="",           name="on_console_command",           order=21         },         {           description="",           name="on_cutscene_cancelled",           order=22         },         {           description="",           name="on_cutscene_finished",           order=23         },         {           description="",           name="on_cutscene_started",           order=24         },         {           description="",           name="on_cutscene_waypoint_reached",           order=25         },         {           description="",           name="on_entity_cloned",           order=26         },         {           description="",           name="on_entity_color_changed",           order=27         },         {           description="",           name="on_entity_damaged",           order=28         },         {           description="",           name="on_entity_died",           order=29         },         {           description="",           name="on_entity_logistic_slot_changed",           order=30         },         {           description="",           name="on_entity_renamed",           order=31         },         {           description="",           name="on_entity_settings_pasted",           order=32         },         {           description="",           name="on_entity_spawned",           order=33         },         {           description="",           name="on_equipment_inserted",           order=34         },         {           description="",           name="on_equipment_removed",           order=35         },         {           description="",           name="on_force_cease_fire_changed",           order=36         },         {           description="",           name="on_force_created",           order=37         },         {           description="",           name="on_force_friends_changed",           order=38         },         {           description="",           name="on_force_reset",           order=39         },         {           description="",           name="on_forces_merged",           order=40         },         {           description="",           name="on_forces_merging",           order=41         },         {           description="",           name="on_game_created_from_scenario",           order=42         },         {           description="",           name="on_gui_checked_state_changed",           order=43         },         {           description="",           name="on_gui_click",           order=44         },         {           description="",           name="on_gui_closed",           order=45         },         {           description="",           name="on_gui_confirmed",           order=46         },         {           description="",           name="on_gui_elem_changed",           order=47         },         {           description="",           name="on_gui_hover",           order=48         },         {           description="",           name="on_gui_leave",           order=49         },         {           description="",           name="on_gui_location_changed",           order=50         },         {           description="",           name="on_gui_opened",           order=51         },         {           description="",           name="on_gui_selected_tab_changed",           order=52         },         {           description="",           name="on_gui_selection_state_changed",           order=53         },         {           description="",           name="on_gui_switch_state_changed",           order=54         },         {           description="",           name="on_gui_text_changed",           order=55         },         {           description="",           name="on_gui_value_changed",           order=56         },         {           description="",           name="on_land_mine_armed",           order=57         },         {           description="",           name="on_lua_shortcut",           order=58         },         {           description="",           name="on_marked_for_deconstruction",           order=59         },         {           description="",           name="on_marked_for_upgrade",           order=60         },         {           description="",           name="on_market_item_purchased",           order=61         },         {           description="",           name="on_mod_item_opened",           order=62         },         {           description="",           name="on_multiplayer_init",           order=63         },         {           description="",           name="on_object_destroyed",           order=64         },         {           description="",           name="on_permission_group_added",           order=65         },         {           description="",           name="on_permission_group_deleted",           order=66         },         {           description="",           name="on_permission_group_edited",           order=67         },         {           description="",           name="on_permission_string_imported",           order=68         },         {           description="",           name="on_picked_up_item",           order=69         },         {           description="",           name="on_player_alt_reverse_selected_area",           order=70         },         {           description="",           name="on_player_alt_selected_area",           order=71         },         {           description="",           name="on_player_ammo_inventory_changed",           order=72         },         {           description="",           name="on_player_armor_inventory_changed",           order=73         },         {           description="",           name="on_player_banned",           order=74         },         {           description="",           name="on_player_built_tile",           order=75         },         {           description="",           name="on_player_cancelled_crafting",           order=76         },         {           description="",           name="on_player_changed_force",           order=77         },         {           description="",           name="on_player_changed_position",           order=78         },         {           description="",           name="on_player_changed_surface",           order=79         },         {           description="",           name="on_player_cheat_mode_disabled",           order=80         },         {           description="",           name="on_player_cheat_mode_enabled",           order=81         },         {           description="",           name="on_player_clicked_gps_tag",           order=82         },         {           description="",           name="on_player_configured_blueprint",           order=83         },         {           description="",           name="on_player_controller_changed",           order=84         },         {           description="",           name="on_player_crafted_item",           order=85         },         {           description="",           name="on_player_created",           order=86         },         {           description="",           name="on_player_cursor_stack_changed",           order=87         },         {           description="",           name="on_player_deconstructed_area",           order=88         },         {           description="",           name="on_player_demoted",           order=89         },         {           description="",           name="on_player_died",           order=90         },         {           description="",           name="on_player_display_density_scale_changed",           order=91         },         {           description="",           name="on_player_display_resolution_changed",           order=92         },         {           description="",           name="on_player_display_scale_changed",           order=93         },         {           description="",           name="on_player_driving_changed_state",           order=94         },         {           description="",           name="on_player_dropped_item",           order=95         },         {           description="",           name="on_player_fast_transferred",           order=96         },         {           description="",           name="on_player_flipped_entity",           order=97         },         {           description="",           name="on_player_flushed_fluid",           order=98         },         {           description="",           name="on_player_gun_inventory_changed",           order=99         },         {           description="",           name="on_player_input_method_changed",           order=100         },         {           description="",           name="on_player_joined_game",           order=101         },         {           description="",           name="on_player_kicked",           order=102         },         {           description="",           name="on_player_left_game",           order=103         },         {           description="",           name="on_player_locale_changed",           order=104         },         {           description="",           name="on_player_main_inventory_changed",           order=105         },         {           description="",           name="on_player_mined_entity",           order=106         },         {           description="",           name="on_player_mined_item",           order=107         },         {           description="",           name="on_player_mined_tile",           order=108         },         {           description="",           name="on_player_muted",           order=109         },         {           description="",           name="on_player_pipette",           order=110         },         {           description="",           name="on_player_placed_equipment",           order=111         },         {           description="",           name="on_player_promoted",           order=112         },         {           description="",           name="on_player_removed",           order=113         },         {           description="",           name="on_player_removed_equipment",           order=114         },         {           description="",           name="on_player_repaired_entity",           order=115         },         {           description="",           name="on_player_respawned",           order=116         },         {           description="",           name="on_player_reverse_selected_area",           order=117         },         {           description="",           name="on_player_rotated_entity",           order=118         },         {           description="",           name="on_player_selected_area",           order=119         },         {           description="",           name="on_player_set_quick_bar_slot",           order=120         },         {           description="",           name="on_player_setup_blueprint",           order=121         },         {           description="",           name="on_player_toggled_alt_mode",           order=122         },         {           description="",           name="on_player_toggled_map_editor",           order=123         },         {           description="",           name="on_player_trash_inventory_changed",           order=124         },         {           description="",           name="on_player_unbanned",           order=125         },         {           description="",           name="on_player_unmuted",           order=126         },         {           description="",           name="on_player_used_capsule",           order=127         },         {           description="",           name="on_player_used_spidertron_remote",           order=128         },         {           description="",           name="on_post_entity_died",           order=129         },         {           description="",           name="on_pre_build",           order=130         },         {           description="",           name="on_pre_chunk_deleted",           order=131         },         {           description="",           name="on_pre_entity_settings_pasted",           order=132         },         {           description="",           name="on_pre_ghost_deconstructed",           order=133         },         {           description="",           name="on_pre_ghost_upgraded",           order=134         },         {           description="",           name="on_pre_permission_group_deleted",           order=135         },         {           description="",           name="on_pre_permission_string_imported",           order=136         },         {           description="",           name="on_pre_player_crafted_item",           order=137         },         {           description="",           name="on_pre_player_died",           order=138         },         {           description="",           name="on_pre_player_left_game",           order=139         },         {           description="",           name="on_pre_player_mined_item",           order=140         },         {           description="",           name="on_pre_player_removed",           order=141         },         {           description="",           name="on_pre_player_toggled_map_editor",           order=142         },         {           description="",           name="on_pre_robot_exploded_cliff",           order=143         },         {           description="",           name="on_pre_scenario_finished",           order=144         },         {           description="",           name="on_pre_script_inventory_resized",           order=145         },         {           description="",           name="on_pre_surface_cleared",           order=146         },         {           description="",           name="on_pre_surface_deleted",           order=147         },         {           description="",           name="on_redo_applied",           order=148         },         {           description="",           name="on_research_cancelled",           order=149         },         {           description="",           name="on_research_finished",           order=150         },         {           description="",           name="on_research_moved",           order=151         },         {           description="",           name="on_research_queued",           order=152         },         {           description="",           name="on_research_reversed",           order=153         },         {           description="",           name="on_research_started",           order=154         },         {           description="",           name="on_resource_depleted",           order=155         },         {           description="",           name="on_robot_built_entity",           order=156         },         {           description="",           name="on_robot_built_tile",           order=157         },         {           description="",           name="on_robot_exploded_cliff",           order=158         },         {           description="",           name="on_robot_mined",           order=159         },         {           description="",           name="on_robot_mined_entity",           order=160         },         {           description="",           name="on_robot_mined_tile",           order=161         },         {           description="",           name="on_robot_pre_mined",           order=162         },         {           description="",           name="on_rocket_launch_ordered",           order=163         },         {           description="",           name="on_rocket_launched",           order=164         },         {           description="",           name="on_runtime_mod_setting_changed",           order=165         },         {           description="",           name="on_script_inventory_resized",           order=166         },         {           description="",           name="on_script_path_request_finished",           order=167         },         {           description="",           name="on_script_trigger_effect",           order=168         },         {           description="",           name="on_sector_scanned",           order=169         },         {           description="",           name="on_segment_entity_created",           order=170         },         {           description="",           name="on_selected_entity_changed",           order=171         },         {           description="",           name="on_singleplayer_init",           order=172         },         {           description="",           name="on_space_platform_built_entity",           order=173         },         {           description="",           name="on_space_platform_built_tile",           order=174         },         {           description="",           name="on_space_platform_changed_state",           order=175         },         {           description="",           name="on_space_platform_mined_entity",           order=176         },         {           description="",           name="on_space_platform_mined_item",           order=177         },         {           description="",           name="on_space_platform_mined_tile",           order=178         },         {           description="",           name="on_space_platform_pre_mined",           order=179         },         {           description="",           name="on_spider_command_completed",           order=180         },         {           description="",           name="on_string_translated",           order=181         },         {           description="",           name="on_surface_cleared",           order=182         },         {           description="",           name="on_surface_created",           order=183         },         {           description="",           name="on_surface_deleted",           order=184         },         {           description="",           name="on_surface_imported",           order=185         },         {           description="",           name="on_surface_renamed",           order=186         },         {           description="",           name="on_technology_effects_reset",           order=187         },         {           description="",           name="on_tick",           order=188         },         {           description="",           name="on_train_changed_state",           order=189         },         {           description="",           name="on_train_created",           order=190         },         {           description="",           name="on_train_schedule_changed",           order=191         },         {           description="",           name="on_trigger_created_entity",           order=192         },         {           description="",           name="on_trigger_fired_artillery",           order=193         },         {           description="",           name="on_udp_packet_received",           order=194         },         {           description="",           name="on_undo_applied",           order=195         },         {           description="",           name="on_unit_added_to_group",           order=196         },         {           description="",           name="on_unit_group_created",           order=197         },         {           description="",           name="on_unit_group_finished_gathering",           order=198         },         {           description="",           name="on_unit_removed_from_group",           order=199         },         {           description="",           name="on_worker_robot_expired",           order=200         },         {           description="",           name="script_raised_built",           order=201         },         {           description="",           name="script_raised_destroy",           order=202         },         {           description="",           name="script_raised_revive",           order=203         },         {           description="",           name="script_raised_set_tiles",           order=204         },         {           description="",           name="script_raised_teleported",           order=205         }       }     },     {       description="",       name="flow_precision_index",       order=20,       values={         {           description="",           name="fifty_hours",           order=5         },         {           description="",           name="five_seconds",           order=0         },         {           description="",           name="one_hour",           order=3         },         {           description="",           name="one_minute",           order=1         },         {           description="",           name="one_thousand_hours",           order=7         },         {           description="",           name="ten_hours",           order=4         },         {           description="",           name="ten_minutes",           order=2         },         {           description="",           name="two_hundred_fifty_hours",           order=6         }       }     },     {       description="",       name="game_controller_interaction",       order=21,       values={         {           description="Game controller will always hover this element regardless of type or state.",           name="always",           order=0         },         {           description="Never hover this element with a game controller.",           name="never",           order=1         },         {           description="Hover according to the element type and implementation.",           name="normal",           order=2         }       }     },     {       description="",       name="group_state",       order=22,       values={         {           description="",           name="attacking_distraction",           order=2         },         {           description="",           name="attacking_target",           order=3         },         {           description="",           name="finished",           order=4         },         {           description="",           name="gathering",           order=0         },         {           description="",           name="moving",           order=1         },         {           description="",           name="pathfinding",           order=5         },         {           description="",           name="wander_in_group",           order=6         }       }     },     {       description="",       name="gui_type",       order=23,       values={         {           description="",           name="achievement",           order=0         },         {           description="",           name="blueprint_library",           order=1         },         {           description="",           name="bonus",           order=2         },         {           description="",           name="controller",           order=3         },         {           description="",           name="custom",           order=4         },         {           description="",           name="entity",           order=5         },         {           description="",           name="equipment",           order=6         },         {           description="",           name="global_electric_network",           order=7         },         {           description="",           name="item",           order=8         },         {           description="",           name="logistic",           order=9         },         {           description="",           name="none",           order=10         },         {           description="",           name="opened_entity_grid",           order=11         },         {           description="",           name="other_player",           order=12         },         {           description="",           name="permissions",           order=13         },         {           description="",           name="player_management",           order=14         },         {           description="",           name="production",           order=15         },         {           description="",           name="script_inventory",           order=16         },         {           description="",           name="server_management",           order=17         },         {           description="",           name="tile",           order=18         },         {           description="",           name="trains",           order=19         }       }     },     {       description="",       name="input_action",       order=24,       values={         {           description="",           name="activate_interrupt",           order=0         },         {           description="",           name="activate_paste",           order=1         },         {           description="",           name="add_decider_combinator_condition",           order=2         },         {           description="",           name="add_decider_combinator_output",           order=3         },         {           description="",           name="add_logistic_section",           order=4         },         {           description="",           name="add_permission_group",           order=5         },         {           description="",           name="add_pin",           order=6         },         {           description="",           name="add_train_interrupt",           order=7         },         {           description="",           name="add_train_station",           order=8         },         {           description="",           name="adjust_blueprint_snapping",           order=9         },         {           description="",           name="admin_action",           order=10         },         {           description="",           name="alt_reverse_select_area",           order=11         },         {           description="",           name="alt_select_area",           order=12         },         {           description="",           name="alt_select_blueprint_entities",           order=13         },         {           description="",           name="alternative_copy",           order=14         },         {           description="",           name="begin_mining",           order=15         },         {           description="",           name="begin_mining_terrain",           order=16         },         {           description="",           name="build",           order=17         },         {           description="",           name="build_rail",           order=18         },         {           description="",           name="build_terrain",           order=19         },         {           description="",           name="cancel_craft",           order=20         },         {           description="",           name="cancel_deconstruct",           order=21         },         {           description="",           name="cancel_delete_space_platform",           order=22         },         {           description="",           name="cancel_new_blueprint",           order=23         },         {           description="",           name="cancel_research",           order=24         },         {           description="",           name="cancel_upgrade",           order=25         },         {           description="",           name="change_active_character_tab",           order=26         },         {           description="",           name="change_active_item_group_for_crafting",           order=27         },         {           description="",           name="change_active_item_group_for_filters",           order=28         },         {           description="",           name="change_active_quick_bar",           order=29         },         {           description="",           name="change_arithmetic_combinator_parameters",           order=30         },         {           description="",           name="change_entity_label",           order=31         },         {           description="",           name="change_heading_riding_state",           order=32         },         {           description="",           name="change_item_label",           order=33         },         {           description="",           name="change_logistic_point_group",           order=34         },         {           description="",           name="change_multiplayer_config",           order=35         },         {           description="",           name="change_picking_state",           order=36         },         {           description="",           name="change_programmable_speaker_alert_parameters",           order=37         },         {           description="",           name="change_programmable_speaker_circuit_parameters",           order=38         },         {           description="",           name="change_programmable_speaker_parameters",           order=39         },         {           description="",           name="change_riding_state",           order=40         },         {           description="",           name="change_selector_combinator_parameters",           order=41         },         {           description="",           name="change_shooting_state",           order=42         },         {           description="",           name="change_train_name",           order=43         },         {           description="",           name="change_train_stop_station",           order=44         },         {           description="",           name="change_train_wait_condition",           order=45         },         {           description="",           name="change_train_wait_condition_data",           order=46         },         {           description="",           name="cheat",           order=47         },         {           description="",           name="clear_cursor",           order=48         },         {           description="",           name="connect_rolling_stock",           order=49         },         {           description="",           name="copy",           order=50         },         {           description="",           name="copy_entity_settings",           order=51         },         {           description="",           name="copy_large_opened_blueprint",           order=52         },         {           description="",           name="copy_large_opened_item",           order=53         },         {           description="",           name="copy_opened_blueprint",           order=54         },         {           description="",           name="copy_opened_item",           order=55         },         {           description="",           name="craft",           order=56         },         {           description="",           name="create_space_platform",           order=57         },         {           description="",           name="cursor_split",           order=58         },         {           description="",           name="cursor_transfer",           order=59         },         {           description="",           name="custom_input",           order=60         },         {           description="",           name="cycle_blueprint_book_backwards",           order=61         },         {           description="",           name="cycle_blueprint_book_forwards",           order=62         },         {           description="",           name="cycle_quality_down",           order=63         },         {           description="",           name="cycle_quality_up",           order=64         },         {           description="",           name="deconstruct",           order=65         },         {           description="",           name="delete_blueprint_library",           order=66         },         {           description="",           name="delete_blueprint_record",           order=67         },         {           description="",           name="delete_custom_tag",           order=68         },         {           description="",           name="delete_logistic_group",           order=69         },         {           description="",           name="delete_permission_group",           order=70         },         {           description="",           name="delete_space_platform",           order=71         },         {           description="",           name="destroy_item",           order=72         },         {           description="",           name="destroy_opened_item",           order=73         },         {           description="",           name="disconnect_rolling_stock",           order=74         },         {           description="",           name="drag_decider_combinator_condition",           order=75         },         {           description="",           name="drag_decider_combinator_output",           order=76         },         {           description="",           name="drag_train_schedule",           order=77         },         {           description="",           name="drag_train_schedule_interrupt",           order=78         },         {           description="",           name="drag_train_wait_condition",           order=79         },         {           description="",           name="drop_blueprint_record",           order=80         },         {           description="",           name="drop_item",           order=81         },         {           description="",           name="edit_blueprint_tool_preview",           order=82         },         {           description="",           name="edit_custom_tag",           order=83         },         {           description="",           name="edit_display_panel",           order=84         },         {           description="",           name="edit_display_panel_always_show",           order=85         },         {           description="",           name="edit_display_panel_icon",           order=86         },         {           description="",           name="edit_display_panel_parameters",           order=87         },         {           description="",           name="edit_display_panel_show_in_chart",           order=88         },         {           description="",           name="edit_interrupt",           order=89         },         {           description="",           name="edit_permission_group",           order=90         },         {           description="",           name="edit_pin",           order=91         },         {           description="",           name="export_blueprint",           order=92         },         {           description="",           name="fast_entity_split",           order=93         },         {           description="",           name="fast_entity_transfer",           order=94         },         {           description="",           name="flip_entity",           order=95         },         {           description="",           name="flush_opened_entity_fluid",           order=96         },         {           description="",           name="flush_opened_entity_specific_fluid",           order=97         },         {           description="",           name="go_to_train_station",           order=98         },         {           description="",           name="grab_blueprint_record",           order=99         },         {           description="",           name="gui_checked_state_changed",           order=100         },         {           description="",           name="gui_click",           order=101         },         {           description="",           name="gui_confirmed",           order=102         },         {           description="",           name="gui_elem_changed",           order=103         },         {           description="",           name="gui_hover",           order=104         },         {           description="",           name="gui_leave",           order=105         },         {           description="",           name="gui_location_changed",           order=106         },         {           description="",           name="gui_selected_tab_changed",           order=107         },         {           description="",           name="gui_selection_state_changed",           order=108         },         {           description="",           name="gui_switch_state_changed",           order=109         },         {           description="",           name="gui_text_changed",           order=110         },         {           description="",           name="gui_value_changed",           order=111         },         {           description="",           name="import_blueprint",           order=112         },         {           description="",           name="import_blueprint_string",           order=113         },         {           description="",           name="import_blueprints_filtered",           order=114         },         {           description="",           name="import_permissions_string",           order=115         },         {           description="",           name="instantly_create_space_platform",           order=116         },         {           description="",           name="inventory_split",           order=117         },         {           description="",           name="inventory_transfer",           order=118         },         {           description="",           name="land_at_planet",           order=119         },         {           description="",           name="launch_rocket",           order=120         },         {           description="",           name="lua_shortcut",           order=121         },         {           description="",           name="map_editor_action",           order=122         },         {           description="",           name="market_offer",           order=123         },         {           description="",           name="mod_settings_changed",           order=124         },         {           description="",           name="modify_decider_combinator_condition",           order=125         },         {           description="",           name="modify_decider_combinator_output",           order=126         },         {           description="",           name="move_pin",           order=127         },         {           description="",           name="move_research",           order=128         },         {           description="",           name="open_achievements_gui",           order=129         },         {           description="",           name="open_blueprint_library_gui",           order=130         },         {           description="",           name="open_blueprint_record",           order=131         },         {           description="",           name="open_bonus_gui",           order=132         },         {           description="",           name="open_character_gui",           order=133         },         {           description="",           name="open_current_vehicle_gui",           order=134         },         {           description="",           name="open_equipment",           order=135         },         {           description="",           name="open_global_electric_network_gui",           order=136         },         {           description="",           name="open_gui",           order=137         },         {           description="",           name="open_item",           order=138         },         {           description="",           name="open_logistics_gui",           order=139         },         {           description="",           name="open_mod_item",           order=140         },         {           description="",           name="open_new_platform_button_from_rocket_silo",           order=141         },         {           description="",           name="open_opened_entity_grid",           order=142         },         {           description="",           name="open_parent_of_opened_item",           order=143         },         {           description="",           name="open_production_gui",           order=144         },         {           description="",           name="open_train_gui",           order=145         },         {           description="",           name="open_train_station_gui",           order=146         },         {           description="",           name="open_trains_gui",           order=147         },         {           description="",           name="parametrise_blueprint",           order=148         },         {           description="",           name="paste_entity_settings",           order=149         },         {           description="",           name="pin_alert_group",           order=150         },         {           description="",           name="pin_custom_alert",           order=151         },         {           description="",           name="pin_search_result",           order=152         },         {           description="",           name="pipette",           order=153         },         {           description="",           name="place_equipment",           order=154         },         {           description="",           name="quick_bar_pick_slot",           order=155         },         {           description="",           name="quick_bar_set_selected_page",           order=156         },         {           description="",           name="quick_bar_set_slot",           order=157         },         {           description="",           name="reassign_blueprint",           order=158         },         {           description="",           name="redo",           order=159         },         {           description="",           name="remote_view_entity",           order=160         },         {           description="",           name="remote_view_surface",           order=161         },         {           description="",           name="remove_cables",           order=162         },         {           description="",           name="remove_decider_combinator_condition",           order=163         },         {           description="",           name="remove_decider_combinator_output",           order=164         },         {           description="",           name="remove_logistic_section",           order=165         },         {           description="",           name="remove_pin",           order=166         },         {           description="",           name="remove_train_interrupt",           order=167         },         {           description="",           name="remove_train_station",           order=168         },         {           description="",           name="rename_interrupt",           order=169         },         {           description="",           name="rename_space_platform",           order=170         },         {           description="",           name="reorder_logistic_section",           order=171         },         {           description="",           name="request_missing_construction_materials",           order=172         },         {           description="",           name="reset_assembling_machine",           order=173         },         {           description="",           name="reverse_select_area",           order=174         },         {           description="",           name="rotate_entity",           order=175         },         {           description="",           name="select_area",           order=176         },         {           description="",           name="select_asteroid_chunk_slot",           order=177         },         {           description="",           name="select_blueprint_entities",           order=178         },         {           description="",           name="select_entity_filter_slot",           order=179         },         {           description="",           name="select_entity_slot",           order=180         },         {           description="",           name="select_item_filter",           order=181         },         {           description="",           name="select_mapper_slot_from",           order=182         },         {           description="",           name="select_mapper_slot_to",           order=183         },         {           description="",           name="select_next_valid_gun",           order=184         },         {           description="",           name="select_tile_slot",           order=185         },         {           description="",           name="send_spidertron",           order=186         },         {           description="",           name="send_stack_to_trash",           order=187         },         {           description="",           name="send_stacks_to_trash",           order=188         },         {           description="",           name="send_train_to_pin_target",           order=189         },         {           description="",           name="set_behavior_mode",           order=190         },         {           description="",           name="set_car_weapons_control",           order=191         },         {           description="",           name="set_cheat_mode_quality",           order=192         },         {           description="",           name="set_circuit_condition",           order=193         },         {           description="",           name="set_circuit_mode_of_operation",           order=194         },         {           description="",           name="set_combinator_description",           order=195         },         {           description="",           name="set_copy_color_from_train_stop",           order=196         },         {           description="",           name="set_deconstruction_item_tile_selection_mode",           order=197         },         {           description="",           name="set_deconstruction_item_trees_and_rocks_only",           order=198         },         {           description="",           name="set_entity_color",           order=199         },         {           description="",           name="set_entity_energy_property",           order=200         },         {           description="",           name="set_filter",           order=201         },         {           description="",           name="set_ghost_cursor",           order=202         },         {           description="",           name="set_heat_interface_mode",           order=203         },         {           description="",           name="set_heat_interface_temperature",           order=204         },         {           description="",           name="set_infinity_container_filter_item",           order=205         },         {           description="",           name="set_infinity_container_remove_unfiltered_items",           order=206         },         {           description="",           name="set_infinity_pipe_filter",           order=207         },         {           description="",           name="set_inserter_max_stack_size",           order=208         },         {           description="",           name="set_inventory_bar",           order=209         },         {           description="",           name="set_lamp_always_on",           order=210         },         {           description="",           name="set_linked_container_link_i_d",           order=211         },         {           description="",           name="set_loader_belt_stack_size_override",           order=212         },         {           description="",           name="set_logistic_filter_item",           order=213         },         {           description="",           name="set_logistic_network_name",           order=214         },         {           description="",           name="set_logistic_section_active",           order=215         },         {           description="",           name="set_player_color",           order=216         },         {           description="",           name="set_pump_fluid_filter",           order=217         },         {           description="",           name="set_request_from_buffers",           order=218         },         {           description="",           name="set_research_finished_stops_game",           order=219         },         {           description="",           name="set_rocket_silo_send_to_orbit_automated_mode",           order=220         },         {           description="",           name="set_schedule_record_allow_unloading",           order=221         },         {           description="",           name="set_signal",           order=222         },         {           description="",           name="set_splitter_priority",           order=223         },         {           description="",           name="set_spoil_priority",           order=224         },         {           description="",           name="set_train_stop_priority",           order=225         },         {           description="",           name="set_train_stopped",           order=226         },         {           description="",           name="set_trains_limit",           order=227         },         {           description="",           name="set_turret_ignore_unlisted",           order=228         },         {           description="",           name="set_use_inserter_filters",           order=229         },         {           description="",           name="set_vehicle_automatic_targeting_parameters",           order=230         },         {           description="",           name="setup_assembling_machine",           order=231         },         {           description="",           name="setup_blueprint",           order=232         },         {           description="",           name="setup_single_blueprint_record",           order=233         },         {           description="",           name="spawn_item",           order=234         },         {           description="",           name="spectator_change_surface",           order=235         },         {           description="",           name="stack_split",           order=236         },         {           description="",           name="stack_transfer",           order=237         },         {           description="",           name="start_repair",           order=238         },         {           description="",           name="start_research",           order=239         },         {           description="",           name="start_walking",           order=240         },         {           description="",           name="stop_drag_build",           order=241         },         {           description="",           name="swap_asteroid_chunk_slots",           order=242         },         {           description="",           name="swap_entity_filter_slots",           order=243         },         {           description="",           name="swap_entity_slots",           order=244         },         {           description="",           name="swap_infinity_container_filter_items",           order=245         },         {           description="",           name="swap_item_filters",           order=246         },         {           description="",           name="swap_logistic_filter_items",           order=247         },         {           description="",           name="swap_mappers",           order=248         },         {           description="",           name="swap_tile_slots",           order=249         },         {           description="",           name="switch_connect_to_logistic_network",           order=250         },         {           description="",           name="switch_constant_combinator_state",           order=251         },         {           description="",           name="switch_inserter_filter_mode_state",           order=252         },         {           description="",           name="switch_loader_filter_mode",           order=253         },         {           description="",           name="switch_mining_drill_filter_mode_state",           order=254         },         {           description="",           name="switch_power_switch_state",           order=255         },         {           description="",           name="take_equipment",           order=256         },         {           description="",           name="toggle_artillery_auto_targeting",           order=257         },         {           description="",           name="toggle_deconstruction_item_entity_filter_mode",           order=258         },         {           description="",           name="toggle_deconstruction_item_tile_filter_mode",           order=259         },         {           description="",           name="toggle_driving",           order=260         },         {           description="",           name="toggle_enable_vehicle_logistics_while_moving",           order=261         },         {           description="",           name="toggle_entity_logistic_requests",           order=262         },         {           description="",           name="toggle_equipment_movement_bonus",           order=263         },         {           description="",           name="toggle_map_editor",           order=264         },         {           description="",           name="toggle_personal_logistic_requests",           order=265         },         {           description="",           name="toggle_personal_roboport",           order=266         },         {           description="",           name="toggle_selected_entity",           order=267         },         {           description="",           name="toggle_show_entity_info",           order=268         },         {           description="",           name="translate_string",           order=269         },         {           description="",           name="trash_not_requested_items",           order=270         },         {           description="",           name="undo",           order=271         },         {           description="",           name="upgrade",           order=272         },         {           description="",           name="upgrade_opened_blueprint_by_item",           order=273         },         {           description="",           name="upgrade_opened_blueprint_by_record",           order=274         },         {           description="",           name="use_item",           order=275         },         {           description="",           name="wire_dragging",           order=276         },         {           description="",           name="write_to_console",           order=277         }       }     },     {       description="",       name="input_method",       order=25,       values={         {           description="",           name="game_controller",           order=1         },         {           description="",           name="keyboard_and_mouse",           order=0         }       }     },     {       description="",       name="inventory",       order=26,       values={         {           description="",           name="agricultural_tower_input",           order=56         },         {           description="",           name="agricultural_tower_output",           order=57         },         {           description="",           name="artillery_turret_ammo",           order=46         },         {           description="",           name="artillery_wagon_ammo",           order=47         },         {           description="Used for ejected items, or items held by inserters that can't be inserted due the recipe being changed with the circuit network.",           name="assembling_machine_dump",           order=26         },         {           description="Deprecated, replaced by `\"crafter_input\"`.",           name="assembling_machine_input",           order=23         },         {           description="Deprecated, replaced by `\"crafter_modules\"`.",           name="assembling_machine_modules",           order=25         },         {           description="Deprecated, replaced by `\"crafter_output\"`.",           name="assembling_machine_output",           order=24         },         {           description="Deprecated, replaced by `\"crafter_trash\"`.",           name="assembling_machine_trash",           order=27         },         {           description="",           name="asteroid_collector_arm",           order=64         },         {           description="",           name="asteroid_collector_output",           order=63         },         {           description="",           name="beacon_modules",           order=44         },         {           description="",           name="burnt_result",           order=1         },         {           description="",           name="car_ammo",           order=40         },         {           description="",           name="car_trash",           order=41         },         {           description="",           name="car_trunk",           order=39         },         {           description="",           name="cargo_landing_pad_main",           order=53         },         {           description="",           name="cargo_landing_pad_trash",           order=54         },         {           description="",           name="cargo_unit",           order=38         },         {           description="",           name="cargo_wagon",           order=42         },         {           description="",           name="character_ammo",           order=10         },         {           description="",           name="character_armor",           order=11         },         {           description="",           name="character_corpse",           order=45         },         {           description="",           name="character_guns",           order=9         },         {           description="",           name="character_main",           order=8         },         {           description="",           name="character_trash",           order=13         },         {           description="",           name="character_vehicle",           order=12         },         {           description="",           name="chest",           order=2         },         {           description="",           name="crafter_input",           order=59         },         {           description="",           name="crafter_modules",           order=61         },         {           description="",           name="crafter_output",           order=60         },         {           description="Used for spoil result items that do not fit into the recipe slots, and for items that are ejected when changing the recipe via remote view.",           name="crafter_trash",           order=62         },         {           description="",           name="editor_ammo",           order=17         },         {           description="",           name="editor_armor",           order=18         },         {           description="",           name="editor_guns",           order=16         },         {           description="",           name="editor_main",           order=15         },         {           description="",           name="fuel",           order=0         },         {           description="Deprecated, replaced by `\"crafter_modules\"`.",           name="furnace_modules",           order=6         },         {           description="Deprecated, replaced by `\"crafter_output\"`.",           name="furnace_result",           order=5         },         {           description="Deprecated, replaced by `\"crafter_input\"`.",           name="furnace_source",           order=4         },         {           description="Deprecated, replaced by `\"crafter_trash\"`.",           name="furnace_trash",           order=7         },         {           description="",           name="god_main",           order=14         },         {           description="",           name="hub_main",           order=51         },         {           description="",           name="hub_trash",           order=52         },         {           description="",           name="item_main",           order=32         },         {           description="",           name="lab_input",           order=28         },         {           description="",           name="lab_modules",           order=29         },         {           description="",           name="lab_trash",           order=30         },         {           description="",           name="linked_container_main",           order=58         },         {           description="",           name="logistic_container_trash",           order=3         },         {           description="",           name="mining_drill_modules",           order=31         },         {           description="",           name="proxy_main",           order=55         },         {           description="",           name="roboport_material",           order=20         },         {           description="",           name="roboport_robot",           order=19         },         {           description="",           name="robot_cargo",           order=21         },         {           description="",           name="robot_repair",           order=22         },         {           description="Deprecated, replaced by `\"crafter_input\"`.",           name="rocket_silo_input",           order=35         },         {           description="Deprecated, replaced by `\"crafter_modules\"`.",           name="rocket_silo_modules",           order=37         },         {           description="Deprecated, replaced by `\"crafter_output\"`.",           name="rocket_silo_output",           order=36         },         {           description="",           name="rocket_silo_rocket",           order=33         },         {           description="",           name="rocket_silo_trash",           order=34         },         {           description="",           name="spider_ammo",           order=49         },         {           description="",           name="spider_trash",           order=50         },         {           description="",           name="spider_trunk",           order=48         },         {           description="",           name="turret_ammo",           order=43         }       }     },     {       description="",       name="logistic_group_type",       order=27,       values={         {           description="",           name="roboport",           order=1         },         {           description="",           name="with_trash",           order=0         }       }     },     {       description="",       name="logistic_member_index",       order=28,       values={         {           description="",           name="car_provider",           order=10         },         {           description="",           name="car_requester",           order=9         },         {           description="",           name="character_provider",           order=5         },         {           description="",           name="character_requester",           order=3         },         {           description="",           name="character_storage",           order=4         },         {           description="",           name="generic_on_off_behavior",           order=6         },         {           description="",           name="logistic_container",           order=0         },         {           description="",           name="logistic_container_trash_provider",           order=1         },         {           description="",           name="roboport_provider",           order=11         },         {           description="",           name="roboport_requester",           order=12         },         {           description="",           name="rocket_silo_provider",           order=13         },         {           description="",           name="rocket_silo_requester",           order=14         },         {           description="",           name="rocket_silo_trash_provider",           order=15         },         {           description="",           name="space_platform_hub_provider",           order=17         },         {           description="",           name="space_platform_hub_requester",           order=16         },         {           description="",           name="spidertron_provider",           order=8         },         {           description="",           name="spidertron_requester",           order=7         },         {           description="",           name="vehicle_storage",           order=2         }       }     },     {       description="",       name="logistic_mode",       order=29,       values={         {           description="",           name="active_provider",           order=1         },         {           description="",           name="buffer",           order=5         },         {           description="",           name="none",           order=0         },         {           description="",           name="passive_provider",           order=4         },         {           description="",           name="requester",           order=3         },         {           description="",           name="storage",           order=2         }       }     },     {       description="",       name="logistic_section_type",       order=30,       values={         {           description="",           name="circuit_controlled",           order=1         },         {           description="",           name="manual",           order=0         },         {           description="Used by space platform hubs.",           name="request_missing_materials_controlled",           order=3         },         {           description="Used by rocket silos.",           name="transitional_request_controlled",           order=2         }       }     },     {       description="",       name="mouse_button_type",       order=31,       values={         {           description="",           name="left",           order=1         },         {           description="",           name="middle",           order=3         },         {           description="",           name="none",           order=0         },         {           description="",           name="right",           order=2         }       }     },     {       description="",       name="moving_state",       order=32,       values={         {           description="",           name="adaptive",           order=2         },         {           description="",           name="moving",           order=1         },         {           description="",           name="stale",           order=0         },         {           description="",           name="stuck",           order=3         }       }     },     {       description="",       name="print_skip",       order=33,       values={         {           description="Print will be skipped if same text was recently printed (within last 60 ticks). Used by most game messages.",           name="if_redundant",           order=1         },         {           description="Print will be skipped if same text is still visible (printed within last 1152 ticks). Used by some notifications.",           name="if_visible",           order=2         },         {           description="Print will not be skipped.",           name="never",           order=0         }       }     },     {       description="",       name="print_sound",       order=34,       values={         {           description="",           name="always",           order=0         },         {           description="",           name="never",           order=1         },         {           description="",           name="use_player_settings",           order=2         }       }     },     {       description="This define describes all top-level prototypes and their associated subtypes. It is organized as a lookup table, meaning the values of all the defines is `0`. As an example, `defines.prototypes['entity']` looks like `{furnace=0, inserter=0, container=0, ...}`.",       name="prototypes",       order=35,       subkeys={         {           description="",           name="achievement",           order=0,           values={             {               description="",               name="achievement",               order=0             },             {               description="",               name="build-entity-achievement",               order=1             },             {               description="",               name="change-surface-achievement",               order=2             },             {               description="",               name="combat-robot-count-achievement",               order=3             },             {               description="",               name="complete-objective-achievement",               order=4             },             {               description="",               name="construct-with-robots-achievement",               order=5             },             {               description="",               name="create-platform-achievement",               order=6             },             {               description="",               name="deconstruct-with-robots-achievement",               order=7             },             {               description="",               name="deliver-by-robots-achievement",               order=8             },             {               description="",               name="deplete-resource-achievement",               order=9             },             {               description="",               name="destroy-cliff-achievement",               order=10             },             {               description="",               name="dont-build-entity-achievement",               order=11             },             {               description="",               name="dont-craft-manually-achievement",               order=12             },             {               description="",               name="dont-kill-manually-achievement",               order=13             },             {               description="",               name="dont-research-before-researching-achievement",               order=14             },             {               description="",               name="dont-use-entity-in-energy-production-achievement",               order=15             },             {               description="",               name="equip-armor-achievement",               order=16             },             {               description="",               name="group-attack-achievement",               order=17             },             {               description="",               name="kill-achievement",               order=18             },             {               description="",               name="module-transfer-achievement",               order=19             },             {               description="",               name="place-equipment-achievement",               order=20             },             {               description="",               name="player-damaged-achievement",               order=21             },             {               description="",               name="produce-achievement",               order=22             },             {               description="",               name="produce-per-hour-achievement",               order=23             },             {               description="",               name="research-achievement",               order=24             },             {               description="",               name="research-with-science-pack-achievement",               order=25             },             {               description="",               name="shoot-achievement",               order=26             },             {               description="",               name="space-connection-distance-traveled-achievement",               order=27             },             {               description="",               name="train-path-achievement",               order=28             },             {               description="",               name="use-entity-in-energy-production-achievement",               order=29             },             {               description="",               name="use-item-achievement",               order=30             }           }         },         {           description="",           name="active-trigger",           order=1,           values={             {               description="",               name="chain-active-trigger",               order=0             },             {               description="",               name="delayed-active-trigger",               order=1             }           }         },         {           description="",           name="airborne-pollutant",           order=2,           values={             {               description="",               name="airborne-pollutant",               order=0             }           }         },         {           description="",           name="ambient-sound",           order=3,           values={             {               description="",               name="ambient-sound",               order=0             }           }         },         {           description="",           name="ammo-category",           order=4,           values={             {               description="",               name="ammo-category",               order=0             }           }         },         {           description="",           name="animation",           order=5,           values={             {               description="",               name="animation",               order=0             }           }         },         {           description="",           name="asteroid-chunk",           order=6,           values={             {               description="",               name="asteroid-chunk",               order=0             }           }         },         {           description="",           name="autoplace-control",           order=7,           values={             {               description="",               name="autoplace-control",               order=0             }           }         },         {           description="",           name="burner-usage",           order=8,           values={             {               description="",               name="burner-usage",               order=0             }           }         },         {           description="",           name="collision-layer",           order=9,           values={             {               description="",               name="collision-layer",               order=0             }           }         },         {           description="",           name="custom-event",           order=10,           values={             {               description="",               name="custom-event",               order=0             }           }         },         {           description="",           name="custom-input",           order=11,           values={             {               description="",               name="custom-input",               order=0             }           }         },         {           description="",           name="damage-type",           order=12,           values={             {               description="",               name="damage-type",               order=0             }           }         },         {           description="",           name="decorative",           order=13,           values={             {               description="",               name="optimized-decorative",               order=0             }           }         },         {           description="",           name="deliver-category",           order=14,           values={             {               description="",               name="deliver-category",               order=0             }           }         },         {           description="",           name="deliver-impact-combination",           order=15,           values={             {               description="",               name="deliver-impact-combination",               order=0             }           }         },         {           description="",           name="editor-controller",           order=16,           values={             {               description="",               name="editor-controller",               order=0             }           }         },         {           description="",           name="entity",           order=17,           values={             {               description="",               name="accumulator",               order=0             },             {               description="",               name="agricultural-tower",               order=1             },             {               description="",               name="ammo-turret",               order=2             },             {               description="",               name="arithmetic-combinator",               order=3             },             {               description="",               name="arrow",               order=4             },             {               description="",               name="artillery-flare",               order=5             },             {               description="",               name="artillery-projectile",               order=6             },             {               description="",               name="artillery-turret",               order=7             },             {               description="",               name="artillery-wagon",               order=8             },             {               description="",               name="assembling-machine",               order=9             },             {               description="",               name="asteroid",               order=10             },             {               description="",               name="asteroid-collector",               order=11             },             {               description="",               name="beacon",               order=12             },             {               description="",               name="beam",               order=13             },             {               description="",               name="boiler",               order=14             },             {               description="",               name="burner-generator",               order=15             },             {               description="",               name="capture-robot",               order=16             },             {               description="",               name="car",               order=17             },             {               description="",               name="cargo-bay",               order=18             },             {               description="",               name="cargo-landing-pad",               order=19             },             {               description="",               name="cargo-pod",               order=20             },             {               description="",               name="cargo-wagon",               order=21             },             {               description="",               name="character",               order=22             },             {               description="",               name="character-corpse",               order=23             },             {               description="",               name="cliff",               order=24             },             {               description="",               name="combat-robot",               order=25             },             {               description="",               name="constant-combinator",               order=26             },             {               description="",               name="construction-robot",               order=27             },             {               description="",               name="container",               order=28             },             {               description="",               name="corpse",               order=29             },             {               description="",               name="curved-rail-a",               order=30             },             {               description="",               name="curved-rail-b",               order=31             },             {               description="",               name="decider-combinator",               order=32             },             {               description="",               name="deconstructible-tile-proxy",               order=33             },             {               description="",               name="display-panel",               order=34             },             {               description="",               name="electric-energy-interface",               order=35             },             {               description="",               name="electric-pole",               order=36             },             {               description="",               name="electric-turret",               order=37             },             {               description="",               name="elevated-curved-rail-a",               order=38             },             {               description="",               name="elevated-curved-rail-b",               order=39             },             {               description="",               name="elevated-half-diagonal-rail",               order=40             },             {               description="",               name="elevated-straight-rail",               order=41             },             {               description="",               name="entity-ghost",               order=42             },             {               description="",               name="explosion",               order=43             },             {               description="",               name="fire",               order=44             },             {               description="",               name="fish",               order=45             },             {               description="",               name="fluid-turret",               order=46             },             {               description="",               name="fluid-wagon",               order=47             },             {               description="",               name="furnace",               order=48             },             {               description="",               name="fusion-generator",               order=49             },             {               description="",               name="fusion-reactor",               order=50             },             {               description="",               name="gate",               order=51             },             {               description="",               name="generator",               order=52             },             {               description="",               name="half-diagonal-rail",               order=53             },             {               description="",               name="heat-interface",               order=54             },             {               description="",               name="heat-pipe",               order=55             },             {               description="",               name="highlight-box",               order=56             },             {               description="",               name="infinity-cargo-wagon",               order=57             },             {               description="",               name="infinity-container",               order=58             },             {               description="",               name="infinity-pipe",               order=59             },             {               description="",               name="inserter",               order=60             },             {               description="",               name="item-entity",               order=61             },             {               description="",               name="item-request-proxy",               order=62             },             {               description="",               name="lab",               order=63             },             {               description="",               name="lamp",               order=64             },             {               description="",               name="land-mine",               order=65             },             {               description="",               name="lane-splitter",               order=66             },             {               description="",               name="legacy-curved-rail",               order=67             },             {               description="",               name="legacy-straight-rail",               order=68             },             {               description="",               name="lightning",               order=69             },             {               description="",               name="lightning-attractor",               order=70             },             {               description="",               name="linked-belt",               order=71             },             {               description="",               name="linked-container",               order=72             },             {               description="",               name="loader",               order=73             },             {               description="",               name="loader-1x1",               order=74             },             {               description="",               name="locomotive",               order=75             },             {               description="",               name="logistic-container",               order=76             },             {               description="",               name="logistic-robot",               order=77             },             {               description="",               name="market",               order=78             },             {               description="",               name="mining-drill",               order=79             },             {               description="",               name="offshore-pump",               order=80             },             {               description="",               name="particle-source",               order=81             },             {               description="",               name="pipe",               order=82             },             {               description="",               name="pipe-to-ground",               order=83             },             {               description="",               name="plant",               order=84             },             {               description="",               name="player-port",               order=85             },             {               description="",               name="power-switch",               order=86             },             {               description="",               name="programmable-speaker",               order=87             },             {               description="",               name="projectile",               order=88             },             {               description="",               name="proxy-container",               order=89             },             {               description="",               name="pump",               order=90             },             {               description="",               name="radar",               order=91             },             {               description="",               name="rail-chain-signal",               order=92             },             {               description="",               name="rail-ramp",               order=93             },             {               description="",               name="rail-remnants",               order=94             },             {               description="",               name="rail-signal",               order=95             },             {               description="",               name="rail-support",               order=96             },             {               description="",               name="reactor",               order=97             },             {               description="",               name="resource",               order=98             },             {               description="",               name="roboport",               order=99             },             {               description="",               name="rocket-silo",               order=100             },             {               description="",               name="rocket-silo-rocket",               order=101             },             {               description="",               name="rocket-silo-rocket-shadow",               order=102             },             {               description="",               name="segment",               order=103             },             {               description="",               name="segmented-unit",               order=104             },             {               description="",               name="selector-combinator",               order=105             },             {               description="",               name="simple-entity",               order=106             },             {               description="",               name="simple-entity-with-force",               order=107             },             {               description="",               name="simple-entity-with-owner",               order=108             },             {               description="",               name="smoke-with-trigger",               order=109             },             {               description="",               name="solar-panel",               order=110             },             {               description="",               name="space-platform-hub",               order=111             },             {               description="",               name="speech-bubble",               order=112             },             {               description="",               name="spider-leg",               order=113             },             {               description="",               name="spider-unit",               order=114             },             {               description="",               name="spider-vehicle",               order=115             },             {               description="",               name="splitter",               order=116             },             {               description="",               name="sticker",               order=117             },             {               description="",               name="storage-tank",               order=118             },             {               description="",               name="straight-rail",               order=119             },             {               description="",               name="stream",               order=120             },             {               description="",               name="temporary-container",               order=121             },             {               description="",               name="thruster",               order=122             },             {               description="",               name="tile-ghost",               order=123             },             {               description="",               name="train-stop",               order=124             },             {               description="",               name="transport-belt",               order=125             },             {               description="",               name="tree",               order=126             },             {               description="",               name="turret",               order=127             },             {               description="",               name="underground-belt",               order=128             },             {               description="",               name="unit",               order=129             },             {               description="",               name="unit-spawner",               order=130             },             {               description="",               name="valve",               order=131             },             {               description="",               name="wall",               order=132             }           }         },         {           description="",           name="equipment",           order=18,           values={             {               description="",               name="active-defense-equipment",               order=0             },             {               description="",               name="battery-equipment",               order=1             },             {               description="",               name="belt-immunity-equipment",               order=2             },             {               description="",               name="energy-shield-equipment",               order=3             },             {               description="",               name="equipment-ghost",               order=4             },             {               description="",               name="generator-equipment",               order=5             },             {               description="",               name="inventory-bonus-equipment",               order=6             },             {               description="",               name="movement-bonus-equipment",               order=7             },             {               description="",               name="night-vision-equipment",               order=8             },             {               description="",               name="roboport-equipment",               order=9             },             {               description="",               name="solar-panel-equipment",               order=10             }           }         },         {           description="",           name="equipment-category",           order=19,           values={             {               description="",               name="equipment-category",               order=0             }           }         },         {           description="",           name="equipment-grid",           order=20,           values={             {               description="",               name="equipment-grid",               order=0             }           }         },         {           description="",           name="fluid",           order=21,           values={             {               description="",               name="fluid",               order=0             }           }         },         {           description="",           name="font",           order=22,           values={             {               description="",               name="font",               order=0             }           }         },         {           description="",           name="fuel-category",           order=23,           values={             {               description="",               name="fuel-category",               order=0             }           }         },         {           description="",           name="god-controller",           order=24,           values={             {               description="",               name="god-controller",               order=0             }           }         },         {           description="",           name="gui-style",           order=25,           values={             {               description="",               name="gui-style",               order=0             }           }         },         {           description="",           name="impact-category",           order=26,           values={             {               description="",               name="impact-category",               order=0             }           }         },         {           description="",           name="item",           order=27,           values={             {               description="",               name="ammo",               order=0             },             {               description="",               name="armor",               order=1             },             {               description="",               name="blueprint",               order=2             },             {               description="",               name="blueprint-book",               order=3             },             {               description="",               name="capsule",               order=4             },             {               description="",               name="copy-paste-tool",               order=5             },             {               description="",               name="deconstruction-item",               order=6             },             {               description="",               name="gun",               order=7             },             {               description="",               name="item",               order=8             },             {               description="",               name="item-with-entity-data",               order=9             },             {               description="",               name="item-with-inventory",               order=10             },             {               description="",               name="item-with-label",               order=11             },             {               description="",               name="item-with-tags",               order=12             },             {               description="",               name="module",               order=13             },             {               description="",               name="rail-planner",               order=14             },             {               description="",               name="repair-tool",               order=15             },             {               description="",               name="selection-tool",               order=16             },             {               description="",               name="space-platform-starter-pack",               order=17             },             {               description="",               name="spidertron-remote",               order=18             },             {               description="",               name="tool",               order=19             },             {               description="",               name="upgrade-item",               order=20             }           }         },         {           description="",           name="item-group",           order=28,           values={             {               description="",               name="item-group",               order=0             }           }         },         {           description="",           name="item-subgroup",           order=29,           values={             {               description="",               name="item-subgroup",               order=0             }           }         },         {           description="",           name="map-gen-presets",           order=30,           values={             {               description="",               name="map-gen-presets",               order=0             }           }         },         {           description="",           name="map-settings",           order=31,           values={             {               description="",               name="map-settings",               order=0             }           }         },         {           description="",           name="mod-data",           order=32,           values={             {               description="",               name="mod-data",               order=0             }           }         },         {           description="",           name="module-category",           order=33,           values={             {               description="",               name="module-category",               order=0             }           }         },         {           description="",           name="mouse-cursor",           order=34,           values={             {               description="",               name="mouse-cursor",               order=0             }           }         },         {           description="",           name="noise-expression",           order=35,           values={             {               description="",               name="noise-expression",               order=0             }           }         },         {           description="",           name="noise-function",           order=36,           values={             {               description="",               name="noise-function",               order=0             }           }         },         {           description="",           name="particle",           order=37,           values={             {               description="",               name="optimized-particle",               order=0             }           }         },         {           description="",           name="procession",           order=38,           values={             {               description="",               name="procession",               order=0             }           }         },         {           description="",           name="procession-layer-inheritance-group",           order=39,           values={             {               description="",               name="procession-layer-inheritance-group",               order=0             }           }         },         {           description="",           name="quality",           order=40,           values={             {               description="",               name="quality",               order=0             }           }         },         {           description="",           name="recipe",           order=41,           values={             {               description="",               name="recipe",               order=0             }           }         },         {           description="",           name="recipe-category",           order=42,           values={             {               description="",               name="recipe-category",               order=0             }           }         },         {           description="",           name="remote-controller",           order=43,           values={             {               description="",               name="remote-controller",               order=0             }           }         },         {           description="",           name="resource-category",           order=44,           values={             {               description="",               name="resource-category",               order=0             }           }         },         {           description="",           name="shortcut",           order=45,           values={             {               description="",               name="shortcut",               order=0             }           }         },         {           description="",           name="sound",           order=46,           values={             {               description="",               name="sound",               order=0             }           }         },         {           description="",           name="space-connection",           order=47,           values={             {               description="",               name="space-connection",               order=0             }           }         },         {           description="",           name="space-location",           order=48,           values={             {               description="",               name="planet",               order=0             },             {               description="",               name="space-location",               order=1             }           }         },         {           description="",           name="spectator-controller",           order=49,           values={             {               description="",               name="spectator-controller",               order=0             }           }         },         {           description="",           name="sprite",           order=50,           values={             {               description="",               name="sprite",               order=0             }           }         },         {           description="",           name="surface",           order=51,           values={             {               description="",               name="surface",               order=0             }           }         },         {           description="",           name="surface-property",           order=52,           values={             {               description="",               name="surface-property",               order=0             }           }         },         {           description="",           name="technology",           order=53,           values={             {               description="",               name="technology",               order=0             }           }         },         {           description="",           name="tile",           order=54,           values={             {               description="",               name="tile",               order=0             }           }         },         {           description="",           name="tile-effect",           order=55,           values={             {               description="",               name="tile-effect",               order=0             }           }         },         {           description="",           name="tips-and-tricks-item",           order=56,           values={             {               description="",               name="tips-and-tricks-item",               order=0             }           }         },         {           description="",           name="tips-and-tricks-item-category",           order=57,           values={             {               description="",               name="tips-and-tricks-item-category",               order=0             }           }         },         {           description="",           name="trigger-target-type",           order=58,           values={             {               description="",               name="trigger-target-type",               order=0             }           }         },         {           description="",           name="trivial-smoke",           order=59,           values={             {               description="",               name="trivial-smoke",               order=0             }           }         },         {           description="",           name="tutorial",           order=60,           values={             {               description="",               name="tutorial",               order=0             }           }         },         {           description="",           name="utility-constants",           order=61,           values={             {               description="",               name="utility-constants",               order=0             }           }         },         {           description="",           name="utility-sounds",           order=62,           values={             {               description="",               name="utility-sounds",               order=0             }           }         },         {           description="",           name="utility-sprites",           order=63,           values={             {               description="",               name="utility-sprites",               order=0             }           }         },         {           description="",           name="virtual-signal",           order=64,           values={             {               description="",               name="virtual-signal",               order=0             }           }         }       }     },     {       description="",       name="rail_connection_direction",       order=36,       values={         {           description="",           name="left",           order=0         },         {           description="",           name="none",           order=3         },         {           description="",           name="right",           order=2         },         {           description="",           name="straight",           order=1         }       }     },     {       description="",       name="rail_direction",       order=37,       values={         {           description="",           name="back",           order=1         },         {           description="",           name="front",           order=0         }       }     },     {       description="",       name="rail_layer",       order=38,       values={         {           description="",           name="elevated",           order=1         },         {           description="",           name="ground",           order=0         }       }     },     {       description="",       name="relative_gui_position",       order=39,       values={         {           description="",           name="bottom",           order=1         },         {           description="",           name="left",           order=2         },         {           description="",           name="right",           order=3         },         {           description="",           name="top",           order=0         }       }     },     {       description="",       name="relative_gui_type",       order=40,       values={         {           description="",           name="accumulator_gui",           order=0         },         {           description="",           name="achievement_gui",           order=1         },         {           description="",           name="additional_entity_info_gui",           order=2         },         {           description="",           name="admin_gui",           order=3         },         {           description="",           name="agriculture_tower_gui",           order=4         },         {           description="",           name="arithmetic_combinator_gui",           order=5         },         {           description="",           name="armor_gui",           order=6         },         {           description="",           name="assembling_machine_gui",           order=7         },         {           description="",           name="assembling_machine_select_recipe_gui",           order=8         },         {           description="",           name="asteroid_collector_gui",           order=9         },         {           description="",           name="beacon_gui",           order=10         },         {           description="",           name="blueprint_book_gui",           order=11         },         {           description="",           name="blueprint_library_gui",           order=12         },         {           description="",           name="blueprint_setup_gui",           order=13         },         {           description="",           name="bonus_gui",           order=14         },         {           description="",           name="burner_equipment_gui",           order=15         },         {           description="",           name="car_gui",           order=16         },         {           description="",           name="cargo_landing_pad_gui",           order=17         },         {           description="",           name="constant_combinator_gui",           order=18         },         {           description="",           name="container_gui",           order=19         },         {           description="",           name="controller_gui",           order=20         },         {           description="",           name="decider_combinator_gui",           order=21         },         {           description="",           name="deconstruction_item_gui",           order=22         },         {           description="",           name="display_panel_gui",           order=23         },         {           description="",           name="electric_energy_interface_gui",           order=24         },         {           description="",           name="electric_network_gui",           order=25         },         {           description="",           name="entity_variations_gui",           order=26         },         {           description="",           name="entity_with_energy_source_gui",           order=27         },         {           description="",           name="equipment_grid_gui",           order=28         },         {           description="",           name="furnace_gui",           order=29         },         {           description="",           name="generic_on_off_entity_gui",           order=30         },         {           description="",           name="ghost_picker_gui",           order=31         },         {           description="",           name="global_electric_network_gui",           order=32         },         {           description="",           name="heat_interface_gui",           order=33         },         {           description="",           name="infinity_pipe_gui",           order=34         },         {           description="",           name="inserter_gui",           order=35         },         {           description="",           name="item_with_inventory_gui",           order=36         },         {           description="",           name="lab_gui",           order=37         },         {           description="",           name="lamp_gui",           order=38         },         {           description="",           name="linked_container_gui",           order=39         },         {           description="",           name="loader_gui",           order=40         },         {           description="",           name="logistic_gui",           order=41         },         {           description="",           name="market_gui",           order=42         },         {           description="",           name="mining_drill_gui",           order=43         },         {           description="",           name="other_player_gui",           order=44         },         {           description="",           name="permissions_gui",           order=45         },         {           description="",           name="pick_stop_gui",           order=46         },         {           description="",           name="pipe_gui",           order=47         },         {           description="",           name="power_switch_gui",           order=48         },         {           description="",           name="production_gui",           order=49         },         {           description="",           name="programmable_speaker_gui",           order=50         },         {           description="",           name="proxy_container_gui",           order=51         },         {           description="",           name="pump_gui",           order=52         },         {           description="",           name="rail_signal_base_gui",           order=53         },         {           description="",           name="reactor_gui",           order=54         },         {           description="",           name="resource_entity_gui",           order=55         },         {           description="",           name="roboport_gui",           order=56         },         {           description="",           name="rocket_silo_gui",           order=57         },         {           description="",           name="script_inventory_gui",           order=58         },         {           description="",           name="selector_combinator_gui",           order=59         },         {           description="",           name="server_config_gui",           order=60         },         {           description="",           name="space_platform_hub_gui",           order=61         },         {           description="",           name="spider_vehicle_gui",           order=62         },         {           description="",           name="splitter_gui",           order=63         },         {           description="",           name="standalone_character_gui",           order=64         },         {           description="",           name="storage_tank_gui",           order=65         },         {           description="",           name="tile_variations_gui",           order=66         },         {           description="",           name="tips_and_tricks_gui",           order=67         },         {           description="",           name="train_gui",           order=68         },         {           description="",           name="train_stop_gui",           order=69         },         {           description="",           name="trains_gui",           order=70         },         {           description="",           name="transport_belt_gui",           order=71         },         {           description="",           name="turret_gui",           order=72         },         {           description="",           name="upgrade_item_gui",           order=73         },         {           description="",           name="wall_gui",           order=74         }       }     },     {       description="",       name="render_mode",       order=41,       values={         {           description="",           name="chart",           order=1         },         {           description="",           name="chart_zoomed_in",           order=2         },         {           description="",           name="game",           order=0         }       }     },     {       description="",       name="rich_text_setting",       order=42,       values={         {           description="",           name="disabled",           order=1         },         {           description="",           name="enabled",           order=0         },         {           description="",           name="highlight",           order=2         }       }     },     {       description="",       name="riding",       order=43,       subkeys={         {           description="",           name="acceleration",           order=0,           values={             {               description="",               name="accelerating",               order=1             },             {               description="",               name="braking",               order=2             },             {               description="",               name="nothing",               order=0             },             {               description="",               name="reversing",               order=3             }           }         },         {           description="",           name="direction",           order=1,           values={             {               description="",               name="left",               order=0             },             {               description="",               name="right",               order=2             },             {               description="",               name="straight",               order=1             }           }         }       }     },     {       description="",       name="robot_order_type",       order=44,       values={         {           description="Construct a ghost.",           name="construct",           order=0         },         {           description="Deconstruct an entity.",           name="deconstruct",           order=4         },         {           description="Deliver an item.",           name="deliver",           order=2         },         {           description="Deliver specific items to an entity (item request proxy).",           name="deliver_items",           order=5         },         {           description="Explode a cliff.",           name="explode_cliff",           order=7         },         {           description="Pickup an item.",           name="pickup",           order=1         },         {           description="Pickup items from an entity (item request proxy).",           name="pickup_items",           order=8         },         {           description="Repair an entity.",           name="repair",           order=3         },         {           description="Upgrade an entity.",           name="upgrade",           order=6         }       }     },     {       description="The various parts of the launch sequence of the rocket silo.",       name="rocket_silo_status",       order=45,       values={         {           description="The next state is `rocket_ready` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",           name="arms_advance",           order=6         },         {           description="The next state is `rocket_flying` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",           name="arms_retract",           order=10         },         {           description="The rocket silo is crafting rocket parts. When there are enough rocket parts, the silo will switch into the `create_rocket` state.",           name="building_rocket",           order=0         },         {           description="The next state is `lights_blinking_open`. The rocket silo rocket entity gets created.",           name="create_rocket",           order=1         },         {           description="The next state is `building_rocket`.",           name="doors_closing",           order=13         },         {           description="The next state is `rocket_rising` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",           name="doors_opened",           order=4         },         {           description="The next state is `doors_opened`. The rocket is getting prepared for launch.",           name="doors_opening",           order=3         },         {           description="The next state is `arms_retract` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",           name="engine_starting",           order=9         },         {           description="The next state is `engine_starting` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",           name="launch_started",           order=14         },         {           description="The next state is `launch_started`.",           name="launch_starting",           order=8         },         {           description="The next state is `doors_closing`.",           name="lights_blinking_close",           order=12         },         {           description="The next state is `doors_opening`. The rocket is getting prepared for launch.",           name="lights_blinking_open",           order=2         },         {           description="The next state is `lights_blinking_close`. The rocket is getting launched.",           name="rocket_flying",           order=11         },         {           description="The rocket launch can be started by the player. When the launch is started, the silo switches into the `launch_starting` state.",           name="rocket_ready",           order=7         },         {           description="The next state is `arms_advance` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",           name="rocket_rising",           order=5         }       }     },     {       description="",       name="selection_mode",       order=46,       values={         {           description="",           name="alt_reverse_select",           order=3         },         {           description="",           name="alt_select",           order=1         },         {           description="",           name="reverse_select",           order=2         },         {           description="",           name="select",           order=0         }       }     },     {       description="",       name="shooting",       order=47,       values={         {           description="",           name="not_shooting",           order=0         },         {           description="",           name="shooting_enemies",           order=1         },         {           description="",           name="shooting_selected",           order=2         }       }     },     {       description="State of an ordinary rail signal.",       name="signal_state",       order=48,       values={         {           description="Red.",           name="closed",           order=1         },         {           description="Green.",           name="open",           order=0         },         {           description="Orange.",           name="reserved",           order=2         },         {           description="Red - From circuit network.",           name="reserved_by_circuit_network",           order=3         }       }     },     {       description="",       name="space_platform_state",       order=49,       values={         {           description="Doesn't have anywhere to go.",           name="no_path",           order=6         },         {           description="Doesn't have any stations in schedule.",           name="no_schedule",           order=5         },         {           description="Following the path.",           name="on_the_path",           order=3         },         {           description="Paused.",           name="paused",           order=8         },         {           description="Starter pack is on the way.",           name="starter_pack_on_the_way",           order=2         },         {           description="Starter pack was requested from the logistics system.",           name="starter_pack_requested",           order=1         },         {           description="Waiting at a station.",           name="waiting_at_station",           order=7         },         {           description="Platform is ready to leave this planet and does not accept deliveries.",           name="waiting_for_departure",           order=4         },         {           description="Waiting for a starter pack.",           name="waiting_for_starter_pack",           order=0         }       }     },     {       description="",       name="target_type",       order=50,       values={         {           description="",           name="cargo_hatch",           order=18         },         {           description="",           name="commandable",           order=15         },         {           description="",           name="custom_chart_tag",           order=16         },         {           description="",           name="entity",           order=0         },         {           description="",           name="equipment",           order=1         },         {           description="",           name="equipment_grid",           order=2         },         {           description="",           name="gui_element",           order=17         },         {           description="",           name="item",           order=3         },         {           description="",           name="logistic_cell",           order=4         },         {           description="",           name="logistic_network",           order=5         },         {           description="",           name="logistic_section",           order=6         },         {           description="",           name="permission_group",           order=7         },         {           description="",           name="planet",           order=8         },         {           description="",           name="player",           order=9         },         {           description="",           name="rail_path",           order=10         },         {           description="",           name="render_object",           order=11         },         {           description="",           name="schedule",           order=19         },         {           description="",           name="space_platform",           order=12         },         {           description="",           name="surface",           order=13         },         {           description="",           name="train",           order=14         }       }     },     {       description="",       name="train_state",       order=51,       values={         {           description="Braking before a rail signal.",           name="arrive_signal",           order=3         },         {           description="Braking before a station.",           name="arrive_station",           order=5         },         {           description="Same as no_path but all candidate train stops are full",           name="destination_full",           order=9         },         {           description="Can move if user explicitly sits in and rides the train.",           name="manual_control",           order=7         },         {           description="Switched to manual control and has to stop.",           name="manual_control_stop",           order=6         },         {           description="Has no path and is stopped.",           name="no_path",           order=2         },         {           description="Doesn't have anywhere to go.",           name="no_schedule",           order=1         },         {           description="Normal state -- following the path.",           name="on_the_path",           order=0         },         {           description="Waiting at a signal.",           name="wait_signal",           order=4         },         {           description="Waiting at a station.",           name="wait_station",           order=8         }       }     },     {       description="",       name="transport_line",       order=52,       values={         {           description="",           name="left_line",           order=0         },         {           description="",           name="left_split_line",           order=6         },         {           description="",           name="left_underground_line",           order=2         },         {           description="",           name="right_line",           order=1         },         {           description="",           name="right_split_line",           order=7         },         {           description="",           name="right_underground_line",           order=3         },         {           description="",           name="secondary_left_line",           order=4         },         {           description="",           name="secondary_left_split_line",           order=8         },         {           description="",           name="secondary_right_line",           order=5         },         {           description="",           name="secondary_right_split_line",           order=9         }       }     },     {       description="",       name="wire_connector_id",       order=53,       values={         {           description="",           name="circuit_green",           order=1         },         {           description="",           name="circuit_red",           order=0         },         {           description="",           name="combinator_input_green",           order=3         },         {           description="",           name="combinator_input_red",           order=2         },         {           description="",           name="combinator_output_green",           order=5         },         {           description="",           name="combinator_output_red",           order=4         },         {           description="",           name="pole_copper",           order=6         },         {           description="",           name="power_switch_left_copper",           order=7         },         {           description="",           name="power_switch_right_copper",           order=8         }       }     },     {       description="",       name="wire_origin",       order=54,       values={         {           description="These wires can be modified by players, scripts, and the game. They are visible to the player if the entity's `draw_circuit_wires` prototype property is set to `true` and both ends of it are on the same surface.",           name="player",           order=0         },         {           description="These wires can only be modified by the game. They are not visible to the player, irrespective of the `draw_circuit_wires` prototype property.",           name="radars",           order=2         },         {           description="These wires can be modified by scripts and the game. They are not visible to the player, irrespective of the `draw_circuit_wires` prototype property.",           name="script",           order=1         }       }     },     {       description="",       name="wire_type",       order=55,       values={         {           description="",           name="copper",           order=2         },         {           description="",           name="green",           order=1         },         {           description="",           name="red",           order=0         }       }     }   },   events={     {       data={         {           description="Cursor direction.",           name="cursor_direction",           optional=true,           order=3,           type="defines.direction"         },         {           description="The mouse cursor display location when the custom input was activated.",           name="cursor_display_location",           optional=false,           order=4,           type="GuiLocation"         },         {           description="The mouse cursor position when the custom input was activated.",           name="cursor_position",           optional=false,           order=2,           type="MapPosition"         },         {           description="The GUI element under the cursor when the custom input was activated.",           name="element",           optional=true,           order=6,           type="LuaGuiElement"         },         {           description="The prototype name of the custom input that was activated.",           name="input_name",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The player that activated the custom input.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Information about the prototype that is selected when the custom input is used. Needs to be enabled on the custom input's prototype. `nil` if none is selected.",           name="selected_prototype",           optional=true,           order=5,           type="SelectedPrototypeData"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         }       },       description="Called when a [CustomInputPrototype](prototype:CustomInputPrototype) is activated.",       examples={         "```\n-- This will be raised when a custom input with the name \"my-potato-control\" and action \"lua\" is pressed\nscript.on_event(\"my-potato-control\", function(event)\n  game.print(\"Keyboard shortcut pressed on tick: \" ..tostring(event.tick))\nend)\n```"       },       name="CustomInputEvent",       order=0     },     {       data={         {           description="",           name="achievement",           optional=false,           order=1,           type="LuaAchievementPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who gained the achievement.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an achievement is gained.",       name="on_achievement_gained",       order=1     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="result",           optional=false,           order=1,           type="defines.behavior_result"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="unit_number/group_number of the unit/group which just completed a command.",           name="unit_number",           optional=false,           order=0,           type="uint"         },         {           description="Was this command generated by a distraction.",           name="was_distracted",           optional=false,           order=2,           type="boolean"         }       },       description="Called when a unit/group completes a command.",       name="on_ai_command_completed",       order=2     },     {       data={         {           description="",           name="clear_destination_decoratives",           optional=false,           order=9,           type="boolean"         },         {           description="",           name="clear_destination_entities",           optional=false,           order=8,           type="boolean"         },         {           description="",           name="clone_decoratives",           optional=false,           order=7,           type="boolean"         },         {           description="",           name="clone_entities",           optional=false,           order=6,           type="boolean"         },         {           description="",           name="clone_tiles",           optional=false,           order=5,           type="boolean"         },         {           description="",           name="destination_area",           optional=false,           order=3,           type="BoundingBox"         },         {           description="",           name="destination_force",           optional=true,           order=4,           type="LuaForce"         },         {           description="",           name="destination_surface",           optional=false,           order=2,           type="LuaSurface"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=10,           type="defines.events"         },         {           description="",           name="source_area",           optional=false,           order=1,           type="BoundingBox"         },         {           description="",           name="source_surface",           optional=false,           order=0,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=11,           type="uint"         }       },       description="Called when an area of the map is cloned.",       name="on_area_cloned",       order=3     },     {       data={         {           description="The entity that was built.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a biter migration builds a base.\n\nThis will be called multiple times for each migration, once for every biter that is sacrificed to build part of the new base.",       name="on_biter_base_built",       order=4     },     {       data={         {           description="",           name="clear_destination_decoratives",           optional=false,           order=10,           type="boolean"         },         {           description="",           name="clear_destination_entities",           optional=false,           order=9,           type="boolean"         },         {           description="",           name="clone_decoratives",           optional=false,           order=8,           type="boolean"         },         {           description="",           name="clone_entities",           optional=false,           order=7,           type="boolean"         },         {           description="",           name="clone_tiles",           optional=false,           order=6,           type="boolean"         },         {           description="",           name="destination_force",           optional=true,           order=5,           type="LuaForce"         },         {           description="",           name="destination_offset",           optional=false,           order=1,           type="TilePosition"         },         {           description="",           name="destination_surface",           optional=false,           order=4,           type="LuaSurface"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=11,           type="defines.events"         },         {           description="",           name="source_offset",           optional=false,           order=0,           type="TilePosition"         },         {           description="",           name="source_positions",           optional=false,           order=3,           type={             complex_type="array",             value="TilePosition"           }         },         {           description="",           name="source_surface",           optional=false,           order=2,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=12,           type="uint"         }       },       description="Called when a set of positions on the map is cloned.",       name="on_brush_cloned",       order=5     },     {       data={         {           description="The unit group the command was assigned to.",           name="group",           optional=true,           order=1,           type="LuaCommandable"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="The unit the command was assigned to.",           name="unit",           optional=true,           order=0,           type="LuaEntity"         }       },       description="Called when a [defines.command.build_base](runtime:defines.command.build_base) command reaches its destination, and before building starts.",       name="on_build_base_arrived",       order=6     },     {       data={         {           description="A temporary inventory containing all items that the game used to build the entity. This inventory is temporary and thus invalidated after the event.",           name="consumed_items",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The entity that was built.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player who did the building.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="The tags associated with this entity if any.",           name="tags",           optional=true,           order=3,           type="Tags"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when player builds something.",       filter="LuaPlayerBuiltEntityEventFilter",       name="on_built_entity",       order=7     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the deconstruction of an entity is canceled.",       filter="LuaEntityDeconstructionCancelledEventFilter",       name="on_cancelled_deconstruction",       order=8     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="",           name="quality",           optional=false,           order=3,           type="LuaQualityPrototype"         },         {           description="",           name="target",           optional=false,           order=2,           type="LuaEntityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when the upgrade of an entity is canceled.",       filter="LuaUpgradeCancelledEventFilter",       name="on_cancelled_upgrade",       order=9     },     {       data={         {           description="",           name="cargo_pod",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The spawned container if any. Created when destination type is [surface](runtime:defines.cargo_destination.surface).",           name="spawned_container",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a cargo pod has delivered its cargo.",       name="on_cargo_pod_delivered_cargo",       order=10     },     {       data={         {           description="",           name="cargo_pod",           optional=false,           order=0,           type="LuaEntity"         },         {           description="True for pods spawned on a rocket. This event triggers for platform and modded pods as well, but only when true will the pod count towards rocket launch statistics and trigger 'rocket-launched' achievement with objective_condition.",           name="launched_by_rocket",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player that is riding the cargo pod, if any.",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a cargo pod departs a surface.",       name="on_cargo_pod_finished_ascending",       order=11     },     {       data={         {           description="",           name="cargo_pod",           optional=false,           order=0,           type="LuaEntity"         },         {           description="True for pods spawned on a rocket.",           name="launched_by_rocket",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player that is riding the cargo pod, if any.",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a cargo pods lands on a surface, either at a station or on the ground.",       name="on_cargo_pod_finished_descending",       order=12     },     {       data={         {           description="The corpse.",           name="corpse",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a character corpse expires due to timeout or all of the items being removed from it.\n\nthis is not called if the corpse is mined. See [defines.events.on_pre_player_mined_item](runtime:defines.events.on_pre_player_mined_item) to detect that.",       name="on_character_corpse_expired",       order=13     },     {       data={         {           description="",           name="force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="",           name="tag",           optional=false,           order=0,           type="LuaCustomChartTag"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a chart tag is created.",       name="on_chart_tag_added",       order=14     },     {       data={         {           description="",           name="force",           optional=false,           order=2,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="",           name="old_icon",           optional=false,           order=4,           type="SignalID"         },         {           description="",           name="old_player_index",           optional=true,           order=7,           type="uint"         },         {           description="",           name="old_position",           optional=false,           order=5,           type="MapPosition"         },         {           description="",           name="old_surface",           optional=false,           order=6,           type="LuaSurface"         },         {           description="",           name="old_text",           optional=false,           order=3,           type="string"         },         {           description="",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="",           name="tag",           optional=false,           order=0,           type="LuaCustomChartTag"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when a chart tag is modified by a player.",       name="on_chart_tag_modified",       order=15     },     {       data={         {           description="",           name="force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="",           name="tag",           optional=false,           order=0,           type="LuaCustomChartTag"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called just before a chart tag is deleted.",       name="on_chart_tag_removed",       order=16     },     {       data={         {           description="Area of the chunk.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="",           name="force",           optional=false,           order=3,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="",           name="position",           optional=false,           order=1,           type="ChunkPosition"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a chunk is charted or re-charted.",       name="on_chunk_charted",       order=17     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The chunks deleted.",           name="positions",           optional=false,           order=1,           type={             complex_type="array",             value="ChunkPosition"           }         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when one or more chunks are deleted using [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk).",       name="on_chunk_deleted",       order=18     },     {       data={         {           description="Area of the chunk.",           name="area",           optional=false,           order=0,           type="BoundingBox"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="Position of the chunk.",           name="position",           optional=false,           order=1,           type="ChunkPosition"         },         {           description="The surface the chunk is on.",           name="surface",           optional=false,           order=2,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a chunk is generated.",       name="on_chunk_generated",       order=19     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The entity that owns the robot if any.",           name="owner",           optional=true,           order=1,           type="LuaEntity"         },         {           description="",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a combat robot expires through a lack of energy, or timeout.",       name="on_combat_robot_expired",       order=20     },     {       data={         {           description="The chat message that was sent.",           name="message",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player doing the chatting, if any.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a message is sent to the in-game console, either by a player or through the server interface.\n\nThis event only fires for plain messages, not for any commands (including `/shout` or `/whisper`).",       name="on_console_chat",       order=21     },     {       data={         {           description="The command as typed without the preceding forward slash ('/').",           name="command",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The parameters provided if any.",           name="parameters",           optional=false,           order=2,           type="string"         },         {           description="The player if any.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when someone enters a command-like message regardless of it being a valid command.",       name="on_console_command",       order=22     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player the cutscene was shown to.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a cutscene is cancelled by the player or by script.",       name="on_cutscene_cancelled",       order=23     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player the cutscene was shown to.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a cutscene finishes naturally (was not cancelled).",       name="on_cutscene_finished",       order=24     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player the cutscene is being shown to.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a cutscene starts.",       name="on_cutscene_started",       order=25     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player index of the player viewing the cutscene.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="The index of the waypoint we just completed.",           name="waypoint_index",           optional=false,           order=1,           type="uint"         }       },       description="Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.\n\nThis refers to an index in the table previously passed to set_controller which started the cutscene.",       name="on_cutscene_waypoint_reached",       order=26     },     {       data={         {           description="",           name="destination",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="source",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an entity is cloned. The filter applies to the source entity.",       filter="LuaEntityClonedEventFilter",       name="on_entity_cloned",       order=27     },     {       data={         {           description="The entity that was recolored.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after an entity has been recolored either by the player or through script.\n\nAutomatic recoloring due to [LuaPlayer::color](runtime:LuaPlayer::color) will not raise events, as that is a separate mechanism.",       name="on_entity_color_changed",       order=28     },     {       data={         {           description="The entity that originally triggered the events that led to this damage, if available (e.g. the character, turret, etc. that pulled the trigger).",           name="cause",           optional=true,           order=5,           type="LuaEntity"         },         {           description="",           name="damage_type",           optional=false,           order=1,           type="LuaDamagePrototype"         },         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The damage amount after resistances.",           name="final_damage_amount",           optional=false,           order=3,           type="float"         },         {           description="The health of the entity after the damage was applied.",           name="final_health",           optional=false,           order=4,           type="float"         },         {           description="The force that did the attacking if any.",           name="force",           optional=true,           order=7,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="The damage amount before resistances.",           name="original_damage_amount",           optional=false,           order=2,           type="float"         },         {           description="The entity that is directly dealing the damage, if available (e.g. the projectile, flame, sticker, grenade, laser beam, etc.).",           name="source",           optional=true,           order=6,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when an entity is damaged. This is not called when an entities health is set directly by another mod.",       filter="LuaEntityDamagedEventFilter",       name="on_entity_damaged",       order=29     },     {       data={         {           description="The entity that did the killing if available.",           name="cause",           optional=true,           order=1,           type="LuaEntity"         },         {           description="The damage type if any.",           name="damage_type",           optional=true,           order=4,           type="LuaDamagePrototype"         },         {           description="The entity that died.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The force that did the killing if any.",           name="force",           optional=true,           order=3,           type="LuaForce"         },         {           description="The loot generated by this entity if any.",           name="loot",           optional=false,           order=2,           type="LuaInventory"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         }       },       description="Called when an entity dies.",       filter="LuaEntityDiedEventFilter",       name="on_entity_died",       order=30     },     {       data={         {           description="The entity for whom a logistic slot was changed.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player who changed the slot, or `nil` if changed by script.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="The section changed.",           name="section",           optional=false,           order=2,           type="LuaLogisticSection"         },         {           description="The slot index that was changed.",           name="slot_index",           optional=false,           order=3,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when one of an entity's logistic slots changes.",       name="on_entity_logistic_slot_changed",       order=31     },     {       data={         {           description="",           name="by_script",           optional=false,           order=1,           type="boolean"         },         {           description="",           name="entity",           optional=false,           order=2,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="",           name="old_name",           optional=false,           order=3,           type="string"         },         {           description="If by_script is true this will not be included.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called after an entity has been renamed either by the player or through script.",       name="on_entity_renamed",       order=32     },     {       data={         {           description="The destination entity settings were copied to.",           name="destination",           optional=false,           order=2,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The source entity settings were copied from.",           name="source",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after entity copy-paste is done.",       name="on_entity_settings_pasted",       order=33     },     {       data={         {           description="",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="spawner",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an entity is spawned by a EnemySpawner",       name="on_entity_spawned",       order=34     },     {       data={         {           description="The equipment inserted.",           name="equipment",           optional=false,           order=1,           type="LuaEquipment"         },         {           description="The equipment grid inserted into.",           name="grid",           optional=false,           order=0,           type="LuaEquipmentGrid"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after equipment is inserted into an equipment grid.",       name="on_equipment_inserted",       order=35     },     {       data={         {           description="The count of equipment removed.",           name="count",           optional=false,           order=3,           type="uint"         },         {           description="The equipment removed.",           name="equipment",           optional=false,           order=1,           type="string"         },         {           description="The equipment grid removed from.",           name="grid",           optional=false,           order=0,           type="LuaEquipmentGrid"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The equipment quality.",           name="quality",           optional=false,           order=2,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called after equipment is removed from an equipment grid.",       name="on_equipment_removed",       order=36     },     {       data={         {           description="If the other force was added or removed.",           name="added",           optional=false,           order=2,           type="boolean"         },         {           description="The force who's cease fire changed.",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="Which force was added or removed.",           name="other_force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the a forces cease fire values change.",       name="on_force_cease_fire_changed",       order=37     },     {       data={         {           description="The newly created force.",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a new force is created using `game.create_force()`\n\nThis is not called when the default forces (`'player'`, `'enemy'`, `'neutral'`) are created as they will always exist.",       name="on_force_created",       order=38     },     {       data={         {           description="If the other force was added or removed.",           name="added",           optional=false,           order=2,           type="boolean"         },         {           description="The force who's friends changed.",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="Which force was added or removed.",           name="other_force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the a forces friends change.",       name="on_force_friends_changed",       order=39     },     {       data={         {           description="",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when [LuaForce::reset](runtime:LuaForce::reset) is finished.",       name="on_force_reset",       order=40     },     {       data={         {           description="The force entities where reassigned to.",           name="destination",           optional=false,           order=2,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The index of the destroyed force.",           name="source_index",           optional=false,           order=1,           type="uint"         },         {           description="The force destroyed.",           name="source_name",           optional=false,           order=0,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after two forces have been merged using `game.merge_forces()`.\n\nThe source force is invalidated before this event is called and the name can be re-used in this event if desired.",       name="on_forces_merged",       order=41     },     {       data={         {           description="The force to reassign entities to.",           name="destination",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The force to be destroyed",           name="source",           optional=false,           order=0,           type="LuaForce"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when two forces are about to be merged using `game.merge_forces()`.",       name="on_forces_merging",       order=42     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=0,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=1,           type="uint"         }       },       description="Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data already includes it. In those cases however, [LuaBootstrap::on_init](runtime:LuaBootstrap::on_init) is not fired.\n\nThis event is not fired when the scenario is loaded via the map editor.",       name="on_game_created_from_scenario",       order=43     },     {       data={         {           description="The element whose checked state changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) checked state is changed (related to checkboxes and radio buttons).",       name="on_gui_checked_state_changed",       order=44     },     {       data={         {           description="If alt was pressed.",           name="alt",           optional=false,           order=4,           type="boolean"         },         {           description="The mouse button used if any.",           name="button",           optional=false,           order=2,           type="defines.mouse_button_type"         },         {           description="If control was pressed.",           name="control",           optional=false,           order=5,           type="boolean"         },         {           description="The display location of the player's cursor.",           name="cursor_display_location",           optional=false,           order=3,           type="GuiLocation"         },         {           description="The clicked element.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The player who did the clicking.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="If shift was pressed.",           name="shift",           optional=false,           order=6,           type="boolean"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) is clicked.",       name="on_gui_click",       order=45     },     {       data={         {           description="The custom GUI element that was open",           name="element",           optional=true,           order=6,           type="LuaGuiElement"         },         {           description="The entity that was open",           name="entity",           optional=true,           order=2,           type="LuaEntity"         },         {           description="The equipment that was open",           name="equipment",           optional=true,           order=4,           type="LuaEquipment"         },         {           description="The GUI type that was open.",           name="gui_type",           optional=false,           order=1,           type="defines.gui_type"         },         {           description="The script inventory that was open",           name="inventory",           optional=true,           order=9,           type="LuaInventory"         },         {           description="The item that was open",           name="item",           optional=true,           order=3,           type="LuaItemStack"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=10,           type="defines.events"         },         {           description="The other player that was open",           name="other_player",           optional=true,           order=5,           type="LuaPlayer"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The technology that was automatically selected when opening the research GUI",           name="technology",           optional=true,           order=7,           type="LuaTechnology"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=11,           type="uint"         },         {           description="The tile position that was open",           name="tile_position",           optional=true,           order=8,           type="TilePosition"         }       },       description="Called when the player closes the GUI they have open.\n\nThis can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.\n\nIt's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.",       name="on_gui_closed",       order=46     },     {       data={         {           description="If alt was pressed.",           name="alt",           optional=false,           order=2,           type="boolean"         },         {           description="If control was pressed.",           name="control",           optional=false,           order=3,           type="boolean"         },         {           description="The confirmed element.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="The player who did the confirming.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="If shift was pressed.",           name="shift",           optional=false,           order=4,           type="boolean"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         }       },       description="Called when a [LuaGuiElement](runtime:LuaGuiElement) is confirmed, for example by pressing Enter in a textfield.",       name="on_gui_confirmed",       order=47     },     {       data={         {           description="The element whose element value changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) element value is changed (related to choose element buttons).",       name="on_gui_elem_changed",       order=48     },     {       data={         {           description="The element that is being hovered over.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player whose cursor is hovering.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) is hovered by the mouse.\n\nOnly fired for events whose [LuaGuiElement::raise_hover_events](runtime:LuaGuiElement::raise_hover_events) is `true`.",       name="on_gui_hover",       order=49     },     {       data={         {           description="The element that was being hovered.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player whose cursor was hovering.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player's cursor leaves a [LuaGuiElement](runtime:LuaGuiElement) that was previously hovered.\n\nOnly fired for events whose [LuaGuiElement::raise_hover_events](runtime:LuaGuiElement::raise_hover_events) is `true`.",       name="on_gui_leave",       order=50     },     {       data={         {           description="The element whose location changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) element location is changed (related to frames in `player.gui.screen`).",       name="on_gui_location_changed",       order=51     },     {       data={         {           description="The custom GUI element that was opened",           name="element",           optional=true,           order=6,           type="LuaGuiElement"         },         {           description="The entity that was opened",           name="entity",           optional=true,           order=2,           type="LuaEntity"         },         {           description="The equipment that was opened",           name="equipment",           optional=true,           order=4,           type="LuaEquipment"         },         {           description="The GUI type that was opened.",           name="gui_type",           optional=false,           order=1,           type="defines.gui_type"         },         {           description="The script inventory that was opened",           name="inventory",           optional=true,           order=7,           type="LuaInventory"         },         {           description="The item that was opened",           name="item",           optional=true,           order=3,           type="LuaItemStack"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="The other player that was opened",           name="other_player",           optional=true,           order=5,           type="LuaPlayer"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when the player opens a GUI.",       name="on_gui_opened",       order=52     },     {       data={         {           description="The tabbed pane whose selected tab changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) selected tab is changed (related to tabbed-panes).",       name="on_gui_selected_tab_changed",       order=53     },     {       data={         {           description="The element whose selection state changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) selection state is changed (related to drop-downs and listboxes).",       name="on_gui_selection_state_changed",       order=54     },     {       data={         {           description="The switch whose switch state changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) switch state is changed (related to switches).",       name="on_gui_switch_state_changed",       order=55     },     {       data={         {           description="The edited element.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player who did the edit.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="The new text in the element.",           name="text",           optional=false,           order=2,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) text is changed by the player.",       name="on_gui_text_changed",       order=56     },     {       data={         {           description="The element whose value changed.",           name="element",           optional=false,           order=0,           type="LuaGuiElement"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the change.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when [LuaGuiElement](runtime:LuaGuiElement) slider value is changed (related to the slider element).",       name="on_gui_value_changed",       order=57     },     {       data={         {           description="",           name="mine",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a land mine is armed.",       name="on_land_mine_armed",       order=58     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Shortcut prototype name of the shortcut that was clicked.",           name="prototype_name",           optional=false,           order=1,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a custom [Lua shortcut](prototype:ShortcutPrototype) is pressed.",       name="on_lua_shortcut",       order=59     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an entity is marked for deconstruction with the Deconstruction planner or via script.",       filter="LuaEntityMarkedForDeconstructionEventFilter",       name="on_marked_for_deconstruction",       order=60     },     {       data={         {           description="",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="",           name="quality",           optional=false,           order=3,           type="LuaQualityPrototype"         },         {           description="",           name="target",           optional=false,           order=2,           type="LuaEntityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when an entity is marked for upgrade with the Upgrade planner or via script.",       filter="LuaEntityMarkedForUpgradeEventFilter",       name="on_marked_for_upgrade",       order=61     },     {       data={         {           description="The amount of offers purchased.",           name="count",           optional=false,           order=3,           type="uint"         },         {           description="The market entity.",           name="market",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The index of the offer purchased.",           name="offer_index",           optional=false,           order=2,           type="uint"         },         {           description="The player who did the purchasing.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called after a player purchases some offer from a `market` entity.",       name="on_market_item_purchased",       order=62     },     {       data={         {           description="The item clicked on.",           name="item",           optional=false,           order=1,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality clicked on.",           name="quality",           optional=false,           order=2,           type="LuaQualityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag",       name="on_mod_item_opened",       order=63     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=0,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=1,           type="uint"         }       },       description="Called when [LuaGameScript::is_multiplayer](runtime:LuaGameScript::is_multiplayer) changes to true. May also be raised when it was already true but a game was loaded from a save file and with hosting.",       name="on_multiplayer_init",       order=64     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The number returned by [register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed) to uniquely identify this object during this event.",           name="registration_number",           optional=false,           order=0,           type="uint64"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="Type of the object that was destroyed. Same as third value returned by [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed)",           name="type",           optional=false,           order=2,           type="defines.target_type"         },         {           description="The [useful identifier](runtime:RegistrationTarget) of the object. Same as second value returned by [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed)",           name="useful_id",           optional=false,           order=1,           type="uint64"         }       },       description="Called after an object is destroyed which was registered with [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed) previously.\n\nDepending on when a given object is destroyed, this event will be fired at the end of the current tick or at the end of the next tick. The event's timing is independent of the in-world object being destroyed.",       name="on_object_destroyed",       order=65     },     {       data={         {           description="The group added.",           name="group",           optional=false,           order=1,           type="LuaPermissionGroup"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player that added the group or `nil` if by a mod.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called directly after a permission group is added.",       name="on_permission_group_added",       order=66     },     {       data={         {           description="The group that was deleted.",           name="group_name",           optional=false,           order=1,           type="string"         },         {           description="The group id that was deleted.",           name="id",           optional=false,           order=2,           type="uint"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player doing the deletion or `nil` if by a mod.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called directly after a permission group is deleted.",       name="on_permission_group_deleted",       order=67     },     {       data={         {           description="The action when the `type` is `\"add-permission\"` or `\"remove-permission\"`.",           name="action",           optional=false,           order=3,           type="defines.input_action"         },         {           description="The group being edited.",           name="group",           optional=false,           order=1,           type="LuaPermissionGroup"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The new group name when the `type` is `\"rename\"`.",           name="new_name",           optional=false,           order=6,           type="string"         },         {           description="The old group name when the `type` is `\"rename\"`.",           name="old_name",           optional=false,           order=5,           type="string"         },         {           description="The other player when the `type` is `\"add-player\"` or `\"remove-player\"`.",           name="other_player_index",           optional=false,           order=4,           type="uint"         },         {           description="The player that did the editing or `nil` if by a mod.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The edit type.",           name="type",           optional=false,           order=2,           type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="add-permission"               },               {                 complex_type="literal",                 value="remove-permission"               },               {                 complex_type="literal",                 value="enable-all"               },               {                 complex_type="literal",                 value="disable-all"               },               {                 complex_type="literal",                 value="add-player"               },               {                 complex_type="literal",                 value="remove-player"               },               {                 complex_type="literal",                 value="rename"               }             }           }         }       },       description="Called directly after a permission group is edited in some way.",       name="on_permission_group_edited",       order=68     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player that imported the string.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called directly after a permission string is imported.",       name="on_permission_string_imported",       order=69     },     {       data={         {           description="",           name="item_stack",           optional=false,           order=0,           type="ItemWithCount"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player picks up an item.",       name="on_picked_up_item",       order=70     },     {       data={         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The entities selected.",           name="entities",           optional=false,           order=4,           type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=6,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=7,           type="uint"         },         {           description="The tiles selected.",           name="tiles",           optional=false,           order=5,           type={             complex_type="array",             value="LuaTile"           }         }       },       description="Called after a player alt-reverse-selects an area with a selection-tool item.",       name="on_player_alt_reverse_selected_area",       order=71     },     {       data={         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The entities selected.",           name="entities",           optional=false,           order=5,           type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality used to select the area.",           name="quality",           optional=false,           order=4,           type="string"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The tiles selected.",           name="tiles",           optional=false,           order=6,           type={             complex_type="array",             value="LuaTile"           }         }       },       description="Called after a player alt-selects an area with a selection-tool item.",       name="on_player_alt_selected_area",       order=72     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a players ammo inventory changed in some way.",       name="on_player_ammo_inventory_changed",       order=73     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a players armor inventory changed in some way.",       name="on_player_armor_inventory_changed",       order=74     },     {       data={         {           description="The player that did the banning if any.",           name="by_player",           optional=true,           order=2,           type="uint"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player banned.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="The banned player name.",           name="player_name",           optional=false,           order=1,           type="string"         },         {           description="The reason given if any.",           name="reason",           optional=true,           order=3,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player is banned.",       name="on_player_banned",       order=75     },     {       data={         {           description="The inventory containing the items used to build the tiles.",           name="inventory",           optional=true,           order=6,           type="LuaInventory"         },         {           description="The item type used to build the tiles",           name="item",           optional=true,           order=4,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The quality of the item used to build the tiles",           name="quality",           optional=true,           order=5,           type="LuaQualityPrototype"         },         {           description="The surface the tile(s) were built on.",           name="surface_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The tile prototype that was placed.",           name="tile",           optional=false,           order=3,           type="LuaTilePrototype"         },         {           description="The position data.",           name="tiles",           optional=false,           order=2,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a player builds tiles.",       name="on_player_built_tile",       order=76     },     {       data={         {           description="The number of crafts that have been cancelled.",           name="cancel_count",           optional=false,           order=3,           type="uint"         },         {           description="The crafting items returned to the player's inventory.",           name="items",           optional=false,           order=1,           type="LuaInventory"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player that did the crafting.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The recipe that has been cancelled.",           name="recipe",           optional=false,           order=2,           type="LuaRecipe"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player cancels crafting.",       name="on_player_cancelled_crafting",       order=77     },     {       data={         {           description="The old force.",           name="force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who changed forces.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player changes forces.",       name="on_player_changed_force",       order=78     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when the tile position a player is located at changes.",       name="on_player_changed_position",       order=79     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who changed surfaces.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The surface index the player was on - may be `nil` if the surface no longer exists.",           name="surface_index",           optional=true,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player changes surfaces.",       name="on_player_changed_surface",       order=80     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when cheat mode is disabled on a player.",       name="on_player_cheat_mode_disabled",       order=81     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when cheat mode is enabled on a player.",       name="on_player_cheat_mode_enabled",       order=82     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="Index of the player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Map position contained in gps tag",           name="position",           optional=false,           order=1,           type="MapPosition"         },         {           description="Surface name contained in gps tag, even when such surface does not exists",           name="surface",           optional=false,           order=2,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a player clicks a gps tag",       name="on_player_clicked_gps_tag",       order=83     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player clicks the \"confirm\" button in the configure Blueprint GUI.",       name="on_player_configured_blueprint",       order=84     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The old controller type.",           name="old_type",           optional=false,           order=1,           type="defines.controllers"         },         {           description="The player who changed controllers.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player changes controller types.",       name="on_player_controller_changed",       order=85     },     {       data={         {           description="The item that has been crafted.",           name="item_stack",           optional=false,           order=0,           type="LuaItemStack"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player doing the crafting.",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="The recipe used to craft this item.",           name="recipe",           optional=false,           order=2,           type="LuaRecipe"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the player finishes crafting an item. This event fires just before the results are inserted into the player's inventory, not when the crafting is queued (see [on_pre_player_crafted_item](runtime:on_pre_player_crafted_item)).",       name="on_player_crafted_item",       order=86     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after the player was created.",       name="on_player_created",       order=87     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a player's [cursor stack](runtime:LuaControl::cursor_stack) changed in some way.\n\nThis is fired in the same tick that the change happens, but not instantly.",       name="on_player_cursor_stack_changed",       order=88     },     {       data={         {           description="If normal selection or alt selection was used.",           name="alt",           optional=false,           order=7,           type="boolean"         },         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality used to select the area.",           name="quality",           optional=false,           order=6,           type="string"         },         {           description="The record that was used to select the area.",           name="record",           optional=true,           order=5,           type="LuaRecord"         },         {           description="The item stack used to select the area.",           name="stack",           optional=true,           order=4,           type="LuaItemStack"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when a player selects an area with a deconstruction planner.",       name="on_player_deconstructed_area",       order=89     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player is demoted.",       name="on_player_demoted",       order=90     },     {       data={         {           description="",           name="cause",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player dies.",       name="on_player_died",       order=91     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The old display scale",           name="old_scale",           optional=false,           order=1,           type="double"         },         {           description="The player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the display density scale changes for a given player. The display density scale is the scale value automatically applied based on the player's display DPI. This is only relevant on platforms that support high-density displays.",       name="on_player_display_density_scale_changed",       order=92     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The old display resolution",           name="old_resolution",           optional=false,           order=1,           type="DisplayResolution"         },         {           description="The player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the display resolution changes for a given player.",       name="on_player_display_resolution_changed",       order=93     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The old display scale",           name="old_scale",           optional=false,           order=1,           type="double"         },         {           description="The player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the display scale changes for a given player.",       name="on_player_display_scale_changed",       order=94     },     {       data={         {           description="The vehicle if any.",           name="entity",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player's driving state has changed, meaning a player has either entered or left a vehicle.\n\nThis event is not raised when the player is ejected from a vehicle due to it being destroyed.",       name="on_player_driving_changed_state",       order=95     },     {       data={         {           description="The item-on-ground entity.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player drops an item on the ground.",       name="on_player_dropped_item",       order=96     },     {       data={         {           description="The entity transferred from or to.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.",           name="from_player",           optional=false,           order=2,           type="boolean"         },         {           description="Whether the transfer was a split action (half stack).",           name="is_split",           optional=false,           order=3,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player transferred from or to.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player fast-transfers something to or from an entity.",       name="on_player_fast_transferred",       order=97     },     {       data={         {           description="The flipped entity.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The enacted flip. `true` means a horizontal flip, `false` a vertical one.",           name="horizontal",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the player flips an entity. This event is only fired when the entity actually changes its orientation or mirroring, so it won't be triggered when pressing the flip keys on an entity that can't be flipped.\n\nThis event reflects a change in the [LuaEntity::mirroring](runtime:LuaEntity::mirroring) property.",       name="on_player_flipped_entity",       order=98     },     {       data={         {           description="Amount of fluid that was removed",           name="amount",           optional=false,           order=2,           type="double"         },         {           description="Entity from which flush was performed",           name="entity",           optional=false,           order=3,           type="LuaEntity"         },         {           description="Name of a fluid that was flushed",           name="fluid",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="True if flush was requested only on this entity",           name="only_this_entity",           optional=false,           order=4,           type="boolean"         },         {           description="Index of the player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         }       },       description="Called after player flushed fluid",       name="on_player_flushed_fluid",       order=99     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a players gun inventory changed in some way.",       name="on_player_gun_inventory_changed",       order=100     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player whose input method changed.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player's input method changes. See [LuaPlayer::input_method](runtime:LuaPlayer::input_method).",       name="on_player_input_method_changed",       order=101     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a player joins the game. This is not called when loading a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.",       name="on_player_joined_game",       order=102     },     {       data={         {           description="The player that did the kicking if any.",           name="by_player",           optional=true,           order=1,           type="uint"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player kicked.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The reason given if any.",           name="reason",           optional=true,           order=2,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a player is kicked.",       name="on_player_kicked",       order=103     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="",           name="reason",           optional=false,           order=1,           type="defines.disconnect_reason"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player leaves the game. This is not called when closing a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.",       name="on_player_left_game",       order=104     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The previously active locale.",           name="old_locale",           optional=false,           order=1,           type="string"         },         {           description="The player whose locale was changed.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player's active locale changes. See [LuaPlayer::locale](runtime:LuaPlayer::locale).",       name="on_player_locale_changed",       order=105     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a players main inventory changed in some way.",       name="on_player_main_inventory_changed",       order=106     },     {       data={         {           description="The temporary inventory that holds the result of mining the entity.",           name="buffer",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The entity that has been mined.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The index of the player doing the mining.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the player as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",       filter="LuaPlayerMinedEntityEventFilter",       name="on_player_mined_entity",       order=107     },     {       data={         {           description="The item given to the player",           name="item_stack",           optional=false,           order=0,           type="ItemWithQualityCounts"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player mines something.",       name="on_player_mined_item",       order=108     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The surface the tile(s) were mined from.",           name="surface_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="The position data.",           name="tiles",           optional=false,           order=2,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a player mines tiles.",       name="on_player_mined_tile",       order=109     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player is muted.",       name="on_player_muted",       order=110     },     {       data={         {           description="The item put in the cursor",           name="item",           optional=false,           order=1,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality put in the cursor",           name="quality",           optional=false,           order=2,           type="LuaQualityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         },         {           description="If cheat mode was used to give a free stack of the item.",           name="used_cheat_mode",           optional=false,           order=3,           type="boolean"         }       },       description="Called when a player invokes the \"smart pipette\" over an entity.",       name="on_player_pipette",       order=111     },     {       data={         {           description="The equipment put in the equipment grid.",           name="equipment",           optional=false,           order=1,           type="LuaEquipment"         },         {           description="The equipment grid the equipment was put in.",           name="grid",           optional=false,           order=2,           type="LuaEquipmentGrid"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after the player puts equipment in an equipment grid",       name="on_player_placed_equipment",       order=112     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player is promoted.",       name="on_player_promoted",       order=113     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The index of the removed player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](runtime:on_player_left_game) the game, and instead behaves like the player never existed in the save file.",       name="on_player_removed",       order=114     },     {       data={         {           description="The count of equipment removed.",           name="count",           optional=false,           order=4,           type="uint"         },         {           description="The equipment removed.",           name="equipment",           optional=false,           order=2,           type="string"         },         {           description="The equipment grid removed from.",           name="grid",           optional=false,           order=1,           type="LuaEquipmentGrid"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The equipment quality.",           name="quality",           optional=false,           order=3,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         }       },       description="Called after the player removes equipment from an equipment grid",       name="on_player_removed_equipment",       order=115     },     {       data={         {           description="",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player repairs an entity.",       filter="LuaPlayerRepairedEntityEventFilter",       name="on_player_repaired_entity",       order=116     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The player port used to respawn if one was used.",           name="player_port",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a player respawns.",       name="on_player_respawned",       order=117     },     {       data={         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The entities selected.",           name="entities",           optional=false,           order=4,           type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=6,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=7,           type="uint"         },         {           description="The tiles selected.",           name="tiles",           optional=false,           order=5,           type={             complex_type="array",             value="LuaTile"           }         }       },       description="Called after a player reverse-selects an area with a selection-tool item.",       name="on_player_reverse_selected_area",       order=118     },     {       data={         {           description="The rotated entity.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=2,           type="uint"         },         {           description="The previous direction",           name="previous_direction",           optional=false,           order=1,           type="defines.direction"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.\n\nEntities being flipped will not fire this event, even if the flip involves rotating. See [on_player_flipped_entity](runtime:on_player_flipped_entity).",       name="on_player_rotated_entity",       order=119     },     {       data={         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The entities selected.",           name="entities",           optional=false,           order=5,           type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality used to select the area.",           name="quality",           optional=false,           order=4,           type="string"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The tiles selected.",           name="tiles",           optional=false,           order=6,           type={             complex_type="array",             value="LuaTile"           }         }       },       description="Called after a player selects an area with a selection-tool item.",       name="on_player_selected_area",       order=120     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player sets a quickbar slot to anything (new value, or set to empty).",       name="on_player_set_quick_bar_slot",       order=121     },     {       data={         {           description="If normal selection or alt selection was used.",           name="alt",           optional=false,           order=7,           type="boolean"         },         {           description="The area selected.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The item used to select the area.",           name="item",           optional=false,           order=3,           type="string"         },         {           description="The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.",           name="mapping",           optional=false,           order=8,           type={             complex_type="LuaLazyLoadedValue",             value={               complex_type="dictionary",               key="uint",               value="LuaEntity"             }           }         },         {           description="Identifier of the event",           name="name",           optional=false,           order=9,           type="defines.events"         },         {           description="The player doing the selection.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The item quality used to select the area.",           name="quality",           optional=false,           order=6,           type="string"         },         {           description="The record that is being reassigned.",           name="record",           optional=true,           order=5,           type="LuaRecord"         },         {           description="The item stack used to select the area.",           name="stack",           optional=true,           order=4,           type="LuaItemStack"         },         {           description="The surface selected.",           name="surface",           optional=false,           order=1,           type="LuaSurface"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=10,           type="uint"         }       },       description="Called when a player selects an area with a blueprint.",       name="on_player_setup_blueprint",       order=122     },     {       data={         {           description="The new alt mode value. This value is a shortcut for accessing [GameViewSettings::show_entity_info](runtime:GameViewSettings::show_entity_info) on the player.",           name="alt_mode",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player toggles alt mode, also known as \"show entity info\".",       name="on_player_toggled_alt_mode",       order=123     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player toggles the map editor on or off.",       name="on_player_toggled_map_editor",       order=124     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a players trash inventory changed in some way.",       name="on_player_trash_inventory_changed",       order=125     },     {       data={         {           description="The player that did the un-banning if any.",           name="by_player",           optional=true,           order=2,           type="uint"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player un-banned.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="The player name un-banned.",           name="player_name",           optional=false,           order=1,           type="string"         },         {           description="The reason the player was banned if any.",           name="reason",           optional=true,           order=3,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player is un-banned.",       name="on_player_unbanned",       order=126     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a player is unmuted.",       name="on_player_unmuted",       order=127     },     {       data={         {           description="The capsule item used.",           name="item",           optional=false,           order=1,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The position the capsule was used.",           name="position",           optional=false,           order=3,           type="MapPosition"         },         {           description="The quality of the capsule item used.",           name="quality",           optional=false,           order=2,           type="LuaQualityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player uses a capsule that results in some game action.",       name="on_player_used_capsule",       order=128     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player that used the remote.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Goal position to which spidertron was sent to.",           name="position",           optional=false,           order=1,           type="MapPosition"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a player uses spidertron remote to send all selected units to a given position",       name="on_player_used_spidertron_remote",       order=129     },     {       data={         {           description="The corpses created by the entity dying if any.",           name="corpses",           optional=false,           order=6,           type={             complex_type="array",             value="LuaEntity"           }         },         {           description="The damage type if any.",           name="damage_type",           optional=true,           order=5,           type="LuaDamagePrototype"         },         {           description="The force that did the killing if any.",           name="force",           optional=true,           order=1,           type="LuaForce"         },         {           description="The ghost created by the entity dying if any.",           name="ghost",           optional=true,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=9,           type="defines.events"         },         {           description="Position where the entity died.",           name="position",           optional=false,           order=2,           type="MapPosition"         },         {           description="The entity prototype of the entity that died.",           name="prototype",           optional=false,           order=3,           type="LuaEntityPrototype"         },         {           description="The quality of the entity that died.",           name="quality",           optional=false,           order=4,           type="LuaQualityPrototype"         },         {           description="The surface the entity was on.",           name="surface_index",           optional=false,           order=7,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=10,           type="uint"         },         {           description="The unit number the entity had if any.",           name="unit_number",           optional=true,           order=8,           type="uint"         }       },       description="Called after an entity dies.",       filter="LuaPostEntityDiedEventFilter",       name="on_post_entity_died",       order=130     },     {       data={         {           description="Build mode the item was placed with.",           name="build_mode",           optional=false,           order=2,           type="defines.build_mode"         },         {           description="Whether the item was placed while moving.",           name="created_by_moving",           optional=false,           order=7,           type="boolean"         },         {           description="The direction the item was facing when placed.",           name="direction",           optional=false,           order=3,           type="defines.direction"         },         {           description="Whether the blueprint was flipped horizontally. `nil` if not built by a blueprint.",           name="flip_horizontal",           optional=false,           order=5,           type="boolean"         },         {           description="Whether the blueprint was flipped vertically. `nil` if not built by a blueprint.",           name="flip_vertical",           optional=false,           order=6,           type="boolean"         },         {           description="If the item is mirrored (only crafting machines support this)",           name="mirror",           optional=false,           order=4,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="The player who did the placing.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Where the item was placed.",           name="position",           optional=false,           order=1,           type="MapPosition"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when players uses an item to build something. Called before [on_built_entity](runtime:on_built_entity).",       name="on_pre_build",       order=131     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The chunks to be deleted.",           name="positions",           optional=false,           order=1,           type={             complex_type="array",             value="ChunkPosition"           }         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before one or more chunks are deleted using [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk).",       name="on_pre_chunk_deleted",       order=132     },     {       data={         {           description="The destination entity settings will be copied to.",           name="destination",           optional=false,           order=2,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The source entity settings will be copied from.",           name="source",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called before entity copy-paste is done.",       name="on_pre_entity_settings_pasted",       order=133     },     {       data={         {           description="",           name="ghost",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player that did the deconstruction if any.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before a ghost entity is destroyed as a result of being marked for deconstruction.\n\nAlso called for item request proxies before they are destroyed as a result of being marked for deconstruction.",       filter="LuaPreGhostDeconstructedEventFilter",       name="on_pre_ghost_deconstructed",       order=134     },     {       data={         {           description="",           name="ghost",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player that did the upgrade if any.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="",           name="quality",           optional=false,           order=3,           type="LuaQualityPrototype"         },         {           description="",           name="target",           optional=false,           order=2,           type="LuaEntityPrototype"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called before a ghost entity is upgraded.",       filter="LuaPreGhostUpgradedEventFilter",       name="on_pre_ghost_upgraded",       order=135     },     {       data={         {           description="The group to be deleted.",           name="group",           optional=false,           order=1,           type="LuaPermissionGroup"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player doing the deletion or `nil` if by a mod.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called directly before a permission group is deleted.",       name="on_pre_permission_group_deleted",       order=136     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The player importing the string.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called directly before a permission string is imported.",       name="on_pre_permission_string_imported",       order=137     },     {       data={         {           description="The items removed from the players inventory to do the crafting.",           name="items",           optional=false,           order=2,           type="LuaInventory"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The player doing the crafting.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The number of times the recipe is being queued.",           name="queued_count",           optional=false,           order=3,           type="uint"         },         {           description="The recipe being queued.",           name="recipe",           optional=false,           order=1,           type="LuaRecipe"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a player queues something to be crafted.",       name="on_pre_player_crafted_item",       order=138     },     {       data={         {           description="",           name="cause",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before a players dies.",       name="on_pre_player_died",       order=139     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="",           name="reason",           optional=false,           order=1,           type="defines.disconnect_reason"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before a player leaves the game.",       name="on_pre_player_left_game",       order=140     },     {       data={         {           description="The entity being mined",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player completes a mining action, but before the entity is potentially removed from the map. This is called even if the entity does not end up being removed.",       filter="LuaPrePlayerMinedEntityEventFilter",       name="on_pre_player_mined_item",       order=141     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="The index of the removed player.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called before a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](runtime:on_player_left_game) the game, and instead behaves like the player never existed in the save file.",       name="on_pre_player_removed",       order=142     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called before a player toggles the map editor on or off.",       name="on_pre_player_toggled_map_editor",       order=143     },     {       data={         {           description="",           name="cliff",           optional=false,           order=1,           type="LuaEntity"         },         {           description="The cliff explosive used.",           name="item",           optional=false,           order=2,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The quality of the cliff explosive used.",           name="quality",           optional=false,           order=3,           type="LuaQualityPrototype"         },         {           description="",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called directly before a robot explodes cliffs.",       name="on_pre_robot_exploded_cliff",       order=144     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="If a player won",           name="player_won",           optional=false,           order=0,           type="boolean"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called just before the scenario finishes.",       name="on_pre_scenario_finished",       order=145     },     {       data={         {           description="",           name="inventory",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The mod that did the resizing. This will be `\"core\"` if done by console command or scenario script.",           name="mod",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="The new inventory size.",           name="new_size",           optional=false,           order=4,           type="uint"         },         {           description="The old inventory size.",           name="old_size",           optional=false,           order=3,           type="uint"         },         {           description="If done by console command; the player who ran the command.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         }       },       description="Called just before a script inventory is resized.",       name="on_pre_script_inventory_resized",       order=146     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called just before a surface is cleared (all entities removed and all chunks deleted).",       name="on_pre_surface_cleared",       order=147     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called just before a surface is deleted.",       name="on_pre_surface_deleted",       order=148     },     {       data={         {           description="The context of the redo action.",           name="actions",           optional=false,           order=1,           type={             complex_type="array",             value="UndoRedoAction"           }         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who triggered the redo action.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player triggers \"redo\".",       name="on_redo_applied",       order=149     },     {       data={         {           description="The force whose research was cancelled.",           name="force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player who cancelled the research if any.",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="A mapping of technology name to how many times it was cancelled.",           name="research",           optional=false,           order=0,           type={             complex_type="dictionary",             key="string",             value="uint"           }         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when research is cancelled.",       name="on_research_cancelled",       order=150     },     {       data={         {           description="If the technology was researched by script.",           name="by_script",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The researched technology",           name="research",           optional=false,           order=0,           type="LuaTechnology"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a research finishes.",       name="on_research_finished",       order=151     },     {       data={         {           description="The force whose research was re-arranged.",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who did the re-arranging if any.",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when research is moved forwards or backwards in the research queue.",       name="on_research_moved",       order=152     },     {       data={         {           description="The force whose research was queued.",           name="force",           optional=false,           order=1,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player who queued the research if any.",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="The technology queued",           name="research",           optional=false,           order=0,           type="LuaTechnology"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when research is queued.",       name="on_research_queued",       order=153     },     {       data={         {           description="If the technology was un-researched by script.",           name="by_script",           optional=false,           order=1,           type="boolean"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The technology un-researched",           name="research",           optional=false,           order=0,           type="LuaTechnology"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a research is reversed (unresearched).",       name="on_research_reversed",       order=154     },     {       data={         {           description="",           name="last_research",           optional=true,           order=1,           type="LuaTechnology"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The technology being researched",           name="research",           optional=false,           order=0,           type="LuaTechnology"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a technology research starts.",       name="on_research_started",       order=155     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a resource entity reaches 0 or its minimum yield for infinite resources.",       name="on_resource_depleted",       order=156     },     {       data={         {           description="The entity built.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The robot that did the building.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The item used to do the building.",           name="stack",           optional=false,           order=2,           type="LuaItemStack"         },         {           description="The tags associated with this entity if any.",           name="tags",           optional=true,           order=3,           type="Tags"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a construction robot builds an entity.",       filter="LuaRobotBuiltEntityEventFilter",       name="on_robot_built_entity",       order=157     },     {       data={         {           description="The inventory containing the stacks used to build the tiles.",           name="inventory",           optional=false,           order=5,           type="LuaInventory"         },         {           description="The item type used to build the tiles.",           name="item",           optional=false,           order=3,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The quality the item used to build the tiles.",           name="quality",           optional=false,           order=4,           type="LuaQualityPrototype"         },         {           description="The robot.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The surface the tile(s) are build on.",           name="surface_index",           optional=false,           order=6,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The tile prototype that was placed.",           name="tile",           optional=false,           order=2,           type="LuaTilePrototype"         },         {           description="The position data.",           name="tiles",           optional=false,           order=1,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a robot builds tiles.",       name="on_robot_built_tile",       order=158     },     {       data={         {           description="The cliff explosive used.",           name="item",           optional=false,           order=1,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The quality of the cliff explosive used.",           name="quality",           optional=false,           order=2,           type="LuaQualityPrototype"         },         {           description="",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called directly after a robot explodes cliffs.",       name="on_robot_exploded_cliff",       order=159     },     {       data={         {           description="The entity the robot just picked up.",           name="item_stack",           optional=false,           order=1,           type="ItemWithCount"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The robot that did the mining.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a robot mines an entity.",       name="on_robot_mined",       order=160     },     {       data={         {           description="The temporary inventory that holds the result of mining the entity.",           name="buffer",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The entity that has been mined.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The robot doing the mining.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the robot as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",       filter="LuaRobotMinedEntityEventFilter",       name="on_robot_mined_entity",       order=161     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The robot.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="The surface the tile(s) were mined on.",           name="surface_index",           optional=false,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="The position data.",           name="tiles",           optional=false,           order=1,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a robot mines tiles.",       name="on_robot_mined_tile",       order=162     },     {       data={         {           description="The entity which is about to be mined.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The robot that's about to do the mining.",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before a robot mines an entity.",       filter="LuaPreRobotMinedEntityEventFilter",       name="on_robot_pre_mined",       order=163     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The player that is riding the rocket, if any.",           name="player_index",           optional=true,           order=2,           type="uint"         },         {           description="",           name="rocket",           optional=false,           order=0,           type="LuaEntity"         },         {           description="",           name="rocket_silo",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a rocket silo is ordered to be launched.",       name="on_rocket_launch_ordered",       order=164     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="rocket",           optional=false,           order=0,           type="LuaEntity"         },         {           description="",           name="rocket_silo",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a rocket finishes ascending. (Triggers listening for finished rocket launch past 2.0 have been moved to 'on_cargo_pod_finished_ascending' as rocket and cargo pod are two separate entities)",       name="on_rocket_launched",       order=165     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="If the `setting_type` is `\"global\"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `\"runtime-per-user\"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="The prototype name of the setting that was changed.",           name="setting",           optional=false,           order=1,           type="string"         },         {           description="",           name="setting_type",           optional=false,           order=2,           type={             complex_type="union",             full_format=false,             options={               {                 complex_type="literal",                 value="runtime-global"               },               {                 complex_type="literal",                 value="runtime-per-user"               }             }           }         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a runtime mod setting is changed by a player.",       name="on_runtime_mod_setting_changed",       order=166     },     {       data={         {           description="",           name="inventory",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The mod that did the resizing. This will be `\"core\"` if done by console command or scenario script.",           name="mod",           optional=false,           order=1,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=6,           type="defines.events"         },         {           description="The new inventory size.",           name="new_size",           optional=false,           order=4,           type="uint"         },         {           description="The old inventory size.",           name="old_size",           optional=false,           order=3,           type="uint"         },         {           description="Any items which didn't fit into the new inventory size.",           name="overflow_inventory",           optional=false,           order=5,           type="LuaInventory"         },         {           description="If done by console command; the player who ran the command.",           name="player_index",           optional=true,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=7,           type="uint"         }       },       description="Called just after a script inventory is resized.",       name="on_script_inventory_resized",       order=167     },     {       data={         {           description="Handle to associate the callback with a particular call to [LuaSurface::request_path](runtime:LuaSurface::request_path).",           name="id",           optional=false,           order=1,           type="uint"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The actual path that the pathfinder has determined. `nil` if pathfinding failed.",           name="path",           optional=true,           order=0,           type={             complex_type="array",             value="PathfinderWaypoint"           }         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="Indicates that the pathfinder failed because it is too busy, and that you can retry later.",           name="try_again_later",           optional=false,           order=2,           type="boolean"         }       },       description="Called when a [LuaSurface::request_path](runtime:LuaSurface::request_path) call completes.",       name="on_script_path_request_finished",       order=168     },     {       data={         {           description="The entity that originally caused the sequence of triggers",           name="cause_entity",           optional=true,           order=6,           type="LuaEntity"         },         {           description="The effect_id specified in the trigger effect.",           name="effect_id",           optional=false,           order=0,           type="string"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=8,           type="defines.events"         },         {           description="",           name="quality",           optional=true,           order=7,           type="string"         },         {           description="",           name="source_entity",           optional=true,           order=3,           type="LuaEntity"         },         {           description="",           name="source_position",           optional=true,           order=2,           type="MapPosition"         },         {           description="The surface the effect happened on.",           name="surface_index",           optional=false,           order=1,           type="uint"         },         {           description="",           name="target_entity",           optional=true,           order=5,           type="LuaEntity"         },         {           description="",           name="target_position",           optional=true,           order=4,           type="MapPosition"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=9,           type="uint"         }       },       description="Called when a script trigger effect is triggered.",       name="on_script_trigger_effect",       order=169     },     {       data={         {           description="Area of the scanned chunk.",           name="area",           optional=false,           order=2,           type="BoundingBox"         },         {           description="The chunk scanned.",           name="chunk_position",           optional=false,           order=1,           type="ChunkPosition"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The radar that did the scanning.",           name="radar",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when an entity of type `radar` finishes scanning a sector.",       filter="LuaSectorScannedEventFilter",       name="on_sector_scanned",       order=170     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when an individual segment of a SegmentedUnit is created.",       name="on_segment_entity_created",       order=171     },     {       data={         {           description="The last selected entity if it still exists and there was one.",           name="last_entity",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player whose selected entity changed.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after the selected entity changes for a given player.",       name="on_selected_entity_changed",       order=172     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=0,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=1,           type="uint"         }       },       description="Called when [LuaGameScript::is_multiplayer](runtime:LuaGameScript::is_multiplayer) changes to false. May also be raised when it was already false but a game was loaded from a save file without hosting.",       name="on_singleplayer_init",       order=173     },     {       data={         {           description="The entity built.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=4,           type="defines.events"         },         {           description="The platform that did the building.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="The item used to do the building.",           name="stack",           optional=false,           order=2,           type="LuaItemStack"         },         {           description="The tags associated with this entity if any.",           name="tags",           optional=true,           order=3,           type="Tags"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=5,           type="uint"         }       },       description="Called when a space platform builds an entity.",       filter="LuaPlatformBuiltEntityEventFilter",       name="on_space_platform_built_entity",       order=174     },     {       data={         {           description="The inventory containing the stacks used to build the tiles.",           name="inventory",           optional=false,           order=5,           type="LuaInventory"         },         {           description="The item type used to build the tiles.",           name="item",           optional=false,           order=3,           type="LuaItemPrototype"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=7,           type="defines.events"         },         {           description="The platform.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="The quality the item used to build the tiles.",           name="quality",           optional=false,           order=4,           type="LuaQualityPrototype"         },         {           description="The surface the tile(s) are build on.",           name="surface_index",           optional=false,           order=6,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=8,           type="uint"         },         {           description="The tile prototype that was placed.",           name="tile",           optional=false,           order=2,           type="LuaTilePrototype"         },         {           description="The position data.",           name="tiles",           optional=false,           order=1,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a space platform builds tiles.",       name="on_space_platform_built_tile",       order=175     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="old_state",           optional=false,           order=1,           type="defines.space_platform_state"         },         {           description="",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a space platform changes state",       name="on_space_platform_changed_state",       order=176     },     {       data={         {           description="The temporary inventory that holds the result of mining the entity.",           name="buffer",           optional=false,           order=2,           type="LuaInventory"         },         {           description="The entity that has been mined.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The platform doing the mining.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the platform as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",       filter="LuaPlatformMinedEntityEventFilter",       name="on_space_platform_mined_entity",       order=177     },     {       data={         {           description="The entity the platform just picked up.",           name="item_stack",           optional=false,           order=1,           type="ItemWithCount"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The platform that did the mining.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when a platform mines an entity.",       name="on_space_platform_mined_item",       order=178     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The platform.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="The surface the tile(s) were mined on.",           name="surface_index",           optional=false,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="The position data.",           name="tiles",           optional=false,           order=1,           type={             complex_type="array",             value="OldTileAndPosition"           }         }       },       description="Called after a platform mines tiles.",       name="on_space_platform_mined_tile",       order=179     },     {       data={         {           description="The entity which is about to be mined.",           name="entity",           optional=false,           order=1,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The platform that's about to do the mining.",           name="platform",           optional=false,           order=0,           type="LuaSpacePlatform"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called before a platform mines an entity.",       filter="LuaPrePlatformMinedEntityEventFilter",       name="on_space_platform_pre_mined",       order=180     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         },         {           description="Spider vehicle which was requested to move.",           name="vehicle",           optional=false,           order=0,           type="LuaEntity"         }       },       description="Called when a spider finishes moving to its autopilot position.",       name="on_spider_command_completed",       order=181     },     {       data={         {           description="The unique id for this translation request.",           name="id",           optional=false,           order=3,           type="uint"         },         {           description="The localised string being translated.",           name="localised_string",           optional=false,           order=1,           type="LocalisedString"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=5,           type="defines.events"         },         {           description="The player whose locale was used for the translation.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="The translated `localised_string`.",           name="result",           optional=false,           order=2,           type="string"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=6,           type="uint"         },         {           description="Whether the requested localised string was valid and could be translated.",           name="translated",           optional=false,           order=4,           type="boolean"         }       },       description="Called when a translation request generated through [LuaPlayer::request_translation](runtime:LuaPlayer::request_translation) or [LuaPlayer::request_translations](runtime:LuaPlayer::request_translations) has been completed.",       name="on_string_translated",       order=182     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called just after a surface is cleared (all entities removed and all chunks deleted).",       name="on_surface_cleared",       order=183     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a surface is created.\n\nThis is not called when the default surface is created as it will always exist.",       name="on_surface_created",       order=184     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called after a surface is deleted.",       name="on_surface_deleted",       order=185     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The original surface name.",           name="original_name",           optional=false,           order=1,           type="string"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called after a surface is imported via the map editor.",       name="on_surface_imported",       order=186     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="",           name="new_name",           optional=false,           order=2,           type="string"         },         {           description="",           name="old_name",           optional=false,           order=1,           type="string"         },         {           description="",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when a surface is renamed.",       name="on_surface_renamed",       order=187     },     {       data={         {           description="",           name="force",           optional=false,           order=0,           type="LuaForce"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when [LuaForce::reset_technology_effects](runtime:LuaForce::reset_technology_effects) is finished.",       name="on_technology_effects_reset",       order=188     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=0,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=1,           type="uint"         }       },       description="It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy code.",       name="on_tick",       order=189     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="old_state",           optional=false,           order=1,           type="defines.train_state"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="",           name="train",           optional=false,           order=0,           type="LuaTrain"         }       },       description="Called when a train changes state (started to stopped and vice versa)",       name="on_train_changed_state",       order=190     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The first old train id when splitting/merging trains.",           name="old_train_id_1",           optional=true,           order=1,           type="uint"         },         {           description="The second old train id when splitting/merging trains.",           name="old_train_id_2",           optional=true,           order=2,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         },         {           description="",           name="train",           optional=false,           order=0,           type="LuaTrain"         }       },       description="Called when a new train is created either through disconnecting/connecting an existing one or building a new one.",       name="on_train_created",       order=191     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who made the change if any.",           name="player_index",           optional=true,           order=1,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="",           name="train",           optional=false,           order=0,           type="LuaTrain"         }       },       description="Called when a trains schedule is changed either by the player or through script.",       name="on_train_schedule_changed",       order=192     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="source",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype defined `trigger_created_entity=true`.",       name="on_trigger_created_entity",       order=193     },     {       data={         {           description="",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="",           name="source",           optional=true,           order=1,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger prototype defined `trigger_fired_artillery=true`.",       name="on_trigger_fired_artillery",       order=194     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The packet data",           name="payload",           optional=false,           order=0,           type="string"         },         {           description="The player index whose instance received this packet, or 0 if received on the server",           name="player_index",           optional=false,           order=2,           type="uint"         },         {           description="The source port the packet was received from",           name="source_port",           optional=false,           order=1,           type="uint16"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="Called when new packets are processed by [LuaHelpers::recv_udp](runtime:LuaHelpers::recv_udp).",       name="on_udp_packet_received",       order=195     },     {       data={         {           description="The context of the undo action.",           name="actions",           optional=false,           order=1,           type={             complex_type="array",             value="UndoRedoAction"           }         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The player who triggered the undo action.",           name="player_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="Called when the player triggers \"undo\".",       name="on_undo_applied",       order=196     },     {       data={         {           description="",           name="group",           optional=false,           order=1,           type="LuaCommandable"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="",           name="unit",           optional=false,           order=0,           type="LuaEntity"         }       },       description="Called when a unit is added to a unit group.",       name="on_unit_added_to_group",       order=197     },     {       data={         {           description="",           name="group",           optional=false,           order=0,           type="LuaCommandable"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a new unit group is created, before any members are added to it.",       name="on_unit_group_created",       order=198     },     {       data={         {           description="",           name="group",           optional=false,           order=0,           type="LuaCommandable"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a unit group finishes gathering and starts executing its command.",       name="on_unit_group_finished_gathering",       order=199     },     {       data={         {           description="",           name="group",           optional=false,           order=1,           type="LuaCommandable"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="",           name="unit",           optional=false,           order=0,           type="LuaEntity"         }       },       description="Called when a unit is removed from a unit group.",       name="on_unit_removed_from_group",       order=200     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="",           name="robot",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="Called when a worker (construction or logistic) robot expires through a lack of energy.",       name="on_worker_robot_expired",       order=201     },     {       data={         {           description="The entity that has been built.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="A static event mods can use to tell other mods they built something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_built](runtime:LuaBootstrap::raise_script_built), or when `raise_built` is passed to [LuaSurface::create_entity](runtime:LuaSurface::create_entity).",       filter="LuaScriptRaisedBuiltEventFilter",       name="script_raised_built",       order=202     },     {       data={         {           description="The entity that was destroyed.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=1,           type="defines.events"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=2,           type="uint"         }       },       description="A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_destroy](runtime:LuaBootstrap::raise_script_destroy), or when `raise_destroy` is passed to [LuaEntity::destroy](runtime:LuaEntity::destroy).",       filter="LuaScriptRaisedDestroyEventFilter",       name="script_raised_destroy",       order=203     },     {       data={         {           description="The entity that was revived.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The tags associated with this entity, if any.",           name="tags",           optional=true,           order=1,           type="Tags"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         }       },       description="A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_revive](runtime:LuaBootstrap::raise_script_revive), or when `raise_revive` is passed to [LuaEntity::revive](runtime:LuaEntity::revive).",       filter="LuaScriptRaisedReviveEventFilter",       name="script_raised_revive",       order=204     },     {       data={         {           description="Identifier of the event",           name="name",           optional=false,           order=2,           type="defines.events"         },         {           description="The surface whose tiles were changed.",           name="surface_index",           optional=false,           order=0,           type="uint"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=3,           type="uint"         },         {           description="The tiles that were changed.",           name="tiles",           optional=false,           order=1,           type={             complex_type="array",             value="Tile"           }         }       },       description="A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_set_tiles](runtime:LuaBootstrap::raise_script_set_tiles), or when `raise_event` is passed to [LuaSurface::set_tiles](runtime:LuaSurface::set_tiles).",       name="script_raised_set_tiles",       order=205     },     {       data={         {           description="The entity that was teleported.",           name="entity",           optional=false,           order=0,           type="LuaEntity"         },         {           description="Identifier of the event",           name="name",           optional=false,           order=3,           type="defines.events"         },         {           description="The entity's position before the teleportation.",           name="old_position",           optional=false,           order=2,           type="MapPosition"         },         {           description="The entity's surface before the teleportation.",           name="old_surface_index",           optional=false,           order=1,           type="uint8"         },         {           description="Tick the event was generated.",           name="tick",           optional=false,           order=4,           type="uint"         }       },       description="A static event mods can use to tell other mods they teleported something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_teleported](runtime:LuaBootstrap::raise_script_teleported), or when `raise_teleported` is passed to [LuaControl::teleport](runtime:LuaControl::teleport).",       filter="LuaScriptRaisedTeleportedEventFilter",       name="script_raised_teleported",       order=206     }   },   global_functions={     {       description="`localised_print()` allows printing [LocalisedString](runtime:LocalisedString) to stdout without polluting the Factorio [log file](https://wiki.factorio.com/Log_file). This is primarily useful when communicating with external tools that launch Factorio as a child process.",       format={         takes_table=false       },       name="localised_print",       order=1,       parameters={         {           description="",           name="string",           optional=false,           order=0,           type="LocalisedString"         }       },       return_values={}     },     {       description="`log()` can print [LocalisedStrings](runtime:LocalisedString) to the Factorio [log file](https://wiki.factorio.com/Log_file). This, in combination with the serpent library, makes debugging in the data stage easier because it allows the inspection of entire prototype tables. For example, printing all properties of the sulfur item prototype can be done like so: `log(serpent.block(data.raw[\"item\"][\"sulfur\"]))`",       format={         takes_table=false       },       name="log",       order=0,       parameters={         {           description="",           name="string",           optional=false,           order=0,           type="LocalisedString"         }       },       return_values={}     },     {       description="Factorio provides the `table_size()` function as a simple way to determine the size of tables with non-continuous keys, as the standard `#` operator does not work correctly for these. The function is a C++ implementation of the following Lua code, which is faster than doing the same in Lua:\n\n```\nlocal function size(t)\n  local count = 0\n  for k,v in pairs(t) do\n    count = count + 1\n  end\n  return count\nend\n```\n\nNote that `table_size()` does not work correctly for [LuaCustomTable](runtime:LuaCustomTable), their size has to be determined with [LuaCustomTable::length_operator](runtime:LuaCustomTable::length_operator) instead.",       format={         takes_table=false       },       name="table_size",       order=2,       parameters={         {           description="",           name="table",           optional=false,           order=0,           type="table"         }       },       return_values={         {           description="",           optional=false,           order=0,           type="uint"         }       }     }   },   global_objects={     {       description="Allows registration of custom commands for the in-game console.",       name="commands",       order=2,       type="LuaCommandProcessor"     },     {       description="The main scripting interface through which most of the API is accessed.",       name="game",       order=0,       type="LuaGameScript"     },     {       description="Provides access to various helper and utility functions.",       name="helpers",       order=3,       type="LuaHelpers"     },     {       description="Allows read-only access to prototypes.",       name="prototypes",       order=4,       type="LuaPrototypes"     },     {       description="Allows printing messages to the calling RCON instance, if any.",       name="rcon",       order=5,       type="LuaRCON"     },     {       description="Allows registration and use of functions to communicate between mods.",       name="remote",       order=6,       type="LuaRemote"     },     {       description="Allows rendering of geometric shapes, text and sprites in the game world.",       name="rendering",       order=7,       type="LuaRendering"     },     {       description="Provides an interface for registering game event handlers.",       name="script",       order=1,       type="LuaBootstrap"     },     {       description="Provides access to the current mod settings.",       name="settings",       order=8,       type="LuaSettings"     }   },   stage="runtime" }